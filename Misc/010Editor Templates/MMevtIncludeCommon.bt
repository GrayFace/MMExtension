// Global properties:

local int EvtShowErrors = true;
local int EvtGenerateWholeDescription = false;
local byte EvtFilter = -1;
local int EvtOnSizeChangedSet = false;
// Event prototype:
// void EvtOnSizeChanged(int dsize, int pos);
//  dsize is newSize - oldSize, pos is the position of the command that was evt_changed

typedef uint EvtInt; // Exception: 6\LWSPIRAL , 6\SPIRAL - it's 1 byte there

//const string EvtLabelFormat = "%X.%X:";
const string EvtLabelFormat = "%d.%X:";


//------------------------------------------------------
//  Local vars

local int evt_changed = false;
local int evt_LastEvt = 0;

//------------------------------------------------------
//  Enums

enum <ubyte> bool
{
  _true 	= 1,
  _false 	= 0
};

enum <short> TEvtDirection
{
  d_Right	= 0x000,
  d_UpRight	= 0x100,
  d_Up  	= 0x200,
  d_UpLeft	= 0x300,
  d_Left	= 0x400,
  d_DownLeft	= 0x500,
  d_Down	= 0x600,
  d_DownRight	= 0x700
};

enum <short> TEvtZAngle
{
  z_Forward	= 0x000,
  z_UpForward	= 0x100,
  z_Up  	= 0x200,
  z_UpBack	= 0x300,
  z_Back	= 0x400,
  z_DownBack	= 0x500,
  z_Down	= 0x600,
  z_DownForward = 0x700
};

typedef struct
{
  ubyte EachYear;
  ubyte EachMonth;
  ubyte EachWeek;
  ubyte Hour;
  ubyte Min;
  ubyte Sec;
  
} TEvtDateTime;

enum <int> TChestBit
{
  c_Trapped	= 1
};

enum <uint> TMonGroupBit
{
  mb_Invisible	= 0x10000,
  mb_Hostile	= 0x80000
// 20C400 
// 200000
// 204000
// 20C400
//   C400
// 20C400
//   C400
// 204000
// 200000
// 200000
// 200000
// 200000
};

enum <int> TFaceBit
{
  fb_Invisible		= 0x00002000,
  fb_Untouchable	= 0x20000000,
  fb_TriggerByClick	= 0x02000000,
  fb_TriggerByTouch	= 0x00080000,
  fb_TriggerByStep	= 0x04000000
};

enum <ubyte> TEvtItemType
{
  MeleeWeapons	= 1,
  Weapon2Handed	= 2,
  RangedWeapon	= 3,
  BodyArmor	= 4,
  Shields2	= 5,
  Helms2 	= 6,
  Belts2 	= 7,
  Cloaks2	= 8,
  Gountlets2	= 9,
  Boots2 	= 10,
  Rings2 	= 11,
  Amulets2	= 12,
  Wands2 	= 13,
  Reagents2	= 14,
  Potions2	= 15,
  Scrolls2	= 16,
  Books 	= 17,
  MScroll	= 18, // not supported, always creates item 001
  Money 	= 19,
  Weapon	= 20,
  Armor 	= 21,
  Misc  	= 22,
  Swords	= 23,
  Daggers	= 24,
  Axes  	= 25,
  Spears	= 26,
  Bows  	= 27,
  Maces 	= 28,

  Staffs	= 30,
  Leather	= 31,
  Chain 	= 32,
  Plate 	= 33,
  Shields	= 34,
  Helms 	= 35,
  Belts 	= 36,
  Cloaks	= 37,
  Gountlets	= 38,
  Boots 	= 39,
  Rings 	= 40,
  Amulets	= 41,
  Wands 	= 42,
  Scrolls	= 43,
  Potions	= 44,
  Reagents	= 45,
  Gems  	= 46,
  Gems2 	= 47
};

enum <ubyte> TCharacterAnimation
{
  KilledEnemy		= 1,
  KilledEnemy2		= 2,
  StoreClosed		= 3,
  ItsSafe		= 4,
  ItsGonnaBlow		= 5,
  SitDown		= 6,
  IdentifyUseless	= 7,
  IdentifyGreat		= 8,
  CantIdentify		= 9,
  Repaired		= 10,
  CantRepair		= 11,
  Done  		= 12, // ?
  CantCampHere		= 13,
  Smile 		= 14,
  CantCarryAnymore	= 15,
  MixedPotion		= 16,
  PotionExplode		= 17,
  LockedDoor		= 18,
  Pushing		= 19, // Like pulling a sword out of stone
  CantLearnThis		= 20,
  LearnedSpell		= 21,
  Hello 		= 22,
  Hello2		= 23,
  GettingHit		= 24,
  GettingWeak		= 25,
  GettingAfraid		= 26,
  GettingPoisoned	= 27,
  GettingDeseased	= 28,
  GettingInsane		= 29,
  GettingCursed		= 30,
  GettingDrunk		= 31,
  GettingUnconsious	= 32,
  Death 		= 33,
  GettingStoned		= 34,
  GettingEradicated	= 35,
  Smile2		= 36,
  Squint		= 37,
  NotEnoughGold		= 38,
  CantCarryItem		= 39,
  StrangeGood		= 40,
  StrangeSad		= 41,
  SilentYell		= 42, // silent yell
  Angry 		= 43,

  ComeOnLetsGoIn	= 46,
  LetsGetAway		= 47,
  ImInTrouble		= 48,
  CastingSpell		= 49,

  Smile3		= 51,
  Angry2		= 52,
  Crying		= 53,
  Strange		= 54,
  Smile4		= 55,

  VeryHappy		= 57,

  Smile5		= 60,
  Smile6		= 61,
  Smile7		= 62,
  Strange2		= 63,
  Yell  		= 65,
  Falling		= 66,
  ShakeHeadNo		= 67,
  Smile8		= 68,
  InsaneSmile		= 69,
  SomeFace		= 70,
  ShakeHeadYes		= 71,
  Smile9		= 72,
  Reading		= 73,

  Smile10		= 75,

  Smile11		= 77,

  ThatWasRude		= 80,

  Smile12		= 82,
  SomeFace2		= 83,
  
  SilentAfraid		= 98,

  CantIdentifyMonster	= 106,
  IllSaveUs		= 107,
  WeNeedFood		= 108,

  GettingInsane2	= 110,
  
  NoProblemIllDoIt	= 115
};

enum <ubyte> TSeason
{
  Autumn	= 0,
  Summer	= 1,
  Fall  	= 2,
  Winter	= 3
};

//------------------------------------------------------
//  TEvtString

typedef struct
{
  string Str;
  local uint SizePtr = startof(OpLen);
  
} TEvtString <read=ReadTEvtString, write=WriteTEvtString>;

string ReadTEvtString(TEvtString &a)
{
  if (evt_changed)
    return "Press F5";
  else
    return a.Str;
}

void WriteTEvtString(TEvtString &a, string str)
{
  if (evt_changed) return;

  int oldLen = sizeof(a.Str) - 1;
  int newLen = sizeof(str) - 1; // no null-character
  if (newLen < 0)
    newLen = 0;
  int pos = startof(a);
  evt_changed = oldLen != newLen;
  if (oldLen > newLen)
    DeleteBytes(pos + newLen, oldLen - newLen);
  else
    if (oldLen < newLen)
      InsertBytes(pos + oldLen, newLen - oldLen);
    
  if (evt_changed && EvtOnSizeChangedSet)
    EvtOnSizeChanged(newLen - oldLen, pos);
    
  if (newLen > 0)
    WriteBytes(str, pos, newLen);
  
  pos = a.SizePtr;
  if (pos < 0) return;
  
  WriteUInt(pos, ReadUInt(pos) + newLen - oldLen);
}

// -----------------------------------------------------------------------------
// Commands
// -----------------------------------------------------------------------------

//  TEvtCmd

enum <ubyte> TEvtCmd
{
  end   		= 0x01, // Exit
  EnterHouse		= 0x02,
  PlaySound		= 0x03,
  hint  		= 0x04, // text shown on mouse over
  LocationName		= 0x05, // MM6 only
  MoveToMap		= 0x06,
  OpenChest		= 0x07,
  FaceExpression		= 0x08, // Like when pulling a sword out of stone
  DamagePlayer	= 0x09,
  SetSnow 	= 0x0A, // MM6 only, do nothing in MM8
  SetTexture		= 0x0B,
#ifdef mm6
  SetTextureOutdoors    = 0x0C,
#else
  ShowMovie   = 0x0C,
#endif
  SetSprite		= 0x0D,
  cmp   		= 0x0E, // >= for int, 'contains' for sets, == for some variables
  SetDoorState	= 0x0F,
  add   		= 0x10,
  sub   		= 0x11,
  set			= 0x12, // assign, 'add' for sets
  SummonMonsters	= 0x13,
  // 14 - not used at all? (present in MM6 NWC)
  CastSpell		= 0x15,
  SpeakNPC		= 0x16, // Without a big picture
  SetFacesBit		= 0x17,
#ifdef mm6
  SetFacetBitOutdoors		= 0x18, // (something for NPCGroups in MM8)
#else
  SetMonsterBit   = 0x18,
#endif
  RandomGoTo		= 0x19,
  Question		= 0x1A, // Works only inside a house in MM8!
  // 1B - not used at all? (present in MM6 D09)
  // 1C - not used at all? (present in MM6 D09)
  StatusText		= 0x1D, // Like "Refreshing!"
  SetMessage		= 0x1E, // Like puzzles in the Shadow Guild in White Cup & obelisks
  OnTimer		= 0x1F,
  SetGlow		= 0x20,
  SimpleMessage		= 0x21, // Used with SetMessage
  SummonObject		= 0x22,
  ForPlayer	= 0x23, // 23 05 = apply to whole team
  jmp   		= 0x24,
  OnLoadMap		= 0x25,
  OnRefillTimer		= 0x26,
  SetNPCTopic		= 0x27,
  MoveNPC		= 0x28,
  GiveItem		= 0x29,
  ChangeEvent		= 0x2A, // Used to change "Red Barrel" into "Empty Barrel"
  CheckSkill		= 0x2B,
  CanShowTopic_Cmp = 0x2C,
  CanShowTopic_End	= 0x2D,
  CanShowTopic_Set	= 0x2E,
  SetNPCGroupNews	= 0x2F,
  SetMonsterGroup = 0x30,
  SetNPCItem = 0x31, // Sets items to be found in the corpse
  SetNPCGreeting	= 0x32,
  CheckMonstersKilled	= 0x33,
  CanShowTopic_CheckMonstersKilled = 0x34,
  OnLeaveMap		= 0x35,
  ChangeGroupToGroup = 0x36,
  ChangeGroupAlly = 0x37,
  CheckSeason		= 0x38,
  SetMonGroupBit	= 0x39,
  SetChestBit	= 0x3A,
  FaceAnimation	= 0x3B,
  SetMonsterItem		= 0x3C, // Used for Tolberty and Robert the Wise
  OnDateTimer		= 0x3D,
  EnableDateTimer	= 0x3E,
  StopDoor		= 0x3F, // Stops animation in its current state (between ending states). Like in Abandoned Temple in MM8
  CheckItemsCount	= 0x40, // As in "Do you have ingredients?"
  RemoveItems		= 0x41, // As in "Do you have ingredients?"
  Jump		= 0x42,
  IsTotalBountyInRange = 0x43,
  IsPlayerInParty		= 0x44
};

//------------------------------------------------------
//  Defaults

const string CmdDef_00 = "";
const string CmdDef_01 = "00";
const string CmdDef_02 = "00 00 00 00";
const string CmdDef_03 = "00 00 00 00 00 00 00 00 00 00 00 00";
const string CmdDef_04 = "00";
const string CmdDef_05 = "00"; // MM6!
local string CmdDef_06; // (MoveToMap)
if (MMVersion == 8)
             CmdDef_06 = "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00";
else         CmdDef_06 = "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 30 00";
const string CmdDef_07 = "00";
const string CmdDef_08 = "00 00"; // MM6!
local string CmdDef_09;
if (MMVersion == 8)
             CmdDef_09 = "07 00 00 00 00 00";
else         CmdDef_09 = "04 00 00 00 00 00";
const string CmdDef_0A = "00 00"; // MM6!
const string CmdDef_0B = "00 00 00 00 00";
local string CmdDef_0C;
if (MMVersion != 6)
             CmdDef_0C = "01 00 00"; // (ShowMovie)
else         CmdDef_0C = "00 00 00 00 00 00 00 00 00"; // (?)
const string CmdDef_0D = "00 00 00 00 00 00";
local string CmdDef_0E;
if (MMVersion != 6)
             CmdDef_0E = "00 00 00 00 00 00 00";
else         CmdDef_0E = "00 00 00 00 00 00";
const string CmdDef_0F = "00 00";
local string CmdDef_10;
if (MMVersion != 6)
             CmdDef_10 = "00 00 00 00 00 00";
else         CmdDef_10 = "00 00 00 00 00";
local string CmdDef_11;
if (MMVersion != 6)
             CmdDef_11 = "00 00 00 00 00 00";
else         CmdDef_11 = "00 00 00 00 00";
local string CmdDef_12;
if (MMVersion != 6)
             CmdDef_12 = "00 00 00 00 00 00";
else         CmdDef_12 = "00 00 00 00 00";
local string CmdDef_13;
if (MMVersion != 6)
             CmdDef_13 = "01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00";
else         CmdDef_13 = "01 01 01 00 00 00 00 00 00 00 00 00 00 00 00";
const string CmdDef_14 = "00 00 00 00 01"; // MM6! only in NWC
const string CmdDef_15 = "00 03 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00";
const string CmdDef_16 = "00 00 00 00";
const string CmdDef_17 = "00 00 00 00 00 00 00 00 00";
local string CmdDef_18;
if (MMVersion != 6)
             CmdDef_18 = "00 00 00 00 00 00 00 00 00"; // don't know about MM7!
else         CmdDef_18 = "00 00 00 00 FF FF FF FF 00 00 00 00 00";
const string CmdDef_19 = "01 00 00 00 00 00";
const string CmdDef_1A = "00 00 00 00 00 00 00 00 00 00 00 00 00";
const string CmdDef_1B = "00 00"; // MM6!
const string CmdDef_1C = "00"; // MM6!
const string CmdDef_1D = "00 00 00 00";
const string CmdDef_1E = "00 00 00 00";
const string CmdDef_1F = "00 00 00 00 00 00 00 00 00 00";
const string CmdDef_20 = "01 00 00 00 00";
const string CmdDef_21 = "00"; // MM6!
const string CmdDef_22 = "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E8 03 00 00 01 00";
const string CmdDef_23 = "00";
const string CmdDef_24 = "00";
const string CmdDef_25 = "00";
const string CmdDef_26 = "00 00 00 00 00 00 00 00 00 00";
const string CmdDef_27 = "00 00 00 00 00 00 00 00 00";
const string CmdDef_28 = "00 00 00 00 00 00 00 00";
const string CmdDef_29 = "01 00 00 00 00 00";
const string CmdDef_2A = "00 00 00 00";
const string CmdDef_2B = "00 03 28 00 00 00 00";
const string CmdDef_2C = "00 00 00 00 00 00 00";
const string CmdDef_2D = "00";
const string CmdDef_2E = "00";
const string CmdDef_2F = "00 00 00 00 00 00 00 00";
const string CmdDef_30 = "";
const string CmdDef_31 = "00 00 00 00 00 00 00 00 00";
const string CmdDef_32 = "00 00 00 00 00 00 00 00";
local string CmdDef_33;
if (MMVersion == 8)
             CmdDef_33 = "00 00 00 00 00 00 00 00";
else         CmdDef_33 = "00 00 00 00 00 00 00";
const string CmdDef_34 = "";
const string CmdDef_35 = "00";
const string CmdDef_36 = "";
const string CmdDef_37 = "00 00 00 00 00 00 00 00";
const string CmdDef_38 = "00 00";
const string CmdDef_39 = "00 00 00 00 00 00 00 00 00";
const string CmdDef_3A = "00 00 00 00 01 00 00 00 00";
local string CmdDef_3B;
if (MMVersion == 8)
             CmdDef_3B = "07 12";
else         CmdDef_3B = "04 12";
const string CmdDef_3C = "00 00 00 00 00 00 00 00 01";
const string CmdDef_3D = "00 00 00 00 00 00 00 00";
const string CmdDef_3E = "00 00 00";
const string CmdDef_3F = "00 00 00 00";
const string CmdDef_40 = "00 00 00 00 00 00 00";
const string CmdDef_41 = "00 00 00 00 00 00";
const string CmdDef_42 = "00 00 00 00 DC 05 00 00";
const string CmdDef_43 = "00 00 00 00 00 00 00 00 00";
const string CmdDef_44 = "00 00 00 00 00";

//-------------------------
typedef struct // Exit
{
  ubyte not_used;
  
} Cmd_01;

//-------------------------
typedef struct // EnterHouse
{
  uint id2DEvent;
   // 600(dec) = you won
   // 601(dec) = you won 2 (unused)
  
} Cmd_02;

//-------------------------
typedef struct // ?
{
  int SoundID;
  int X;
  int Y;

} Cmd_03;

//-------------------------
typedef struct // hint
{
  ubyte idStr;

} Cmd_04;

//-------------------------
typedef struct // LocationName
{
  ubyte idStr;

} Cmd_05;

//-------------------------
typedef struct // MoveToMap
{
// Notes:
// If cancel is pressed, the execution is stopped
// If X,Y,Z,Direction,LookAngle,not_used,SpeedZ are all 0, the party isn't moved
// If id2DEvent and Icon are 0, the enter dungeon dialog isn't shown
  
  int X;
  int Y;
  int Z;
  TEvtDirection Direction <format=hex>; // -1 = special case
  ushort not_used; // Direction is actually 4 bytes long in this command
  int LookAngle;
  int SpeedZ;
  if (MMVersion == 8)
    ushort id2DEvent;
  else
    ubyte id2DEvent;
  ubyte Icon;
  TEvtString Name; // starst with "0" => current map
  
} Cmd_06;

//-------------------------
typedef struct // OpenChest
{
  ubyte ChestID;

} Cmd_07;

//-------------------------
typedef struct // FaceExpression
{
  TPartyMember PartyMember;
  ubyte Face;

} Cmd_08;

//-------------------------
typedef struct // DamagePlayer
{
  TPartyMember PartyMember;
  ubyte DmgType; // damage type (in most cases 00; 02 is used for a door in Shadow Guild)
  int Damage;

} Cmd_09;

//-------------------------
typedef struct // SetSnow
{
  ubyte EffectID; // 00 = snow in MM6
  ubyte On;

} Cmd_0A;

//-------------------------
typedef struct // SetTexture
{
  int FaceID;
  TEvtString Name;
  
} Cmd_0B;

//-------------------------
typedef struct // ShowMovie
{
  if (MMVersion != 6)
  {
    ubyte FullScreen_not_for_SMK;
    ubyte unk_2; // boolean?
  }
  else
  {
    uint unk_1; // far not boolean
    uint unk_2; // far not boolean
  }
  TEvtString Name;
  
} Cmd_0C;

//-------------------------
typedef struct // SetSprite
{
  int SpriteID;
  ubyte unk_2; // boolean, some flag of sprite
  TEvtString Name; // in case of "0" it sprite is removed (?)
  
} Cmd_0D;

//-------------------------
typedef struct // cmp
{
  EvtVar VarNum; // variable number
  int Value; // compare with
  ubyte jnb;
  
} Cmd_0E;

//-------------------------
typedef struct // SetDoorState
{
  ubyte AnimationID;
  ubyte State; // 00 - off, 01 - on, 02 - switch state
  
} Cmd_0F;

//-------------------------
typedef struct // add
{
  EvtVar VarNum;
  int Value;
  
} Cmd_10;

//-------------------------
typedef struct // sub
{
  EvtVar VarNum;
  int Value;
  
} Cmd_11;

//-------------------------
typedef struct // assign
{
  EvtVar VarNum;
  int Value;
  
} Cmd_12;

//-------------------------
typedef struct // SummonMonsters
{
  ubyte TypeIndexInMapStats;
  ubyte Level;
  ubyte Count;
  int X;
  int Y;
  int Z;
  if (MMVersion != 6)
  {
    int idNPCGroup;
    int unk_10;
  }
  
} Cmd_13;

//-------------------------
typedef struct // ?
{
  int unk_1;
  ubyte unk_2;
  
} Cmd_14;

//-------------------------
typedef struct // CastSpell
{
  ubyte SpellNum;
  ubyte SkillRank;
  ubyte SkillLevel;
  int FromX;
  int FromY;
  int FromZ;
  int ToX;
  int ToY;
  int ToZ;
  
} Cmd_15;

//-------------------------
typedef struct // SpeakNPC
{
  int NPC;

} Cmd_16;

//-------------------------
typedef struct // SetFacesBit
{
  int FacesID;
  TFaceBit Bit <format=hex>;
  ubyte On;

} Cmd_17;

//-------------------------
typedef struct // MM8: something with NPCGroups
{
  if (MMVersion == 6) // don't know about MM7
  {
    int MidelID; // number of structure in map (those shown on left click in MapViewer)
    int FaceID; // -1 = for all faces in structure
  }
  else
  {
    int idNPCGroup;
  }
  int Bit <format=hex>;
  ubyte On;

} Cmd_18;

//-------------------------
typedef struct // RandomGoto
{
  ubyte label_1;
  ubyte label_2;
  ubyte label_3;
  ubyte label_4;
  ubyte label_5;
  ubyte label_6;
  // 0 to skip a label
  
} Cmd_19;

//-------------------------
typedef struct // Question
{
  if (MMVersion == 8)
    EvtInt QuestionNPCText;
  else
    EvtInt ShortQuestion;
  EvtInt Answer1;
  EvtInt Answer2;
  ubyte jz;
  
} Cmd_1A;

//-------------------------
typedef struct // ?
{
  ubyte unk_1;
  ubyte unk_2;
  
} Cmd_1B;

//-------------------------
typedef struct // ?
{
  ubyte unk_1;
  
} Cmd_1C;

//-------------------------
typedef struct // StatusText
{
  EvtInt StringID;
  
} Cmd_1D;

//-------------------------
typedef struct // SetMessage
{
  EvtInt StringID;
  
} Cmd_1E;

//-------------------------
typedef struct // OnTimer
{
  TEvtDateTime TriggerTime;
  ushort Interval_half_sec; // half sec?
  ushort unk_1; // unused
  
} Cmd_1F;

//-------------------------
typedef struct // SetGlow
{
  int FaceID;
  ubyte On;
  
} Cmd_20;

//-------------------------
typedef struct // SimpleMessage
{
  ubyte unused;
  
} Cmd_21;

//-------------------------
typedef struct // SummonObject
{
  int ItemIndex; // + 1000*EnchantementStrength (1-6) (like described in the end of STDITEMS.TXT)
  int X;
  int Y;
  int Z;
  int unk_5;
  ubyte Count;
  ubyte unk_7; // boolean -- makes some randomness
  
} Cmd_22;

//-------------------------
typedef struct // ForPlayer
{
  TPartyMember PartyMember;
  
} Cmd_23;

//-------------------------
typedef struct // jmp
{
  ubyte GoTo;
  
} Cmd_24;

//-------------------------
typedef struct // OnLoadMap
{
  ubyte unk_1;
  
} Cmd_25;

//-------------------------
typedef struct // OnRefillTimer
{
  TEvtDateTime Interval;
  
  ushort SmallInterval_half_sec;
  ushort unk_2; // unused
  
} Cmd_26;

//-------------------------
typedef struct // SetNPCTopic
{
  int NPC;
  ubyte Index;
  int GlobalEvent;
  
} Cmd_27;

//-------------------------
typedef struct // MoveNPC
{
  uint NPC;
  uint id2DEventsLocation;
  
} Cmd_28;

//-------------------------
typedef struct // GiveItem
{
  ubyte ItemStrength; // 1-6 (like described in the end of STDITEMS.TXT)
  TEvtItemType ItemType;
  uint ItemID;
  // If ItemID is 0, the item is chosen by random from the specified class with specified strength,
  // otherwise, ItemType and ItemStremgth determine the enchancements
  // If both unk_1 and unk_2 are 0, the item is identified and has no enchancements
  
} Cmd_29;

//-------------------------
typedef struct // ChangeEvent
{
  uint newGlobalEvent;
  
} Cmd_2A;

//-------------------------
typedef struct // CheckSkill
{
  ubyte SkillType;
  ubyte SkillMastery;
  int OrSkillLevel; // Includes "Double effect" enchancements and NPC bonuses
  ubyte jnb;
  
} Cmd_2B;

//-------------------------
typedef struct // OnCanShowDialogItem
{
  EvtVar VarNum;
  int Value;
  ubyte jnb;
  
} Cmd_2C;

//-------------------------
typedef struct // EndCanShowDialogItem
{
  ubyte unk_1;
  
} Cmd_2D;

//-------------------------
typedef struct // SetCanShowDialogItem
{
  ubyte Visible;
  
} Cmd_2E;

//-------------------------
typedef struct // SetMonGroupNews
{
  uint idNPCGroup;
  uint idNPCNews;
  
} Cmd_2F;

//-------------------------
typedef struct // NPCSetItem
{
  int NPC;
  int Item;
  ubyte Give;
  
} Cmd_31;

//-------------------------
typedef struct // SetNPCGreeting
{
  int NPC;
  int GreetingID;
  
} Cmd_32;

//-------------------------
typedef struct // CheckMonstersKilled
{
  ubyte checkType; // 0..4, 0 = number of monsters alive
  uint idNPCGroup;
    
  ubyte unk_4;
  if (MMVersion == 8)
    ubyte cmpWith;
  
  ubyte jle;
  
} Cmd_33;

//-------------------------
typedef struct // OnMapLeave
{
  ubyte unk_1;
  
} Cmd_35;

//-------------------------
typedef struct // ChangeGroupAlly
{
  int NPCGroup;
  int Ally;
  
} Cmd_37;

//-------------------------
typedef struct // CheckSeason
{
  TSeason Season;
  ubyte jz;
  
} Cmd_38;

//-------------------------
typedef struct // SetMonGroupBit
{
  int idNPCGroup;
  TMonGroupBit Bit <format=hex>;
  ubyte On;
  
} Cmd_39;

//-------------------------
typedef struct // ChestSetTrapped
{
  int ChestId;
  TChestBit Bit <format=hex>;
  ubyte On;
  
} Cmd_3A;

//-------------------------
typedef struct // CharacterAnimation
{
  TPartyMember PartyMember;
  TCharacterAnimation Animation;
  
} Cmd_3B;

//-------------------------
typedef struct // MonSetItem
{
  int SpecMonID;
  int Item;
  ubyte GiveOrTake;
  
} Cmd_3C;

//-------------------------
typedef struct // OnDateTimer
{
  ubyte DataTimerID; // 0x3D00 is added to this
  ubyte HourPlus1;
  ubyte DayPlus1;
  ubyte WeekPlus1;
  ubyte YearPlus1;
  ushort FullYearPlus1;
  ubyte EnableAfter; // works every half of second
  // By default date timer is disabled!
  
} Cmd_3D;

//-------------------------
typedef struct // EnableDateTimer
{
  ushort DateTimerFullID; // add 0x3D00 to DataTimerID of Cmd_3D
  byte On;
  
} Cmd_3E;

//-------------------------
typedef struct // StopAnimation
{
  int AnimationID;
  
} Cmd_3F;

//-------------------------
typedef struct // CheckItemsCount
{
  ushort MinItemIndex;
  ushort MaxItemIndex;
  ushort Count;
  ubyte jnb;
  
} Cmd_40;

//-------------------------
typedef struct // RemoveItems
{
  ushort MinItemIndex;
  ushort MaxItemIndex;
  ushort Count;
  
} Cmd_41;

//-------------------------
typedef struct // SpecialJump
{
  TEvtDirection Direction <format=hex>;
  TEvtZAngle ZAngle <format=hex>;
  short Speed;
  short unk_4;
  
} Cmd_42;

//-------------------------
typedef struct // IsTotalBountyHuntingAwardInRange
{
  int MinMoney;
  int MaxMoney;
  ubyte jz;
  
} Cmd_43;

//-------------------------
typedef struct // IsNPCInParty
{
  uint RosterNPC;
  ubyte jz;
  
} Cmd_44;

// -----------------------------------------------------------------------------
// Structs
// -----------------------------------------------------------------------------

//  TComment

typedef struct
{
  local string Description = "";
  ubyte Dummy;  // Bug in 010 Editor v6.0.3 - 0-size structs descriptions aren't shown
  
} TComment <read=ReadTComment, optimize=false>;

string ReadTComment(TComment &a)
{
  return a.Description;
}

void WriteTComment(TComment &a, string str)
{
  a.Description = str;
}

//------------------------------------------------------
//  TEvtCommand

typedef struct
{
  local string Description;
  local string DescStart;
  local string DescCmd;
  local string s;

  SetForeColor(cLtGray);
  ubyte OpLen <format=hex>;
  if (OpLen < 5)
  {
    byte Trash[OpLen];
  } else
  {
  ushort Evt <format=hex>;
  ubyte Seq <format=hex>;
  SPrintf(DescStart, EvtLabelFormat, Evt, Seq);
  Description = DescStart + "  ";

  DescCmd = "";
  SetForeColor(cRed);
  TEvtCmd Cmd <format=hex>;
  SPrintf(s, "%1.2X", Cmd);
  DescCmd += s;

  SetForeColor(cNone);
  
  local int i = FTell();
  switch (Cmd)
  {
    case 0x01:  Cmd_01 CmdParams;  break;
    case 0x02:  Cmd_02 CmdParams;  break;
    case 0x03:  Cmd_03 CmdParams;  break;
    case 0x04:  Cmd_04 CmdParams;  break;
    case 0x05:  Cmd_05 CmdParams;  break;
    case 0x06:  Cmd_06 CmdParams;  break;
    case 0x07:  Cmd_07 CmdParams;  break;
    case 0x08:  Cmd_08 CmdParams;  break;
    case 0x09:  Cmd_09 CmdParams;  break;
    case 0x0A:  Cmd_0A CmdParams;  break;
    case 0x0B:  Cmd_0B CmdParams;  break;
    case 0x0C:  Cmd_0C CmdParams;  break;
    case 0x0D:  Cmd_0D CmdParams;  break;
    case 0x0E:  Cmd_0E CmdParams;  break;
    case 0x0F:  Cmd_0F CmdParams;  break;
    case 0x10:  Cmd_10 CmdParams;  break;
    case 0x11:  Cmd_11 CmdParams;  break;
    case 0x12:  Cmd_12 CmdParams;  break;
    case 0x13:  Cmd_13 CmdParams;  break;
    case 0x14:  Cmd_14 CmdParams;  break;
    case 0x15:  Cmd_15 CmdParams;  break;
    case 0x16:  Cmd_16 CmdParams;  break;
    case 0x17:  Cmd_17 CmdParams;  break;
    case 0x18:  Cmd_18 CmdParams;  break;
    case 0x19:  Cmd_19 CmdParams;  break;
    case 0x1A:  Cmd_1A CmdParams;  break;
    case 0x1B:  Cmd_1B CmdParams;  break;
    case 0x1C:  Cmd_1C CmdParams;  break;
    case 0x1D:  Cmd_1D CmdParams;  break;
    case 0x1E:  Cmd_1E CmdParams;  break;
    case 0x1F:  Cmd_1F CmdParams;  break;
    case 0x20:  Cmd_20 CmdParams;  break;
    case 0x21:  Cmd_21 CmdParams;  break;
    case 0x22:  Cmd_22 CmdParams;  break;
    case 0x23:  Cmd_23 CmdParams;  break;
    case 0x24:  Cmd_24 CmdParams;  break;
    case 0x25:  Cmd_25 CmdParams;  break;
    case 0x26:  Cmd_26 CmdParams;  break;
    case 0x27:  Cmd_27 CmdParams;  break;
    case 0x28:  Cmd_28 CmdParams;  break;
    case 0x29:  Cmd_29 CmdParams;  break;
    case 0x2A:  Cmd_2A CmdParams;  break;
    case 0x2B:  Cmd_2B CmdParams;  break;
    case 0x2C:  Cmd_2C CmdParams;  break;
    case 0x2D:  Cmd_2D CmdParams;  break;
    case 0x2E:  Cmd_2E CmdParams;  break;
    case 0x2F:  Cmd_2F CmdParams;  break;
    // case 0x30:  Cmd_30 CmdParams;  break;
    case 0x31:  Cmd_31 CmdParams;  break;
    case 0x32:  Cmd_32 CmdParams;  break;
    case 0x33:  Cmd_33 CmdParams;  break;
    // case 0x34:  Cmd_34 CmdParams;  break;
    case 0x35:  Cmd_35 CmdParams;  break;
    // case 0x36:  Cmd_36 CmdParams;  break;
    case 0x37:  Cmd_37 CmdParams;  break;
    case 0x38:  Cmd_38 CmdParams;  break;
    case 0x39:  Cmd_39 CmdParams;  break;
    case 0x3A:  Cmd_3A CmdParams;  break;
    case 0x3B:  Cmd_3B CmdParams;  break;
    case 0x3C:  Cmd_3C CmdParams;  break;
    case 0x3D:  Cmd_3D CmdParams;  break;
    case 0x3E:  Cmd_3E CmdParams;  break;
    case 0x3F:  Cmd_3F CmdParams;  break;
    case 0x40:  Cmd_40 CmdParams;  break;
    case 0x41:  Cmd_41 CmdParams;  break;
    case 0x42:  Cmd_42 CmdParams;  break;
    case 0x43:  Cmd_43 CmdParams;  break;
    case 0x44:  Cmd_44 CmdParams;  break;

    default:
      SPrintf(s, "%X", Cmd);    
      if (EvtShowErrors) Errors.Description += s + "\r\n";
      if (EvtFilter == 0) EvtFilter = Cmd; // Show in Whole Description
      break;
  }
  
  if (EvtFilter == 0) // Find unknown commands
    switch (Cmd)
    {
      case 0x01:  if (CmdDef_01 == "") EvtFilter = 0x01;  break;
      case 0x02:  if (CmdDef_02 == "") EvtFilter = 0x02;  break;
      case 0x03:  if (CmdDef_03 == "") EvtFilter = 0x03;  break;
      case 0x04:  if (CmdDef_04 == "") EvtFilter = 0x04;  break;
      case 0x05:  if (CmdDef_05 == "") EvtFilter = 0x05;  break;
      case 0x06:  if (CmdDef_06 == "") EvtFilter = 0x06;  break;
      case 0x07:  if (CmdDef_07 == "") EvtFilter = 0x07;  break;
      case 0x08:  if (CmdDef_08 == "") EvtFilter = 0x08;  break;
      case 0x09:  if (CmdDef_09 == "") EvtFilter = 0x09;  break;
      case 0x0A:  if (CmdDef_0A == "") EvtFilter = 0x0A;  break;
      case 0x0B:  if (CmdDef_0B == "") EvtFilter = 0x0B;  break;
      case 0x0C:  if (CmdDef_0C == "") EvtFilter = 0x0C;  break;
      case 0x0D:  if (CmdDef_0D == "") EvtFilter = 0x0D;  break;
      case 0x0E:  if (CmdDef_0E == "") EvtFilter = 0x0E;  break;
      case 0x0F:  if (CmdDef_0F == "") EvtFilter = 0x0F;  break;
      case 0x10:  if (CmdDef_10 == "") EvtFilter = 0x10;  break;
      case 0x11:  if (CmdDef_11 == "") EvtFilter = 0x11;  break;
      case 0x12:  if (CmdDef_12 == "") EvtFilter = 0x12;  break;
      case 0x13:  if (CmdDef_13 == "") EvtFilter = 0x13;  break;
      case 0x14:  if (CmdDef_14 == "") EvtFilter = 0x14;  break;
      case 0x15:  if (CmdDef_15 == "") EvtFilter = 0x15;  break;
      case 0x16:  if (CmdDef_16 == "") EvtFilter = 0x16;  break;
      case 0x17:  if (CmdDef_17 == "") EvtFilter = 0x17;  break;
      case 0x18:  if (CmdDef_18 == "") EvtFilter = 0x18;  break;
      case 0x19:  if (CmdDef_19 == "") EvtFilter = 0x19;  break;
      case 0x1A:  if (CmdDef_1A == "") EvtFilter = 0x1A;  break;
      case 0x1B:  if (CmdDef_1B == "") EvtFilter = 0x1B;  break;
      case 0x1C:  if (CmdDef_1C == "") EvtFilter = 0x1C;  break;
      case 0x1D:  if (CmdDef_1D == "") EvtFilter = 0x1D;  break;
      case 0x1E:  if (CmdDef_1E == "") EvtFilter = 0x1E;  break;
      case 0x1F:  if (CmdDef_1F == "") EvtFilter = 0x1F;  break;
      case 0x20:  if (CmdDef_20 == "") EvtFilter = 0x20;  break;
      case 0x21:  if (CmdDef_21 == "") EvtFilter = 0x21;  break;
      case 0x22:  if (CmdDef_22 == "") EvtFilter = 0x22;  break;
      case 0x23:  if (CmdDef_23 == "") EvtFilter = 0x23;  break;
      case 0x24:  if (CmdDef_24 == "") EvtFilter = 0x24;  break;
      case 0x25:  if (CmdDef_25 == "") EvtFilter = 0x25;  break;
      case 0x26:  if (CmdDef_26 == "") EvtFilter = 0x26;  break;
      case 0x27:  if (CmdDef_27 == "") EvtFilter = 0x27;  break;
      case 0x28:  if (CmdDef_28 == "") EvtFilter = 0x28;  break;
      case 0x29:  if (CmdDef_29 == "") EvtFilter = 0x29;  break;
      case 0x2A:  if (CmdDef_2A == "") EvtFilter = 0x2A;  break;
      case 0x2B:  if (CmdDef_2B == "") EvtFilter = 0x2B;  break;
      case 0x2C:  if (CmdDef_2C == "") EvtFilter = 0x2C;  break;
      case 0x2D:  if (CmdDef_2D == "") EvtFilter = 0x2D;  break;
      case 0x2E:  if (CmdDef_2E == "") EvtFilter = 0x2E;  break;
      case 0x2F:  if (CmdDef_2F == "") EvtFilter = 0x2F;  break;
      case 0x30:  if (CmdDef_30 == "") EvtFilter = 0x30;  break;
      case 0x31:  if (CmdDef_31 == "") EvtFilter = 0x31;  break;
      case 0x32:  if (CmdDef_32 == "") EvtFilter = 0x32;  break;
      case 0x33:  if (CmdDef_33 == "") EvtFilter = 0x33;  break;
      case 0x34:  if (CmdDef_34 == "") EvtFilter = 0x34;  break;
      case 0x35:  if (CmdDef_35 == "") EvtFilter = 0x35;  break;
      case 0x36:  if (CmdDef_36 == "") EvtFilter = 0x36;  break;
      case 0x37:  if (CmdDef_37 == "") EvtFilter = 0x37;  break;
      case 0x38:  if (CmdDef_38 == "") EvtFilter = 0x38;  break;
      case 0x39:  if (CmdDef_39 == "") EvtFilter = 0x39;  break;
      case 0x3A:  if (CmdDef_3A == "") EvtFilter = 0x3A;  break;
      case 0x3B:  if (CmdDef_3B == "") EvtFilter = 0x3B;  break;
      case 0x3C:  if (CmdDef_3C == "") EvtFilter = 0x3C;  break;
      case 0x3D:  if (CmdDef_3D == "") EvtFilter = 0x3D;  break;
      case 0x3E:  if (CmdDef_3E == "") EvtFilter = 0x3E;  break;
      case 0x3F:  if (CmdDef_3F == "") EvtFilter = 0x3F;  break;
      case 0x40:  if (CmdDef_40 == "") EvtFilter = 0x40;  break;
      case 0x41:  if (CmdDef_41 == "") EvtFilter = 0x41;  break;
      case 0x42:  if (CmdDef_42 == "") EvtFilter = 0x42;  break;
      case 0x43:  if (CmdDef_43 == "") EvtFilter = 0x43;  break;
      case 0x44:  if (CmdDef_44 == "") EvtFilter = 0x44;  break;
      case 0x45:  if (CmdDef_45 == "") EvtFilter = 0x45;  break;
      case 0x46:  if (CmdDef_46 == "") EvtFilter = 0x46;  break;
      case 0x47:  if (CmdDef_47 == "") EvtFilter = 0x47;  break;
      case 0x48:  if (CmdDef_48 == "") EvtFilter = 0x48;  break;
      case 0x49:  if (CmdDef_49 == "") EvtFilter = 0x49;  break;
      case 0x4A:  if (CmdDef_4A == "") EvtFilter = 0x4A;  break;
      case 0x4B:  if (CmdDef_4B == "") EvtFilter = 0x4B;  break;
      case 0x4C:  if (CmdDef_4C == "") EvtFilter = 0x4C;  break;
      case 0x4D:  if (CmdDef_4D == "") EvtFilter = 0x4D;  break;
      case 0x4E:  if (CmdDef_4E == "") EvtFilter = 0x4E;  break;
      case 0x4F:  if (CmdDef_4F == "") EvtFilter = 0x4F;  break;
    }
  
  if (i == FTell())
  {
    for(i = 0; i < OpLen - 4; i++)
      ubyte Params <format=hex>;
  }
  else
  {
    if (FTell() - i != OpLen - 4)
    {
      SPrintf(s, "%X", Cmd);    
      if (EvtShowErrors) Errors.Description += s + "\r\n";
      if (EvtFilter == 0) EvtFilter = Cmd; // Show in Whole Description
    }
    FSeek(i);
    ubyte Params[OpLen - 4];
  }

  for(i = 0; i < OpLen - 4; i++)
  {
    SPrintf(s, " %1.2X", Params[i]);
    DescCmd += s;
  }
  s = EnumToString(Cmd);
  if (s == "")
    s = " ??? ";
  if (s != "")
    DescCmd += "  // (" + s + ")";
  Description += DescCmd;

  i = Cmd;
  if (EvtGenerateWholeDescription && (EvtFilter < 0 || EvtFilter == Cmd || EnumToString(Cmd) == ""))
  {
    if (Evt != evt_LastEvt && evt_LastEvt != 0)
      WholeFile.Description += "\r\n";
    WholeFile.Description += DescStart + (char)9 + DescCmd + "\r\n";
    
    evt_LastEvt = Evt;
  }
  }
} TEvtCommand <read=ReadTEvtCommand, write=WriteTEvtCommand, optimize=false>;

string ReadTEvtCommand(TEvtCommand &a)
{
  if (evt_changed)
    return "Press F5";
  else
    return a.Description;
}

void WriteTEvtCommand(TEvtCommand &a, string str)
{
  if (evt_changed) return;
  if (str == " " || str == "")
  {
    evt_changed = true;
    int i = a.OpLen + 1;
    DeleteBytes(startof(a), i);
    if (EvtOnSizeChangedSet) EvtOnSizeChanged(-i, startof(a));
    return;
  }
  if (str == "-")
  {
    evt_changed = true;
    int i = a.OpLen + 1;
    ushort evt = a.Evt;
    ubyte seq = a.Seq;
    int p = startof(a);
    DeleteBytes(p, i);
    if (EvtOnSizeChangedSet) EvtOnSizeChanged(-i, startof(a));
    int len;
    while((len = ReadUByte(p)) + p + 1 <= FileSize()) {
      if(ReadUShort(p + 1) != evt || ReadUByte(p + 3) != ++seq)  break;
      WriteUByte(p + 3, seq - 1);
      p += len + 1;
    }
    return;
  }
  
  if (str == a.Description) return;
  a.Description = str;
  
  string s, s1;
  int i, j;
  
  i = Strchr(str, '+');
  j = Strchr(str, '*');
  if (j >= 0) i = j;
  if (i >= 0)
  {
    ushort evt = a.Evt;
    ubyte seq = a.Seq;
    int insert = startof(a);
    if (i == 0)
    {
      s = StrDel(str, 0, 1);
      insert += a.OpLen + 1;
      seq++;
    }
    else
    {
      s = SubStr(str, 0, i);
    }

    ubyte cmd = 0;
    string params = "";
    
    SScanf(s, "%X", cmd);
    switch (cmd)
    {
      case 0x00:  params = CmdDef_00;  break;
      case 0x01:  params = CmdDef_01;  break;
      case 0x02:  params = CmdDef_02;  break;
      case 0x03:  params = CmdDef_03;  break;
      case 0x04:  params = CmdDef_04;  break;
      case 0x05:  params = CmdDef_05;  break;
      case 0x06:  params = CmdDef_06;  break;
      case 0x07:  params = CmdDef_07;  break;
      case 0x08:  params = CmdDef_08;  break;
      case 0x09:  params = CmdDef_09;  break;
      case 0x0A:  params = CmdDef_0A;  break;
      case 0x0B:  params = CmdDef_0B;  break;
      case 0x0C:  params = CmdDef_0C;  break;
      case 0x0D:  params = CmdDef_0D;  break;
      case 0x0E:  params = CmdDef_0E;  break;
      case 0x0F:  params = CmdDef_0F;  break;
      case 0x10:  params = CmdDef_10;  break;
      case 0x11:  params = CmdDef_11;  break;
      case 0x12:  params = CmdDef_12;  break;
      case 0x13:  params = CmdDef_13;  break;
      case 0x14:  params = CmdDef_14;  break;
      case 0x15:  params = CmdDef_15;  break;
      case 0x16:  params = CmdDef_16;  break;
      case 0x17:  params = CmdDef_17;  break;
      case 0x18:  params = CmdDef_18;  break;
      case 0x19:  params = CmdDef_19;  break;
      case 0x1A:  params = CmdDef_1A;  break;
      case 0x1B:  params = CmdDef_1B;  break;
      case 0x1C:  params = CmdDef_1C;  break;
      case 0x1D:  params = CmdDef_1D;  break;
      case 0x1E:  params = CmdDef_1E;  break;
      case 0x1F:  params = CmdDef_1F;  break;
      case 0x20:  params = CmdDef_20;  break;
      case 0x21:  params = CmdDef_21;  break;
      case 0x22:  params = CmdDef_22;  break;
      case 0x23:  params = CmdDef_23;  break;
      case 0x24:  params = CmdDef_24;  break;
      case 0x25:  params = CmdDef_25;  break;
      case 0x26:  params = CmdDef_26;  break;
      case 0x27:  params = CmdDef_27;  break;
      case 0x28:  params = CmdDef_28;  break;
      case 0x29:  params = CmdDef_29;  break;
      case 0x2A:  params = CmdDef_2A;  break;
      case 0x2B:  params = CmdDef_2B;  break;
      case 0x2C:  params = CmdDef_2C;  break;
      case 0x2D:  params = CmdDef_2D;  break;
      case 0x2E:  params = CmdDef_2E;  break;
      case 0x2F:  params = CmdDef_2F;  break;
      case 0x30:  params = CmdDef_30;  break;
      case 0x31:  params = CmdDef_31;  break;
      case 0x32:  params = CmdDef_32;  break;
      case 0x33:  params = CmdDef_33;  break;
      case 0x34:  params = CmdDef_34;  break;
      case 0x35:  params = CmdDef_35;  break;
      case 0x36:  params = CmdDef_36;  break;
      case 0x37:  params = CmdDef_37;  break;
      case 0x38:  params = CmdDef_38;  break;
      case 0x39:  params = CmdDef_39;  break;
      case 0x3A:  params = CmdDef_3A;  break;
      case 0x3B:  params = CmdDef_3B;  break;
      case 0x3C:  params = CmdDef_3C;  break;
      case 0x3D:  params = CmdDef_3D;  break;
      case 0x3E:  params = CmdDef_3E;  break;
      case 0x3F:  params = CmdDef_3F;  break;
      case 0x40:  params = CmdDef_40;  break;
      case 0x41:  params = CmdDef_41;  break;
      case 0x42:  params = CmdDef_42;  break;
      case 0x43:  params = CmdDef_43;  break;
      case 0x44:  params = CmdDef_44;  break;
    }
    
    evt_changed = true;
    
    if (j >= 0) {
      int seq1 = seq;
      int p = insert;
      int len;
      while((len = ReadUByte(p)) + p + 1 <= FileSize()) {
        if(ReadUShort(p + 1) != evt || ReadUByte(p + 3) != seq1)  break;
        WriteUByte(p + 3, ++seq1);
        p += len + 1;
      }
    }
    
    int count = sizeof(params)/3;  
    InsertBytes(insert, 5 + count);
    WriteUByte(insert, 4 + count);
    WriteUShort(insert + 1, evt);
    WriteUByte(insert + 3, seq);
    WriteUByte(insert + 4, cmd);
    WriteParams(insert + 5, params);
    if (EvtOnSizeChangedSet) EvtOnSizeChanged(5 + count, insert);


    /*
    int count = 1;
    if (s != "")
      count = Atoi(s);
    
    if (count > 0)
      evt_changed = true;
      
    ushort evt = a.Evt;
    ubyte seq = a.Seq;
    InsertBytes(insert, 5*count);
    for (i = 0; i < count; i++)
    {
      WriteUByte(insert, 4);
      WriteUShort(insert + 1, evt);
      WriteUByte(insert + 3, seq);
      WriteUByte(insert + 4, 0);
      insert += 5;
    }
    */
  }
  else
  {
    SScanf(str, EvtLabelFormat, a.Evt, a.Seq);
    i = Strchr(str, ':') + 3;
    j = Strchr(str, '/') - 2;
    if (j < 0)
      j = sizeof(str);
    
    s = SubStr(str, i, j - i);
    
    uint oldLen = a.OpLen;
    uint newLen = 3 + sizeof(s)/3; // also null-byte is counted
    a.OpLen = newLen;

    local int pos = startof(a) + 4;
    if (oldLen != newLen)
    {
      evt_changed = true;
      if (oldLen != 4)
        DeleteBytes(pos, oldLen - 4);
      if (newLen != 4)
        InsertBytes(pos, newLen - 4);
      if (EvtOnSizeChangedSet) EvtOnSizeChanged(newLen - oldLen, startof(a));
    }
    
    WriteParams(pos, s);
  }
}

void WriteParams(int pos, string s)
{
  string s1;
  ubyte ch;
  int i;
  int len = sizeof(s)/3;
  for (i = 0; i < len; i++)
  {
    s1 = SubStr(s, i*3, 2);
    SScanf(s1, "%X", ch);
    WriteUByte(pos + i, ch);
  }
}
