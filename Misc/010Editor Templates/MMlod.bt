//--------------------------------------
//--- 010 Editor v2.0 Binary Template
//
// File:     MMlod.bt
// Author:   Sergey Rozhenko (GrayFace)
// Mail:     sergroj@mail.ru
// Revision: 1.0
// Purpose:  Parsing LOD files of Heroes 3 and MM6-8
//                            and savegames of MM6-8
//--------------------------------------
// Remarks:
//
// Unknown fields are called unk_(n).
// If you know what some of them mean, please mail me.
// In case of games.lod and new.lod this template uses
//  an unreliable technique to determine the way files
//  are stored. You should use file extension in your
//  programs instead. games.lod and new.lod themselfs
//  defer in the way files are stored.
// Set 'Value' of a file to any string to extract it.
// Bitmaps conversion isn't supported.
//
//--------------------------------------


//const int ColoredPalette = true; // will load very slow if set to true
const int ColoredPalette = false; 

const int HeaderColor = cLtGray;
const int FilesColor = cLtAqua;
const int DataPackedColor = 0xCCCCFF; //0xCCCCFF;
const int DataUnpackedColor = cLtPurple; //0xE0E0E0;
const int PaletteColor = 0xDDFFFF;

local string ExtractPath = "";

// -----------------------------------------------------------------------------
// Types & functions 
// -----------------------------------------------------------------------------

//  H3RGBTripple, H3Palette

typedef struct
{
  UBYTE   Red;
  UBYTE   Green;
  UBYTE   Blue;
  
} H3RGBTripple <read=ReadH3RGBTripple>;

string ReadH3RGBTripple( H3RGBTripple &a )
{
  string s;
  SPrintf( s, "#%02X%02X%02X   (R:%d  G:%d  B:%d)", a.Red, a.Green, a.Blue, a.Red, a.Green, a.Blue);
  return s;
}

int GetH3Color()
{
  return (ReadUByte(FTell()) + ReadUByte(FTell() + 1)*256 + ReadUByte(FTell() + 2)*0x10000);
}

typedef struct
{
  local int i;
  local byte h3colors[768];
  ReadBytes(h3colors, FTell(), 768);
  
  for (i = 0; i<256; i++)
  {
    SetForeColor(h3colors[i] + h3colors[i+1]*256 + h3colors[i+2]*0x10000);
    H3RGBTripple Palette;
  }
  SetForeColor(cNone);
  
} H3Palette <read=ReadH3Palette>;

string ReadH3Palette(H3Palette &a)
{
  return "[0..255]";
}

//------------------------------------------------------
//  THeader

typedef struct
{
  local int IsMM6 = false;
  local int IsMM8 = false;
  local int IsGames = false;
  char LodSignature[4];
  if (ReadUInt(FTell()) < 256*256)
  {
    int Version <read=ReadH3Version>;
    int FilesCount;
    ubyte unk_4[0x50];
    local int ArchiveStart = 0;
  }
  else
  {
    char Version[0x50];
    char Description[0x50];
    int unk_1;
    int unk_2;
    int unk_3;
    ubyte unk_4[0x50];
    char Type[16];
    int ArchiveStart <format=hex>;
    int ArchiveSize <format=hex>;
    int unk_5;
    int FilesCount;
    
    IsMM6 = true;
    IsMM8 = Version == "MMVIII";
    IsGames = Type == "maps" || Type == "chapter";
  }
  
} THeader <read=ReadTHeader>;

string ReadTHeader(THeader &a)
{
  if (a.IsMM6)
    return "(" + a.Version + ")";
  else
    return "(HOMMIII)";
}

string ReadH3Version(int a)
{
  string s;
  SPrintf(s, "HOMMIII (%d)", a);
  return s;
}

//------------------------------------------------------
//  TExtract

typedef struct
{
  local string Name = "";
  local int Size = 0;
  local int UnpackedSize = 0;
  local int Address = 0;

  local string Description = "";
  
} TExtract <read=ReadTExtract, write=WriteTExtract>;

string ReadTExtract(TExtract &a)
{
  return a.Description;
}

void WriteTExtract(TExtract &a, string str)
{
  if (str == a.Description) return;
  a.Description = str;
  
  //str = InputSaveFileName();
  //if (str == "") return;
  str = "C:\\_MM\\Extract\\" + a.Name;
  if (a.UnpackedSize != 0)
    str += ".zp";
  
  if (a.Size > 0)
  {
    uchar data[a.Size];
    ReadBytes(data, a.Address, a.Size);
  }
  
  int curFile = GetFileNum();
  int newFile = FileNew();
  //FileSelect(curFile);
  //FileSelect(newFile);
  if (a.UnpackedSize != 0)
  {
    WriteUInt(0, a.UnpackedSize);
    if (a.Size > 0)
      WriteBytes(data, 4, a.Size);
  }
  else
  {
    if (a.Size > 0)
      WriteBytes(data, 0, a.Size);
  }
  FileSave(str);
  FileClose();
  //FileSelect(curFile);
}

//------------------------------------------------------
//  TExtractAll

typedef struct
{
  local string Description;
  local int FilesCount = filesCount;
  
  TExtract Extract[filesCount] <optimize=false>;

} TExtractAll <write=WriteTExtractAll>;

void WriteTExtractAll(TExtractAll &a, string str)
{
  int i;
  int j = 0;
  int min = 0;
  int was = 0;
  for (i = 0; i < a.FilesCount; i++)
    if (Strstr(a.Extract[i].Name, str) >= 0)
    {
      if (j++ < min) continue;
      
      if (was == 0)
      {
        was = Strstr(a.Extract[i].Name, "MDT02") == 0;
        continue;
      }
      
      WriteTExtract(a.Extract[i], "Extracted");
      //SetSelection(i % 2, 0);
    }
}

//------------------------------------------------------
//  TChangePalType

local int HasMonPalPtr = 0;
local int MonPalShift = 0; // MonPal mod 4

typedef struct
{
  local int FilesCount = filesCount;
  local int MonPalPtr[filesCount];
  
} TChangePalType <read=ReadTChangePalType, write=WriteTChangePalType>;

string ReadTChangePalType(TChangePalType &a)
{
  string text;
  SPrintf(text, "%d", (ReadUInt(HasMonPalPtr) - MonPalShift) % 4);
  return text;
}

void WriteTChangePalType(TChangePalType &a, string str)
{
  int i;
  uint k;
  uint j = Atoi(str) % 4 + MonPalShift;
  for (i = 0; i < a.FilesCount; i++)
    if (a.MonPalPtr[i])
    {
      //MessageBox(idOk, "", "%d", a.MonPalPtr[i]);
      k = ReadUInt(a.MonPalPtr[i]) - MonPalShift;
      k = k - k % 4 + j;
      WriteUInt(a.MonPalPtr[i], k);
    }
}

//------------------------------------------------------
//  Packed/Unpacked Data

const string SPacked = "(packed with ZLib)";
const string SUnpacked = "(not packed)";
const string SDataPacked = "(packed with ZLib)";
const string SDataUnpacked = "(not packed)";


string ReadPackedData(ubyte a)
{
  return SPacked;
}

string ReadUnpackedData(ubyte a)
{
  return SUnpacked;
}

string ReadDataEnd(ubyte a)
{
  return "(end)";
}

//------------------------------------------------------
//  TBmpLine

typedef struct
{
  short From;
  short To;
  int BufferPos;
  
} TBmpLine <read=ReadTBmpLine>;

string ReadTBmpLine(TBmpLine &a)
{
  string s;
  int i = a.From;
  int j = a.To;
  SPrintf(s, "[%d  %d] at %d", i, j, a.BufferPos);
  return s;
}

//------------------------------------------------------
//  TFileData

typedef struct
{
  local string TypeDescription;
  local int hasPal = 0;
  local int MonPalPtr = 0;

  if (!Header.IsMM6) // Heroes 3
  {
    if (PackedSize == 0)
    {
      local int DataSize = Size;
      local int UnpackedSize = 0;
      TypeDescription = SDataUnpacked;
    }
    else
    {
      local int DataSize = PackedSize;
      local int UnpackedSize = Size;
      TypeDescription = SDataPacked;
    }
  }
  else
  {
    if (Header.IsGames) // games.lod, new.lod
    {
      TypeDescription = "(data)";
      
      local int needSize = 0;
      if (Header.Type == "maps")
        needSize = 1;
      
      local int temp = ReadUInt(FTell());
      if ( (Size >= 18 && temp == 91969) && (ReadUInt(FTell() + 4) == 1768519277)
          && (ReadUInt(FTell() + 8) == Size - 16 || ReadUInt(FTell() + 8) == Size) 
          && (ReadUShort(FTell() + 16) == 0x9C78) )
      {
        needSize = ReadUInt(FTell() + 8) != Size;
        temp = 16;
        int Signature_1 <format=hex>;
        char Signature_2[4];
      }
      else
        if (Size >= 10 && temp == Size - needSize*8 && ReadUShort(FTell() + 8) == 0x9C78)
          temp = 8;
        else
          temp = -1;
      
      if (temp > 0)
      {
        if (needSize)
        {
          int DataSize;
        }
        else
        {
          int Size;
          local int DataSize = Size - temp;
        }
        int UnpackedSize;

        if (UnpackedSize == 0)
          TypeDescription = SDataUnpacked;
        else
          TypeDescription = SDataPacked;
      }
      else
      {
        local int UnpackedSize = 0;
        local int DataSize = Size;
        TypeDescription = SUnpacked;
      }
    }
    else
    {
      if (Header.IsMM8)
        char Name[0x40];
      //else
      //  char Name[0x10];

      local int temp = ReadShort(FTell() + 16 + 8);
      if (Header.IsMM8 || ReadInt(FTell() + 16) == temp*ReadShort(FTell() + 16 + 10)) // Normal file
      {
        if (!Header.IsMM8)
          char Name[0x10];
        int BmpSize;
          // Equals BmpWidth*BmpHeight.
          // In bitmaps.lod this doesn't equal the size of unpacked data.
          // Along with the original bitmap, 2, 4 and 8 times smaller versions are stored in the data.
        int DataSize;
        short BmpWidth;
        short BmpHeight;
        short unk_3;
        short unk_4;
        short unk_5; // BmpWidth - 1 in bitmaps.lod
        short unk_6; // BmpHeight - 1 in bitmaps.lod
        int PalId;
        int UnpackedSize; // 0 if not packed
        int Bits; // Usually 256 for ordinary types and 512 for bmp
        
        hasPal = Size - DataSize + startof(Name) - FTell() >= 768;
        
        if (hasPal)
        {
          local int size = UnpackedSize;
          if (size == 0)
            size = DataSize;
            
          if (size > BmpSize)
            TypeDescription = "(bitmap %dx%d, 4 zoom levels)";
          else
            TypeDescription = "(bitmap %dx%d)";
          SPrintf(TypeDescription, TypeDescription, BmpWidth, BmpHeight);
        }
        else
          if (UnpackedSize == 0)
            TypeDescription = SDataUnpacked;
          else
            TypeDescription = SDataPacked;
        
      }
      else // Bitmap from Sprites.lod
      {
        char Name[12];
        int DataSize;
        short Width; // = UnpackedSize for bmp2
        short Height;
        short Palette; 
          // Palettes are stored in bitmaps.lod under names "pal*".
          // Palettes for upgrades are (Palette + 1) and (Palette + 2) in MM6.
          // In MM7 & MM8 the Palette is the palette used for editing and (Palette + 1)..(Palette + 3) are the monster levels
        short unk_1; 
        short yskip;
        short unk_2; // 1 for monsters and map objects. -1 for dropped items.
        int UnpackedSize;
        
        TBmpLine Lines[Height]; // Maps ranges of bitmap pixels to buffer positions. Other pixels are filled with 0.
        
        SPrintf(TypeDescription, "(sprite %dx%d, palette %d)", Width, Height, Palette);
        if (Name[0] == 'm' || Name[0] == 'M')
        {
          MonPalPtr = HasMonPalPtr = startof(Palette);
          if (Strstr(Name, "150") == 1)
            MonPalShift = 2; // MM7
        }
      }
    }
  }

  if (UnpackedSize != 0)
    SetBackColor(DataPackedColor);
  else
    SetBackColor(DataUnpackedColor);

  local int DataAddress = FTell();
  
  if (DataSize != 0)
  {
    ubyte Data[DataSize];
  }
  
  if (hasPal)
  {
    SetBackColor(PaletteColor);
    if (ColoredPalette)
      H3Palette Palette;
    else
      H3RGBTripple Palette[256];
  }
  
} TFileData <read=ReadTFileData, optimize=false>;

string ReadTFileData(TFileData &a)
{
  return a.TypeDescription;
}

//------------------------------------------------------
//  TFile

typedef struct
{
  SetBackColor(FilesColor);

  if (Header.IsMM8)
  {
    char Name[0x40]; // Here may be something useful too...
    int Address <format=hex>;
    int Size <format=hex>;
    int unused;
  }
  else
  {
    char Name[0x10];
    int Address <format=hex>;
    int Size <format=hex>;
    if (Header.IsMM6)
    {
      int unk_1 <format=hex>;
      int unk_2 <format=hex>;
    }
    else
    {
      int Type <format=hex>; // Used in Heroes 3 only
      int PackedSize <format=hex>;
    }
  }

  local int pos = FTell();
  
  FSeek(Address + Header.ArchiveStart);
  TExtract Extract;
  TFileData FileData;
  Extract.Name = Name;
  Extract.Size = FileData.DataSize;
  Extract.UnpackedSize = FileData.UnpackedSize;
  Extract.Address = FileData.DataAddress;
  	  
  FSeek(pos);
  SetBackColor(FilesColor);
  
} TFile <read=ReadTFile, write=WriteTFile, optimize=false>;

string ReadTFile(TFile &a) // !!! temp
{
  string s;
  s = a.Name;
  /*
  if (exists(a.FileData.BmpSize) && a.FileData.BmpSize != 0)
  {
    local int i = a.FileData.BmpSize;
    local int j = a.FileData.UnpackedSize;
    local int k = 0;
    while (j >= i)
    {
      j -= i;
      i /= 4;
      k++;
    }
    SPrintf(s, "%s (%d images)", s, k);
  }
  */
  return s;
}

void WriteTFile(TFile &a, string str)
{
  string s = str;
  WriteTExtract(a.Extract, s);
}

//------------------------------------------------------
//  TFiles

typedef struct {
  local int Count = filesCount;
  TFile Files[Count] <optimize=false>;
  
} TFiles <read=ReadTFiles>;

string ReadTFiles(TFiles &a)
{
  string s;
  SPrintf(s, "[%d]", a.Count);
  return s;
}

// -----------------------------------------------------------------------------
// File 
// -----------------------------------------------------------------------------

LittleEndian();
BitfieldEnablePadding();

SetBackColor(HeaderColor);

THeader Header;

local int filesCount = Header.FilesCount;

if (Header.IsMM6)
  FSeek(Header.ArchiveStart);

SetBackColor(FilesColor);
TFiles Files;

TExtractAll ExtractAll;
local int i;
for (i = 0; i < filesCount; i++)
{
  ExtractAll.Extract[i].Name = Files.Files[i].Extract.Name;
  ExtractAll.Extract[i].Size = Files.Files[i].Extract.Size;
  ExtractAll.Extract[i].UnpackedSize = Files.Files[i].Extract.UnpackedSize;
  ExtractAll.Extract[i].Address = Files.Files[i].Extract.Address;
}

if (HasMonPalPtr)
{
  TChangePalType PalType;
  for (i = 0; i < filesCount; i++)
  {
    PalType.MonPalPtr[i] = Files.Files[i].FileData.MonPalPtr;
  }
}