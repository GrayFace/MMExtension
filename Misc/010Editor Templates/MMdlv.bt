local int mm, mm7, mm8;

// -----------------------------------------------------------------------------
// Types & functions 
// -----------------------------------------------------------------------------

//  THeader

typedef struct
{
	int LevelNumber;
	char Name[60];
	char unk_1[40];
	int FacetsSize;
	int RoomDataSize;
	int RoomLightDataSize;
	int DoorDataSize;
	int Palette[4]; // unknown
	
} THeader;

//------------------------------------------------------
//  TMonster

typedef struct
{
	local int pos = FTell();
	char Name[32];
	
	if (mm == 6)
		FSeek(pos + 0x224);
	else if (mm == 7)
		FSeek(pos + 0x344);
	else
		FSeek(pos + 0x3CC);
	
} TMonster;

//------------------------------------------------------
//  TObject

typedef struct
{
	local int pos = FTell();
	
	
	FSeek(pos + (mm7 ? 0x70 : 0x64));
		
} TObject;

//------------------------------------------------------
//  TItem

typedef struct
{
	int Number;
	byte unk[mm7 ? 0x20 : 0x18];
		
} TItem;

//------------------------------------------------------
//  TChest

typedef struct
{
	short Picture;
	short Flags;
	TItem Items[140];
	short Inventory[140];
		
} TChest;

//------------------------------------------------------
//  TDoor

typedef struct
{
	byte unk[0x50];
		
} TDoor;

// -----------------------------------------------------------------------------
// File 
// -----------------------------------------------------------------------------

LittleEndian();
BitfieldEnablePadding();

local int FacesCount;
local int SpritesCount;
local int DoorDataSize;

local int ClipIndex = GetClipboardIndex();
SetClipboardIndex(3);
local string clip = GetClipboardString();
SScanf(clip, "%d %d %d %d", mm, FacesCount, SpritesCount, DoorDataSize);
SetClipboardIndex(ClipIndex);
mm7 = (mm > 6);
mm8 = (mm > 7);

char Header[mm7 ? 40 : 8];
char VisibleOutlines[875];
if (mm7)
	uint FacetBits[FacesCount] <format=hex>;
if (mm7)
	ushort SpriteBits[SpritesCount] <format=hex>;
int MonstersCount;
TMonster Monsters[MonstersCount];
int ObjectsCount;
TObject Objects[ObjectsCount];
int ChestsCount;
TChest Chests[ChestsCount];

TDoor Doors[200];
byte DoorData[DoorDataSize];

byte MapVariables[200];
int64 LastVisitTime;
char SkyBitmap[12];
int DayBits <format=hex>;
int FogRange1, FogRange2;
if (mm8) {
	int Bits <format=hex>;
	int Ceiling;
	int unused[4];
} else {
	int unused[6];
}
// ...
