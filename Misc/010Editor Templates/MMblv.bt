
local int mm7 = (mm > 6);
local int mm8 = (mm > 7);



// -----------------------------------------------------------------------------
// Types & functions 
// -----------------------------------------------------------------------------

//  THeader

typedef struct
{
	int LevelNumber;
	char Name[60];
	char unk_1[40];
	int FacetsSize;
	int RoomDataSize;
	int RoomLightDataSize;
	int DoorDataSize;
	int Palette[4]; // unknown
	
} THeader;

//------------------------------------------------------
//  TVertex

typedef struct
{
	short X;
	short Y;
	short Z;
	
} TVertex;

//------------------------------------------------------
//  TBox

typedef struct
{
	short minX;
	short maxX;
	short minY;
	short maxY;
	short minZ;
	short maxZ;
	
} TBox;


//------------------------------------------------------
//  TComment

typedef struct
{
	local string Description = "";
	
} TComment <read=ReadTComment>;

string ReadTComment(TComment &a)
{
	return a.Description;
}

void WriteTComment(TComment &a, string str)
{
	a.Description = str;
}

//------------------------------------------------------
//  For TFace

enum <byte> TFaceType
{
	Wall = 1,
	Floor = 3,
	FloorWall = 4,
	Ceil = 5,
	CeilWall = 6
};

//------------------------------------------------------
//  TFace

local int pos;
local int TotalFaceVertCount = 0;

typedef struct
{
	if (mm7)
	{
		float NormalXf;
		float NormalYf;
		float NormalZf;
		float NormalDistf; // distance from (0,0,0)
	}
	
	 // 10
	int NormalX;
	int NormalY;
	int NormalZ;
	int NormalDist;
	
	 // 20
	int ZCalc1; // unknown
	int ZCalk2;
	int ZCalk3;
	local uint off = FTell();
	uint IsPortal : 1;  // 1
	if(mm7){
		uint IsSecret : 1;
		uint ScrollDown : 1;
		uint AlignTop : 1;
	} else {
		uint : 3;
	}
	uint IsWater : 1;  // 10
	if(mm7){
		uint ScrollUp : 1;
		uint ScrollLeft : 1;
		uint : 4;
		uint ScrollRight : 1;
		uint AlignLeft : 1;
	} else {
		uint : 8;
	}
	uint Invisible : 1;  // 2000
	uint AnimatedTFT : 1;
	if(mm7){
		uint AlignRight : 1;
		uint : 1;
		uint AlignBottom : 1;
	} else {
		uint : 3;
	}
	uint MoveByDoor : 1;
	uint TriggerByTouch : 1;
	uint IsEventJustHint : 1;
	uint AlternativeSound : 1;
	uint IsSky : 1;
	uint FlipU : 1;
	uint FlipV : 1;
	uint TriggerByClick : 1;
	uint TriggerByStep : 1;
	if(mm8){
		uint TriggerByMonster : 1;
		uint TriggerByObject : 1;
	} else {
		uint DisableEventByCtrlClick : 1;
		uint EventDisabledByCtrlClick : 1;
	}
	uint Untouchable : 1;
	uint IsLava : 1;
	uint HasData : 1;
	FSeek(off);
	uint Flags <format=hex>;
	
	 // 30
	int unneeded[6];
	short DataIndex;
	short Bitmap; // unknown
	short Room;
	short RoomBehind;
	TBox BoundingBox;
	TFaceType Type;
	byte VertexesCount;
	short unk_1;

	TotalFaceVertCount += VertexesCount + 1;
	pos = FTell();

	FSeek(FaceVertexPos);
	short Vertexes[VertexesCount + 1];
	short XInterceptDisplacement[VertexesCount + 1];
	short YInterceptDisplacement[VertexesCount + 1];
	short ZInterceptDisplacement[VertexesCount + 1];
	short U[VertexesCount + 1];
	short V[VertexesCount + 1];
	FaceVertexPos = FTell();
	
	/*
	FSeek(FaceTexturePos);
	char Texture[10];
	FaceTexturePos = FTell();
	*/
	
	FSeek(pos);

} TFace <optimize=false>;

if (mm7)
	local int FaceSize = 60h;
else
	local int FaceSize = 50h;

//------------------------------------------------------
//  TFaces

typedef struct
{
	local int count = ReadInt(FTell() - 4);
	TFace Faces[count];
	
} TFaces;


//------------------------------------------------------
//  TFaceTexture

typedef struct
{
	char Name[10];
} TFaceTexture;

//------------------------------------------------------
//  TFaceData

typedef struct
{
	int unk_1;
	int unk_2;
	int unk_3;
	short FacetIndex;
	short BitmapIndex;
	short TFTIndex;
	short unk_4;
	short BitmapU;
	short BitmapV;
	short Id;
	short Event;
	short unk_5;
	short unk_6;
	short unk_7;
	short unk_8;
} TFaceData;

//------------------------------------------------------
//  TRoom

typedef struct
{
	char unk[0x74 + 4*mm8];
} TRoom;

//------------------------------------------------------
//  TSprite

typedef struct
{
	char unk[0x1C + 4*mm7];
} TSprite;

//------------------------------------------------------
//  TSpriteName

typedef struct
{
	char s[32];
} TSpriteName;

//------------------------------------------------------
//  TLight

typedef struct
{
	char unk[(mm-3)*4];
} TLight;

//------------------------------------------------------
//  TBSPNode

typedef struct
{
	char unk[8];
} TBSPNode;

//------------------------------------------------------
//  TSpawnPoint

typedef struct
{
	int X, Y, Z;
	short Radius, Kind, Index;
	short Bits <format=hex>;
	if(mm7) int Group;
} TSpawnPoint;

//------------------------------------------------------
//  TMapOutline

typedef struct
{
	char unk[12];
} TMapOutline;

// -----------------------------------------------------------------------------
// File 
// -----------------------------------------------------------------------------

LittleEndian();
BitfieldEnablePadding();


THeader Header;
int VertexesCount;
TVertex Vertexes[VertexesCount];
int FacesCount;

local int FaceVertexPos = FTell() + FacesCount*FaceSize;

TFaces Faces;
FSeek(FTell() + TotalFaceVertCount*12);
TFaceTexture FaceTextures[FacesCount];

int FaceDataCount;
TFaceData FaceData[FaceDataCount];
char FaceDataUnused[FaceDataCount*10];

int RoomsCount;
TRoom Rooms[RoomsCount];
char RoomData[Header.RoomDataSize];
char RoomLightData[Header.RoomLightDataSize];

int DoorsCount;

int SpritesCount;
TSprite Sprites[SpritesCount];
TSpriteName SpritesNames[SpritesCount];

int LightsCount;
TLight Lights[LightsCount];

int BSPNodesCount;
TBSPNode BSPNodes[BSPNodesCount];

int SpawnsCount;
TSpawnPoint Spawns[SpawnsCount];

int OutlinesCount;
TMapOutline Outlines[OutlinesCount];

local int ClipIndex = GetClipboardIndex();
SetClipboardIndex(3);
local string clip;
SPrintf(clip, "%d %d %d %d", mm, FacesCount, SpritesCount, Header.DoorDataSize);
CopyStringToClipboard(clip);
SetClipboardIndex(ClipIndex);
