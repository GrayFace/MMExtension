//--------------------------------------
//--- 010 Editor v2.0 Binary Template
//
// File:     MMvid.bt
// Author:   Sergey Rozhenko (GrayFace)
// Mail:     sergroj@mail.ru
// Revision: 1.0
// Purpose:  Parsing VID files of Heroes 3 and MM6-8
//                            and savegames of MM6-8
//--------------------------------------

const int HeaderColor = cLtGray;
const int FilesColor = cLtAqua;
const int DataUnpackedColor = cLtPurple; //0xE0E0E0;

// -----------------------------------------------------------------------------
// Types & functions 
// -----------------------------------------------------------------------------

//  Sizes

local uint i;

uint GetSmkSize()
{
  local uint size = 0x68;
  size += ReadUInt(FTell() + 0x34);
  local uint count = ReadUInt(FTell() + 0xC);
  size += count*5;
//  local uint i;
  for(i = 0; i < count; i++)
    size += ReadUInt(FTell() + 0x68 + i*4);
  return size;
}


uint GetBinkSize()
{
  return ReadUInt(FTell() + 4) + 8;
}


uint GetUnknownSize()
{
  local uint min = FTell();
  local uint max = FileSize();
  local int cur;
  for (i = 0; i < FilesCount; i++)
  {
    cur = ReadUInt(0x2C + i*0x2C);
    if (cur > min && cur < max)
      max = cur;
  }
  
  return (max - min);
}

//------------------------------------------------------
//  TFile

typedef struct
{
  SetBackColor(FilesColor);

  char Name[0x28];
  int Address <format=hex>;
  
  local int pos = FTell();
  
  FSeek(Address);
  
  SetBackColor(DataUnpackedColor);
  
  local int signature_int = ReadUInt(FTell()) & 0xFFFFFF;
  switch (signature_int)
  {
    case 4934995:
      ubyte Data[GetSmkSize()];
      ubyte OtherData[GetUnknownSize()];
      break;
    case 4933954:
      ubyte Data[GetBinkSize()];
      break;
    default:
      ubyte Data[GetUnknownSize()];
      break;
  }  
  
  FSeek(pos);
  SetBackColor(FilesColor);
  
} TFile <read=ReadTFile, optimize=false>;

string ReadTFile(TFile &a)
{
  string s;
  s = a.Name;
  return s;
}

//------------------------------------------------------
//  TFiles

typedef struct {
  local int Count = FilesCount;
  TFile Files[Count] <optimize=false>;
  
} TFiles <read=ReadTFiles>;

string ReadTFiles(TFiles &a)
{
  string s;
  SPrintf(s, "[%d]", a.Count);
  return s;
}

// -----------------------------------------------------------------------------
// File 
// -----------------------------------------------------------------------------

LittleEndian();
BitfieldEnablePadding();

SetBackColor(HeaderColor);

int FilesCount;

SetBackColor(FilesColor);

TFile Files[FilesCount] <optimize=false>;
//TFiles Files;
