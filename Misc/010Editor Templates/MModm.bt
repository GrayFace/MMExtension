
local int mm7 = (mm > 6);
local int mm8 = (mm > 7);
local int FaceTexturePos;



// -----------------------------------------------------------------------------
// Types & functions 
// -----------------------------------------------------------------------------

//  TTileset

typedef struct
{
	short Group;
	short Offset;
	
} TTileset;

//------------------------------------------------------
//  THeader

typedef struct
{
	char Name[32];
	char FileName[32];
	char VersionStr[31];
	byte TilesetsFile;
	char unused[32];
	char unused2[32];
	TTileset Tilesets[4];
	if (mm8)
		int Bits;
	
} THeader;

//------------------------------------------------------
//  TVertex

typedef struct
{
	int X;
	int Y;
	int Z;
	
} TOdmVertex;

//------------------------------------------------------
//  TBox

typedef struct
{
	short minX;
	short maxX;
	short minY;
	short maxY;
	short minZ;
	short maxZ;
	
} TBox;


//------------------------------------------------------
//  TComment

typedef struct
{
	local string Description = "";
	
} TComment <read=ReadTComment>;

string ReadTComment(TComment &a)
{
	return a.Description;
}

void WriteTComment(TComment &a, string str)
{
	a.Description = str;
}

//------------------------------------------------------
//  For TFace

enum <byte> TFaceType
{
	Wall = 1,
	Floor = 3,
	FloorWall = 4,
	Ceil = 5,
	CeilWall = 6
};

//------------------------------------------------------
//  TFace

local int fpos;
local int TotalFaceVertCount = 0;

typedef struct
{
	fpos = FTell();

	FSeek(FaceTexturePos);
	char Texture[10];
	FaceTexturePos = FTell();
	
	FSeek(fpos);
	
	 // 00
	int NormalX;
	int NormalY;
	int NormalZ;
	int NormalDist;
	
	 // 10
	int ZCalc1; // unknown
	int ZCalk2;
	int ZCalk3;
	local uint off = FTell();
	uint IsPortal : 1;  // 1
	if(mm7){
		uint IsSecret : 1;
		uint ScrollDown : 1;
		uint AlignTop : 1;
	} else {
		uint : 3;
	}
	uint IsWater : 1;  // 10
	if(mm7){
		uint ScrollUp : 1;
		uint ScrollLeft : 1;
		uint : 4;
		uint ScrollRight : 1;
		uint AlignLeft : 1;
	} else {
		uint : 8;
	}
	uint Invisible : 1;  // 2000
	uint AnimatedTFT : 1;
	if(mm7){
		uint AlignRight : 1;
		uint : 1;
		uint AlignBottom : 1;
	} else {
		uint : 3;
	}
	uint MoveByDoor : 1;
	uint TriggerByTouch : 1;
	uint IsEventJustHint : 1;
	uint AlternativeSound : 1;
	uint IsSky : 1;
	uint FlipU : 1;
	uint FlipV : 1;
	uint TriggerByClick : 1;
	uint TriggerByStep : 1;
	if(mm8){
		uint TriggerByMonster : 1;
		uint TriggerByObject : 1;
	} else {
		uint DisableEventByCtrlClick : 1;
		uint EventDisabledByCtrlClick : 1;
	}
	uint Untouchable : 1;
	uint IsLava : 1;
	uint HasData : 1;
	FSeek(off);
	uint Flags <format=hex>;
	
	 // 20
	short VertexIds[20];
	short UList[20];
	short VList[20];
	short XInterceptDisplacement[20];
	short YInterceptDisplacement[20];
	short ZInterceptDisplacement[20];
	short BitmapId;
	short BitmapU;
	short BitmapV;
	TBox BoundingBox;
	short Id;
	short Event;
	short _u1;
	short _u2;
	byte GradientVertexes[4];
	byte VertexCount;
	TFaceType Type;
	int _u3;

} TFace <optimize=false>;

local int FaceSize = 0x134;

//------------------------------------------------------
//  TModel

local int mpos;
local int FacesCount;

typedef struct
{
	char Name[32];
	char Name2[32];
	int Flags;
	int VertexCount;
	int _VertexRef;
	int FaceCount;
	FacesCount += FaceCount;
	short ConvexFacetsCount;
	short _u2;
	int _FacesRef;
	int _OrderingRef;
	int _BSPNodesCount;
	int _BSPNodesRef;
	int _u3;
	int GridX;
	int GridY;
	int X;
	int Y;
	int Z;
	int MinX;
	int MinY;
	int MinZ;
	int MaxX;
	int MaxY;
	int MaxZ;
	int BFBounds[6];
	int BoxCenterX;
	int BoxCenterY;
	int BoxCenterZ;
	int BoundingRadius;

	mpos = FTell();

	FSeek(ModelDataPos);
	TOdmVertex Vertexes[VertexCount];
	FaceTexturePos = FTell() + (FaceSize + 2)*FaceCount;
	TFace Faces[FaceCount];
	short FaceUnk[FaceCount];
	FSeek(FaceTexturePos);
	short _BSPNodes[_BSPNodesCount*4];
	ModelDataPos = FTell();
	
	FSeek(mpos);
	
} TModel <optimize=false>;

local int ModelSize = 0xBC;

//------------------------------------------------------
//  TModels

typedef struct
{
	local int count = ReadInt(FTell() - 4);
	TModel Models[count];
	
} TModels;


//------------------------------------------------------
//  TSprite

typedef struct
{
	char unk[0x1C + 4*mm7];
} TSprite;

//------------------------------------------------------
//  TSpriteName

typedef struct
{
	char s[32];
} TSpriteName;

//------------------------------------------------------
//  TLight

typedef struct
{
	char unk[(mm-3)*4];
} TLight;

//------------------------------------------------------
//  TBSPNode

typedef struct
{
	char unk[8];
} TBSPNode;

//------------------------------------------------------
//  TSpawnPoint

typedef struct
{
	int X, Y, Z;
	short Radius, Kind, Index, Bits;
	if(mm7) int Group;
} TSpawnPoint;

//------------------------------------------------------
//  TMapOutline

typedef struct
{
	char unk[12];
} TMapOutline;

// -----------------------------------------------------------------------------
// File 
// -----------------------------------------------------------------------------

LittleEndian();
BitfieldEnablePadding();


THeader Header;
byte HeightMap[0x4000];
byte TileMap[0x4000];
byte ZeroMap[0x4000];
if (mm7) {
	int TerNormCount;
	byte CMAP1[0x20000];
	byte CMAP2[0x10000];
	TOdmVertex TerNorm[TerNormCount];
}
int ModelsCount;
local int ModelDataPos = FTell() + ModelsCount*ModelSize;
TModels Models;
FSeek(ModelDataPos);

int SpritesCount;
TSprite Sprites[SpritesCount];
TSpriteName SpritesNames[SpritesCount];

int IDListCount;
short IDList[IDListCount];

byte OMAP[0x10000];

int SpawnsCount;
TSpawnPoint Spawns[SpawnsCount];

local int ClipIndex = GetClipboardIndex();
SetClipboardIndex(3);
local string clip;
SPrintf(clip, "%d %d %d", mm, FacesCount, SpritesCount);
CopyStringToClipboard(clip);
SetClipboardIndex(ClipIndex);
