<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>MMExtension v2.2 Help</title>

<style type="text/css">
.def-table { margin:6px 0;border:1px solid #a5a5a5;border-collapse:collapse;width:100%; }
.def-caption { padding:4px 7px 7px; border:1px solid #a5a5a5; }
.def-left { width:350px;padding:4px 6px 5px; border:1px solid #a5a5a5;overflow-x:auto; }
.def-right { padding:4px 6px 5px; border:1px solid #a5a5a5;overflow-x:auto; }
.def-functions { padding:4px 7px 7px; border:1px solid #a5a5a5; }
.def-ver { color:rgb(153,0,0); }
.def-nbsp { white-space:pre-wrap; }
.def-const { position:relative;float:right;right:2px;display:inline-block; }
.def-h4 { display:inline; }
.def-h5 { display:inline; font-weight: inherit; font-size: inherit; }
.def-shadow { color:#a5a5a5; }
.def-codeblock { white-space:pre-wrap; font-family: monospace,monospace; font-size: 85%; margin: 0.7em 0 -0.8em 0.8em; }
.def-code { white-space:pre-wrap; font-family: monospace,monospace; font-size: 85%; }
.def-param { color:#079; }
.def-ib { font-weight: bold; }
.def-default { }
.def-hidden { display: none; }
.pre-outer { margin:7px -1px; overflow-x: auto; }
.pre { margin:0;border:1px solid #a5a5a5;padding:5px 7px 7px; white-space:pre-wrap; font-family: monospace,monospace; font-size: 85%; display:inline-block; }
.spoiler { margin:7px -1px; overflow-x: auto; border:1px solid #a5a5a5; }
.pre-spoiler { margin:0;padding:5px 7px 7px; white-space:pre-wrap; font-family: monospace,monospace; font-size: 85%; }
.abs { position:absolute;top:0; }
.spoiler-checkbox { display: none; }
.spoiler-label { display: none; }
.spoiler-fade { display: none; }
.width-500 { margin:6px 0; border: 1px solid #888; border-collapse:collapse;min-width:70%;width:500px; }
.table { margin:6px 0; border: 1px solid #888; border-collapse:collapse; }
</style>
<style type="text/css">
	td {
		padding: 5px 6px;
		position: relative;
	}
	ul {
		list-style-type: none;
		margin-top: 0px;
		margin-bottom: 7px;
		padding-left: 20px;
		text-indent: -10px;
	}
	ul a {
		text-decoration: none;
	}
	ul a:link {
		color: black;
	}
	a:link:hover, a:visited:hover {
		background-color: #E8E8FF;
		border-radius: 4px;
	}
	a:link:active, a:visited:active {
		color: #d00;
	}
	
	body {
		padding: 0 0;
		margin: 0 0;
		background-color: #f3f5fd;
	}
	#content {
		padding: 0 17px;
		margin: 5px 5px 5px 260px;
		border: 1px solid #ddd;
		background-color: white;
	}
	#toc {
		position: fixed;
		z-index: 10;
		width: 240px;
		top: 0;
		left: 0;
		bottom: 0;
		padding: 10px;
		overflow-y: scroll;
		background-color: white;
	}
	#toc > ul {
		margin-left: -10px;
	}
	#toc > h3 {
		margin-top: 5px;
		margin-bottom: 15px;
	}
	#uarr {
		display: none;
	}
	.toc-check, .info-hover, .info-trigger, #toc-trigger, #toc-ff-bugfix {
		display: none;
	}
</style>
<!--[if !IE]><!--><style type="text/css">
	.toc-check, .info-hover {
		display: unset;
	}
	.toc-check-info {
		display: block;
		margin-bottom: -0.5em;
	}
	#toc-check:not(:checked) ~ .toc-check-info {
		display: none;
	}
	#toc:not(:hover):not(:active) {
		opacity: 0;
	}
	#toc-check:not(:checked) ~ #toc {
		opacity: 1;
		width: 240px;
		transition: opacity 0.25s;
	}
	#toc-check:checked ~ #toc {
		width: 250px;
		transition: opacity 0.25s, width 0s linear 0.25s;
	}
	#toc-check, #toc-label {
		cursor: pointer;
		line-height: 150%;
		font-size: 110%;
		color: #c00;
	}
	#toc-label {
		margin-left: -1em;
		padding-left: 1em;
		user-select: none;
	}
@media (pointer:none) {
	#toc:not(#a):not(#b) {
		overflow-y: unset;
		position: static;
		width: unset;
		padding: 20px 0;
		background-color: unset;
		transition: unset;
		opacity: unset;
		box-shadow: unset;
	}
	.toc-check, .info-hover, .info-trigger, #toc-trigger:not(#a):not(#b) {
		display: none;
	}
}
@media (pointer:coarse) {
	#toc-check:checked ~ #toc {
		width: 245px;
		box-shadow: 0px 0px 5px 3px rgba(0,0,0,0.43), 1px 0px 2px 10px rgba(255,255,255,0.43);
	}
}
@media (max-width: 1000px), (pointer:none) {
	.info-hover {
		display: none;
	}
	.info-trigger {
		display: unset;
	}
	body {
		margin: unset;
		padding: unset;
		background-color: unset;
	}
	#content {
		margin: 0;
		border: none;
		background-color: unset;
	}
	#toc-check:not(:checked) ~ #toc {
		overflow-y: unset;
		position: static;
		left: -300px;
		padding: 20px 0;
		background-color: unset;
		transition: unset;
	}
	#toc-check:checked ~ #toc {
		left: -300px;
		width: 250px;
		transition: opacity 0.25s, left 0s linear 0.25s;
		box-shadow: 0px 0px 5px 3px rgba(0,0,0,0.43), 1px 0px 2px 10px rgba(255,255,255,0.43);
	}
	#toc-check:checked ~ #toc-trigger, #toc-trigger:active ~ #toc #toc-ff-bugfix {
		display: unset;
		position: fixed;
		left: 0;
		top: 0;
		bottom: 0;
		width: 17px;
		padding: 0;
		z-index: 10;
		user-select: none;
	}
	#toc-check:checked ~ #toc-trigger {
		transition: opacity 0.25s;
		opacity: 0;
		background-color: white;
		box-shadow: 0px 0px 5px 3px rgba(0,0,0,0.33), 1px 0px 2px 10px rgba(255,255,255,0.33);
	}
	#toc-check:checked ~ #toc-trigger:hover {
		opacity: 0.6;
	}
	#toc-trigger:active ~ #toc, #toc:not(#a):hover, #toc:not(#a):active {
		left: 0;
		opacity: 1;
		transition: opacity 0.25s;
	}
}
@media (max-width: 300px) {
	#toc-check:checked ~ #toc {
		width: calc(100% - 50px);
		margin-left: calc(20px - 100%);
	}
}
@media (max-width: 1100px) {
	.def-left {
		width: 40%;
	}
}
@media (max-width: 640px) {
	#content {
		padding: 0 13px;
	}
}
@media (max-width: 550px) {
	.width-500 {
		width: 100%;
		max-width: 500px;
	}
}
@media (max-width: 500px) {
	#content {
		padding: 0 8px;
	}
	.def-left {
		width: unset;
		margin-right: 15px;
		border-color: #777;
	}
	.def-right {
		margin-left: 15px;
		border: none;
		border-left: 1px dotted #a5a5a5;
		padding-top: 0.25px;
		padding-bottom: 0;
		margin-top: 0.75px;
		margin-bottom: 4px;
	}
	.def-table, .def-table td:not(.def-left):not(.def-right) {
		border: none;
	}
	.def-table, .def-table tbody, .def-table tr, .def-table td {
		display: block;
	}
	.pre-outer, .spoiler {
		margin-left: -5px;
		margin-right: -5px;
	}
}
/* Spoilers */
	.spoiler {
		position: relative;
	}
	.spoiler-checkbox {
		display: inline-block;
		opacity: 0;
		position: absolute;
		left: 0;
		top: 0;
		pointer-events: none;
	}
	.spoiler-space, .spoiler-label {
		display: inline-block;
		margin: 8px;
		padding: 6px;
		border: 1px solid #ccc;
		border-radius: 4px;
		border-right-width: 2px;
		border-bottom-width: 2px;
	}
	.spoiler-space {
		float: right;
		visibility: hidden;
	}
	.spoiler-label {
		position: absolute;
		top: 0;
		right: 0;
		cursor: pointer;
		user-select: none;
		z-index: 1;
	}
	.spoiler-checkbox:focus ~ label {
		border-color: #b2c4ee;
	}
	.spoiler-label:active:hover, .spoiler-checkbox:active ~ label {
		border: 1px solid #b2c4ee;
		background-color: #f0f0f0;
	}
	.spoiler-checkbox:not(:checked) ~ label {
		color: #c00;
	}
	.spoiler-label::after, .spoiler-space::after {
		content: "Expand";
	}
	.spoiler-checkbox:checked ~ label::after, .spoiler-checkbox:checked ~ .spoiler-scroll .spoiler-space::after {
		content: "Collapse";
	}
	.spoiler-scroll {
		overflow-x: auto;
		overflow-y: visible;
		transition: opacity 0.15s;
	}
	.spoiler-checkbox:not(:checked) ~ .spoiler-scroll {
		max-height: 70px;
		overflow: hidden;
		opacity: 0.4;
	}
	.spoiler-checkbox:not(:checked) ~ .spoiler-fade {
		display: block;
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		height: 22px;
		pointer-events: none;
		background: linear-gradient(180deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.5) 30%, rgba(255,255,255,0.8) 70%, rgba(255,255,255,1) 90%);
	}
</style><!--<![endif]-->

</head>
<body>
	<div id="content">
		<h1>MMExtension v2.2 Help</h1>
		<input type="checkbox" id="toc-check" class="toc-check" checked value=""/><label id="toc-label" class="toc-check" for="toc-check"><span class="info-hover">Show the table of contents only on mouse hover.</span><span class="info-trigger">Show the table of contents by clicking on the left side of the screen near the border.</span></label>
		<div class="info-hover toc-check-info">
			Hover your mouse over empty space on the left side of the page to see the table of contents.
		</div>
		<div id="toc-trigger"></div>
		<div id="toc">
			<div id="toc-ff-bugfix"></div>
			<h3>Contents</h3>
			<ul><li><a href="#General-Information">General Information</a><ul><li><a href="#Hello-world!">Hello world!</a></li><li><a href="#Decompiled-Scripts">Decompiled Scripts</a></li><li><a href="#Short-functions-syntax">Short functions syntax</a></li><li><a href="#Quests">Quests</a></li><li><a href="#Localization">Localization</a></li></ul></li><li><a href="#Examples">Examples</a><ul><li><a href="#Players-Skills-And-Spells">Players Skills And Spells</a></li><li><a href="#Artifact-Bonuses">Artifact Bonuses</a></li><li><a href="#Spells-Damage">Spells Damage</a></li><li><a href="#Controlling-monsters-aggression-in-MM6">Controlling monsters aggression in MM6</a></li><li><a href="#Flowers-you-can-pick-up-(MM8)">Flowers you can pick up (MM8)</a></li><li><a href="#Unusually-looking-barrels-(MM7)">Unusually looking barrels (MM7)</a></li><li><a href="#Other-Examples">Other Examples</a></li></ul></li><li><a href="#Evt-Commands">Evt Commands</a><ul><li><a href="#evt.EnterHouse">evt.EnterHouse</a></li><li><a href="#evt.PlaySound">evt.PlaySound</a></li><li><a href="#evt.MoveToMap">evt.MoveToMap</a></li><li><a href="#evt.OpenChest">evt.OpenChest</a></li><li><a href="#evt.FaceExpression">evt.FaceExpression</a></li><li><a href="#evt.DamagePlayer">evt.DamagePlayer</a></li><li><a href="#evt.SetSnow">evt.SetSnow</a></li><li><a href="#evt.SetTexture">evt.SetTexture</a></li><li><a href="#evt.SetTextureOutdoors">evt.SetTextureOutdoors</a></li><li><a href="#evt.ShowMovie">evt.ShowMovie</a></li><li><a href="#evt.SetSprite">evt.SetSprite</a></li><li><a href="#evt.Cmp">evt.Cmp</a></li><li><a href="#evt.SetDoorState">evt.SetDoorState</a></li><li><a href="#evt.Add">evt.Add</a></li><li><a href="#evt.Subtract">evt.Subtract</a></li><li><a href="#evt.Set">evt.Set</a></li><li><a href="#evt.SummonMonsters">evt.SummonMonsters</a></li><li><a href="#evt.CastSpell">evt.CastSpell</a></li><li><a href="#evt.SpeakNPC">evt.SpeakNPC</a></li><li><a href="#evt.SetFacetBit">evt.SetFacetBit</a></li><li><a href="#evt.SetFacetBitOutdoors">evt.SetFacetBitOutdoors</a></li><li><a href="#evt.SetMonsterBit">evt.SetMonsterBit</a></li><li><a href="#evt.Question">evt.Question</a></li><li><a href="#evt.StatusText">evt.StatusText</a></li><li><a href="#evt.SetMessage">evt.SetMessage</a></li><li><a href="#evt.SetLight">evt.SetLight</a></li><li><a href="#evt.SimpleMessage">evt.SimpleMessage</a></li><li><a href="#evt.SummonObject">evt.SummonObject</a></li><li><a href="#evt.ForPlayer">evt.ForPlayer</a></li><li><a href="#evt.SetNPCTopic">evt.SetNPCTopic</a></li><li><a href="#evt.MoveNPC">evt.MoveNPC</a></li><li><a href="#evt.GiveItem">evt.GiveItem</a></li><li><a href="#evt.ChangeEvent">evt.ChangeEvent</a></li><li><a href="#evt.CheckSkill">evt.CheckSkill</a></li><li><a href="#evt.SetNPCGroupNews">evt.SetNPCGroupNews</a></li><li><a href="#evt.SetMonsterGroup">evt.SetMonsterGroup</a></li><li><a href="#evt.SetNPCItem">evt.SetNPCItem</a></li><li><a href="#evt.SetNPCGreeting">evt.SetNPCGreeting</a></li><li><a href="#evt.CheckMonstersKilled">evt.CheckMonstersKilled</a></li><li><a href="#evt.ChangeGroupToGroup">evt.ChangeGroupToGroup</a></li><li><a href="#evt.ChangeGroupAlly">evt.ChangeGroupAlly</a></li><li><a href="#evt.CheckSeason">evt.CheckSeason</a></li><li><a href="#evt.SetMonGroupBit">evt.SetMonGroupBit</a></li><li><a href="#evt.SetChestBit">evt.SetChestBit</a></li><li><a href="#evt.FaceAnimation">evt.FaceAnimation</a></li><li><a href="#evt.SetMonsterItem">evt.SetMonsterItem</a></li><li><a href="#evt.StopDoor">evt.StopDoor</a></li><li><a href="#evt.CheckItemsCount">evt.CheckItemsCount</a></li><li><a href="#evt.RemoveItems">evt.RemoveItems</a></li><li><a href="#evt.Jump">evt.Jump</a></li><li><a href="#evt.IsTotalBountyInRange">evt.IsTotalBountyInRange</a></li><li><a href="#evt.IsPlayerInParty">evt.IsPlayerInParty</a></li></ul></li><li><a href="#Events">Events</a><ul><li><a href="#Core-events.lua"><span class="def-shadow">Core\ </span>events.lua</a><ul><li><a href="#events.CalcSpellDamage">CalcSpellDamage</a></li><li><a href="#events.WalkToMap">WalkToMap</a></li><li><a href="#events.NewGameMap">NewGameMap</a></li><li><a href="#events.DeathMap">DeathMap</a></li><li><a href="#events.FogRange">FogRange</a></li><li><a href="#events.GameInitialized1">GameInitialized1</a></li><li><a href="#events.GameInitialized2">GameInitialized2</a></li><li><a href="#events.CanSaveGame">CanSaveGame</a></li><li><a href="#events.CanCastLloyd">CanCastLloyd</a></li><li><a href="#events.IsUnderwater">IsUnderwater</a></li><li><a href="#events.SetMapNoNPC">SetMapNoNPC</a></li><li><a href="#events.EnterNPC">EnterNPC</a></li><li><a href="#events.ShowNPCTopics">ShowNPCTopics</a></li><li><a href="#events.DrawNPCGreeting">DrawNPCGreeting</a></li><li><a href="#events.WindowMessage">WindowMessage</a></li><li><a href="#events.KeyUp">KeyUp</a></li><li><a href="#events.KeyDown">KeyDown</a></li><li><a href="#events.Action">Action</a></li><li><a href="#events.MenuAction">MenuAction</a></li><li><a href="#events.ExitNPC">ExitNPC</a></li><li><a href="#events.KeysFilter">KeysFilter</a></li><li><a href="#events.BeforeSaveGame">BeforeSaveGame</a></li><li><a href="#events.AfterSaveGame">AfterSaveGame</a></li><li><a href="#events.SkyBitmap">SkyBitmap</a></li><li><a href="#events.ShowMovie">ShowMovie</a></li><li><a href="#events.CalcStatBonusByItems">CalcStatBonusByItems</a></li><li><a href="#events.CalcStatBonusByMagic">CalcStatBonusByMagic</a></li><li><a href="#events.CalcStatBonusBySkills">CalcStatBonusBySkills</a></li><li><a href="#events.GetSkill">GetSkill</a></li><li><a href="#events.GetAttackDelay">GetAttackDelay</a></li><li><a href="#events.CalcDamageToPlayer">CalcDamageToPlayer</a></li><li><a href="#events.DoBadThingToPlayer">DoBadThingToPlayer</a></li><li><a href="#events.GetStatisticEffect">GetStatisticEffect</a></li><li><a href="#events.UseMouseItem">UseMouseItem</a></li><li><a href="#events.MonsterKilled">MonsterKilled</a></li><li><a href="#events.ItemAdditionalDamage">ItemAdditionalDamage</a></li><li><a href="#events.CalcDamageToMonster">CalcDamageToMonster</a></li><li><a href="#events.PickCorpse">PickCorpse</a></li><li><a href="#events.CastTelepathy">CastTelepathy</a></li></ul></li><li><a href="#Core-evt.lua"><span class="def-shadow">Core\ </span>evt.lua</a><ul><li><a href="#events.LeaveMap">LeaveMap</a></li><li><a href="#events.LeaveGame">LeaveGame</a></li><li><a href="#events.BeforeLoadMap">BeforeLoadMap</a></li><li><a href="#events.CancelLoadingMapScripts">CancelLoadingMapScripts</a></li><li><a href="#events.LoadMap">LoadMap</a></li><li><a href="#events.AfterLoadMap">AfterLoadMap</a></li><li><a href="#events.GetEventHint">GetEventHint</a></li><li><a href="#events.GetMazeInfo">GetMazeInfo</a></li><li><a href="#events.EvtMap">EvtMap</a></li><li><a href="#events.EvtGlobal">EvtGlobal</a></li></ul></li><li><a href="#Core-main.lua"><span class="def-shadow">Core\ </span>main.lua</a><ul><li><a href="#events.StructsLoaded">StructsLoaded</a></li><li><a href="#events.ScriptsLoaded">ScriptsLoaded</a></li></ul></li><li><a href="#Core-timers.lua"><span class="def-shadow">Core\ </span>timers.lua</a><ul><li><a href="#events.Tick">Tick</a></li></ul></li></ul></li><li><a href="#General-Functions">General Functions</a><ul><li><a href="#StructsAfter-Backup.lua"><span class="def-shadow">Structs\After\ </span>Backup.lua</a><ul><li><a href="#LocalFile">LocalFile</a></li><li><a href="#LocalMonstersTxt">LocalMonstersTxt</a></li><li><a href="#LocalHostileTxt">LocalHostileTxt</a></li><li><a href="#LocalNPCNews">LocalNPCNews</a></li></ul></li><li><a href="#StructsAfter-DataTablesSupport.lua"><span class="def-shadow">Structs\After\ </span>DataTablesSupport.lua</a><ul><li><a href="#SplitLines">SplitLines</a></li><li><a href="#SplitLinesAny">SplitLinesAny</a></li><li><a href="#SplitTabs">SplitTabs</a></li></ul></li><li><a href="#StructsAfter-Functions.lua"><span class="def-shadow">Structs\After\ </span>Functions.lua</a><ul><li><a href="#SplitSkill">SplitSkill</a></li><li><a href="#JoinSkill">JoinSkill</a></li><li><a href="#XYZ">XYZ</a></li><li><a href="#Message">Message</a></li><li><a href="#Question">Question</a></li><li><a href="#ReplaceNPCTopic">ReplaceNPCTopic</a></li><li><a href="#AddGoldExp">AddGoldExp</a></li><li><a href="#ShowQuestEffect">ShowQuestEffect</a></li><li><a href="#TakeItemFromParty">TakeItemFromParty</a></li><li><a href="#CheckMonstersKilled">CheckMonstersKilled</a></li><li><a href="#EnumAvailableSkills">EnumAvailableSkills</a></li><li><a href="#SummonMonster">SummonMonster</a></li><li><a href="#SummonItem">SummonItem</a></li><li><a href="#RebildIDList">RebildIDList</a></li><li><a href="#ChangeSprite">ChangeSprite</a></li><li><a href="#CreateSprite">CreateSprite</a></li><li><a href="#MoveModel">MoveModel</a></li></ul></li><li><a href="#StructsAfter-LocalizationAndQuests.lua"><span class="def-shadow">Structs\After\ </span>LocalizationAndQuests.lua</a><ul><li><a href="#TakeQuestOperation">TakeQuestOperation</a></li><li><a href="#Quests-">Quests</a></li><li><a href="#QuestNPC">QuestNPC</a></li><li><a href="#vars.Quests">vars.Quests</a></li><li><a href="#LocalizeAll">LocalizeAll</a></li><li><a href="#Localize">Localize</a></li><li><a href="#GenerateQuestsLocalization">GenerateQuestsLocalization</a></li><li><a href="#GenerateLocalization">GenerateLocalization</a></li><li><a href="#QuestBranch">QuestBranch</a></li><li><a href="#Quest">Quest</a></li><li><a href="#Greeting">Greeting</a></li><li><a href="#NPCTopic">NPCTopic</a></li><li><a href="#KillMonstersQuest">KillMonstersQuest</a></li></ul></li><li><a href="#StructsAfter-Text-Tables.lua"><span class="def-shadow">Structs\After\ </span>Text Tables.lua</a><ul><li><a href="#ParseTextTable">ParseTextTable</a></li><li><a href="#LoadTextTable">LoadTextTable</a></li><li><a href="#ParseBasicTextTable">ParseBasicTextTable</a></li><li><a href="#LoadBasicTextTable">LoadBasicTextTable</a></li><li><a href="#ParseNumbersTextTable">ParseNumbersTextTable</a></li><li><a href="#LoadNumbersTextTable">LoadNumbersTextTable</a></li><li><a href="#TransposeTextTable">TransposeTextTable</a></li><li><a href="#ReadLodTextTable">ReadLodTextTable</a></li></ul></li><li><a href="#Core-Common.lua"><span class="def-shadow">Core\ </span>Common.lua</a><ul><li><a href="#assertnum">assertnum</a></li><li><a href="#tget">tget</a></li><li><a href="#pcall2">pcall2</a></li><li><a href="#xpcall2">xpcall2</a></li><li><a href="#cocall">cocall</a></li><li><a href="#cocall2">cocall2</a></li><li><a href="#dofile2">dofile2</a></li><li><a href="#coroutine.resume2">coroutine.resume2</a></li><li><a href="#os.GetErrorText">os.GetErrorText</a></li><li><a href="#path.find">path.find</a></li><li><a href="#path.FindFirst">path.FindFirst</a></li><li><a href="#path.findfirst">path.findfirst</a></li><li><a href="#os.chdir">os.chdir</a></li><li><a href="#os.mkdir">os.mkdir</a></li><li><a href="#os.copy">os.copy</a></li><li><a href="#path.GetRelativePath">path.GetRelativePath</a></li><li><a href="#debug.FunctionFile">debug.FunctionFile</a></li></ul></li><li><a href="#Core-Debug.lua"><span class="def-shadow">Core\ </span>Debug.lua</a><ul><li><a href="#debug.HideConsole">debug.HideConsole</a></li></ul></li><li><a href="#Core-ErrorFunction.lua"><span class="def-shadow">Core\ </span>ErrorFunction.lua</a><ul><li><a href="#errorinfo">errorinfo</a></li><li><a href="#tostring2">tostring2</a></li></ul></li><li><a href="#Core-RSFunctions.lua"><span class="def-shadow">Core\ </span>RSFunctions.lua</a><ul><li><a href="#table.swap">table.swap</a></li><li><a href="#table.move">table.move</a></li><li><a href="#table.copy">table.copy</a></li><li><a href="#table.find">table.find</a></li><li><a href="#table.ifind">table.ifind</a></li><li><a href="#table.invert">table.invert</a></li><li><a href="#coroutine.yieldN">coroutine.yieldN</a></li><li><a href="#path.ext">path.ext</a></li><li><a href="#path.setext">path.setext</a></li><li><a href="#path.name">path.name</a></li><li><a href="#path.dir">path.dir</a></li><li><a href="#path.addslash">path.addslash</a></li><li><a href="#path.noslash">path.noslash</a></li><li><a href="#io.save">io.save</a></li><li><a href="#io.load">io.load</a></li><li><a href="#string.split">string.split</a></li><li><a href="#string.csplit">string.csplit</a></li><li><a href="#string.replace">string.replace</a></li><li><a href="#sortpairs">sortpairs</a></li><li><a href="#debug.findupvalue">debug.findupvalue</a></li><li><a href="#debug.findlocal">debug.findlocal</a></li><li><a href="#debug.upvalues">debug.upvalues</a></li></ul></li><li><a href="#Core-RSMem.lua"><span class="def-shadow">Core\ </span>RSMem.lua</a><ul><li><a href="#&#8230;">&#8230;</a></li></ul></li><li><a href="#Core-RSPersist.lua"><span class="def-shadow">Core\ </span>RSPersist.lua</a><ul><li><a href="#persist">persist</a></li><li><a href="#unpersist">unpersist</a></li></ul></li><li><a href="#Core-dump.lua"><span class="def-shadow">Core\ </span>dump.lua</a><ul><li><a href="#dump">dump</a></li></ul></li><li><a href="#Core-events.lua-"><span class="def-shadow">Core\ </span>events.lua</a><ul><li><a href="#VFlipUnfixed">VFlipUnfixed</a></li><li><a href="#HookManager">HookManager</a></li><li><a href="#GetCurrentNPC">GetCurrentNPC</a></li><li><a href="#FixVFlip">FixVFlip</a></li></ul></li><li><a href="#Core-evt.lua-"><span class="def-shadow">Core\ </span>evt.lua</a><ul><li><a href="#vars">vars</a></li><li><a href="#mapvars">mapvars</a></li><li><a href="#evt.CanShowTopic">evt.CanShowTopic</a></li><li><a href="#evt.map">evt.map</a></li><li><a href="#evt.hint">evt.hint</a></li><li><a href="#evt.MazeInfo">evt.MazeInfo</a></li><li><a href="#evt.str">evt.str</a></li><li><a href="#evt.house">evt.house</a></li><li><a href="#evt.Player">evt.Player</a></li><li><a href="#evt.CurrentPlayer">evt.CurrentPlayer</a></li><li><a href="#evt.InGlobal">evt.InGlobal</a></li><li><a href="#evt.ForPlayer-">evt.ForPlayer</a></li><li><a href="#evt.HouseDoor">evt.HouseDoor</a></li></ul></li><li><a href="#Core-main.lua-"><span class="def-shadow">Core\ </span>main.lua</a><ul><li><a href="#MessageBox">MessageBox</a></li><li><a href="#debug.Message">debug.Message</a></li><li><a href="#debug.ErrorMessage">debug.ErrorMessage</a></li><li><a href="#ErrorMessage">ErrorMessage</a></li><li><a href="#ReloadLocalization">ReloadLocalization</a></li></ul></li><li><a href="#Core-timers.lua-"><span class="def-shadow">Core\ </span>timers.lua</a><ul><li><a href="#Keys">Keys</a></li><li><a href="#timeGetTime">timeGetTime</a></li><li><a href="#Timer">Timer</a></li><li><a href="#RefillTimer">RefillTimer</a></li><li><a href="#Sleep">Sleep</a></li><li><a href="#Sleep2">Sleep2</a></li><li><a href="#RemoveTimer">RemoveTimer</a></li><li><a href="#Keys.IsPressed">Keys.IsPressed</a></li><li><a href="#Keys.IsToggled">Keys.IsToggled</a></li></ul></li></ul></li><li><a href="#Structures">Structures</a><ul><li><a href="#structs.GameStructure">Game</a></li><li><a href="#structs.GameParty">Party</a></li><li><a href="#structs.GameMap">Map</a></li><li><a href="#structs.GameMouse">Mouse</a></li><li><a href="#structs.ActionItem">structs.ActionItem</a></li><li><a href="#structs.BSPNode">structs.BSPNode</a></li><li><a href="#structs.BaseBonus">structs.BaseBonus</a></li><li><a href="#structs.BaseLight">structs.BaseLight</a></li><li><a href="#structs.BitmapsLod">structs.BitmapsLod</a></li><li><a href="#structs.BlvHeader">structs.BlvHeader</a></li><li><a href="#structs.CurrentTileBin">structs.CurrentTileBin</a></li><li><a href="#structs.CustomLods">structs.CustomLods</a></li><li><a href="#structs.DChestItem">structs.DChestItem</a></li><li><a href="#structs.DecListItem">structs.DecListItem</a></li><li><a href="#structs.EventLine">structs.EventLine</a></li><li><a href="#structs.Events2DItem">structs.Events2DItem</a></li><li><a href="#structs.FacetData">structs.FacetData</a></li><li><a href="#structs.FloatVector">structs.FloatVector</a></li><li><a href="#structs.FogChances">structs.FogChances</a></li><li><a href="#structs.GameClassKinds">structs.GameClassKinds</a></li><li><a href="#structs.GameClasses">structs.GameClasses</a></li><li><a href="#structs.GameRaces">structs.GameRaces</a></li><li><a href="#structs.HistoryTxtItem">structs.HistoryTxtItem</a></li><li><a href="#structs.HouseMovie">structs.HouseMovie</a></li><li><a href="#structs.IFTItem">structs.IFTItem</a></li><li><a href="#structs.Item">structs.Item</a></li><li><a href="#structs.ItemsTxtItem">structs.ItemsTxtItem</a></li><li><a href="#structs.LloydBeaconSlot">structs.LloydBeaconSlot</a></li><li><a href="#structs.Lod">structs.Lod</a></li><li><a href="#structs.LodBitmap">structs.LodBitmap</a></li><li><a href="#structs.LodFile">structs.LodFile</a></li><li><a href="#structs.LodRecord">structs.LodRecord</a></li><li><a href="#structs.LodSprite">structs.LodSprite</a></li><li><a href="#structs.LodSpriteD3D">structs.LodSpriteD3D</a></li><li><a href="#structs.LodSpriteLine">structs.LodSpriteLine</a></li><li><a href="#structs.MapChest">structs.MapChest</a></li><li><a href="#structs.MapDoor">structs.MapDoor</a></li><li><a href="#structs.MapFacet">structs.MapFacet</a></li><li><a href="#structs.MapLight">structs.MapLight</a></li><li><a href="#structs.MapModel">structs.MapModel</a></li><li><a href="#structs.MapMonster">structs.MapMonster</a></li><li><a href="#structs.MapNote">structs.MapNote</a></li><li><a href="#structs.MapObject">structs.MapObject</a></li><li><a href="#structs.MapOutline">structs.MapOutline</a></li><li><a href="#structs.MapOutlines">structs.MapOutlines</a></li><li><a href="#structs.MapRoom">structs.MapRoom</a></li><li><a href="#structs.MapSprite">structs.MapSprite</a></li><li><a href="#structs.MapStatsItem">structs.MapStatsItem</a></li><li><a href="#structs.MapVertex">structs.MapVertex</a></li><li><a href="#structs.ModelFacet">structs.ModelFacet</a></li><li><a href="#structs.ModelVertex">structs.ModelVertex</a></li><li><a href="#structs.MonListItem">structs.MonListItem</a></li><li><a href="#structs.MonsterAttackInfo">structs.MonsterAttackInfo</a></li><li><a href="#structs.MonsterKind">structs.MonsterKind</a></li><li><a href="#structs.MonsterSchedule">structs.MonsterSchedule</a></li><li><a href="#structs.MonstersTxtItem">structs.MonstersTxtItem</a></li><li><a href="#structs.NPC">structs.NPC</a></li><li><a href="#structs.NPCNewsItem">structs.NPCNewsItem</a></li><li><a href="#structs.ObjListItem">structs.ObjListItem</a></li><li><a href="#structs.ObjectRef">structs.ObjectRef</a></li><li><a href="#structs.OdmHeader">structs.OdmHeader</a></li><li><a href="#structs.OutdoorExtra">structs.OutdoorExtra</a></li><li><a href="#structs.OverlayItem">structs.OverlayItem</a></li><li><a href="#structs.PFTItem">structs.PFTItem</a></li><li><a href="#structs.PatchOptions">structs.PatchOptions</a></li><li><a href="#structs.Player">structs.Player</a></li><li><a href="#structs.SFT">structs.SFT</a></li><li><a href="#structs.SFTItem">structs.SFTItem</a></li><li><a href="#structs.SoundsItem">structs.SoundsItem</a></li><li><a href="#structs.SpawnPoint">structs.SpawnPoint</a></li><li><a href="#structs.SpcItemsTxtItem">structs.SpcItemsTxtItem</a></li><li><a href="#structs.SpellBuff">structs.SpellBuff</a></li><li><a href="#structs.SpellEffect">structs.SpellEffect</a></li><li><a href="#structs.SpellInfo">structs.SpellInfo</a></li><li><a href="#structs.SpellsTxtItem">structs.SpellsTxtItem</a></li><li><a href="#structs.SpritesLod">structs.SpritesLod</a></li><li><a href="#structs.StartStat">structs.StartStat</a></li><li><a href="#structs.StdItemsTxtItem">structs.StdItemsTxtItem</a></li><li><a href="#structs.TFTItem">structs.TFTItem</a></li><li><a href="#structs.TileItem">structs.TileItem</a></li><li><a href="#structs.TilesetDef">structs.TilesetDef</a></li><li><a href="#structs.TownPortalTownInfo">structs.TownPortalTownInfo</a></li><li><a href="#structs.TravelInfo">structs.TravelInfo</a></li><li><a href="#structs.Weather">structs.Weather</a></li></ul></li><li><a href="#Constants">Constants</a><ul><li><a href="#const">const.*</a></li><li><a href="#const.AIState">const.AIState</a></li><li><a href="#const.ChestBits">const.ChestBits</a></li><li><a href="#const.Class">const.Class</a></li><li><a href="#const.Condition">const.Condition</a></li><li><a href="#const.Damage">const.Damage</a></li><li><a href="#const.FaceAnimation">const.FaceAnimation</a></li><li><a href="#const.FacetBits">const.FacetBits</a></li><li><a href="#const.GameActions">const.GameActions</a></li><li><a href="#const.HouseType">const.HouseType</a></li><li><a href="#const.ItemSlot">const.ItemSlot</a></li><li><a href="#const.ItemType">const.ItemType</a></li><li><a href="#const.Keys">const.Keys</a></li><li><a href="#const.MonsterBits">const.MonsterBits</a></li><li><a href="#const.MonsterBonus">const.MonsterBonus</a></li><li><a href="#const.MonsterBuff">const.MonsterBuff</a></li><li><a href="#const.MonsterKind">const.MonsterKind</a></li><li><a href="#const.MonsterPref">const.MonsterPref</a></li><li><a href="#const.NPCProfession">const.NPCProfession</a></li><li><a href="#const.ObjectRefKind">const.ObjectRefKind</a></li><li><a href="#const.PartyBuff">const.PartyBuff</a></li><li><a href="#const.PlayerBuff">const.PlayerBuff</a></li><li><a href="#const.Race">const.Race</a></li><li><a href="#const.Screens">const.Screens</a></li><li><a href="#const.Season">const.Season</a></li><li><a href="#const.Skills">const.Skills</a></li><li><a href="#const.SpriteBits">const.SpriteBits</a></li><li><a href="#const.Stats">const.Stats</a></li><li><a href="#evt.Players">evt.Players</a></li><li><a href="#evt.VarNum">evt.VarNum</a></li></ul></li></ul>
		</div>
		

<br>
<a name="General-Information"></a><h2>General Information</h2>
You will need <a href="https://sites.google.com/site/sergroj/mm/MMArchive.rar?attredirects=0">MMArchive</a>, <a href="http://sourceforge.net/projects/mm8leveleditor/files/MM8LevelEditor/">mm8leveleditor</a> and <a href="http://sites.google.com/site/angelddeath/#TOC-Might-Magic-6-8-Map-Viewer">MM Map Viewer</a>.
<br>
Extract all <b class="def-param">*.txt</b> files from appropriate LOD archive:
<b class="def-param">icons.lod</b> in MM6, <b class="def-param">events.lod</b> in MM7, <b class="def-param">EnglishT.lod</b> in MM8. You will need them.

<br>
Easiest thing to start with is editing text tables with <a href="https://sites.google.com/site/sergroj/wog/TxtEdit.rar?attredirects=0">TxtEdit</a>.
In addition to <b class="def-param">*.txt</b> files that you've extracted from LOD archives MMExtension will create some tables in <b>Data\Tables</b> folder on first launch. You can change any values in them and add new lines to many of them.

<br>
<br>

<b>Lua</b> is a simple, yet powerful scripting language. You can read about it <a href="http://www.lua.org/manual/5.1/">here</a>,
<a href="http://www.lua.org/pil/">here</a> and <a href="http://luajit.org/extensions.html">here</a>. MMExtension exposes all standard Lua and LuaJIT libraries.<br>
I used to use SciTE to edit Lua scripts before I switched to Sublime Text. Here are some of my settings for SciTE:

<table class="table" border="1" bordercolor="#a5a5a5" cellpadding="5" cellspacing="0">
<tbody>
<tr>
<td>
Open SciTEGlobal.properties.<br>
<br>
<b>Find and set up these settings:</b><br>
tabsize=2<br>
indent.size=2<br>
braces.autoclose=0<br>
<br>
<b>Find</b> user.shortcuts=\<br>
<b>delete line with</b> Alt+X<br>
<b>add line:</b> Ctrl+Shift+Z|IDM_REDO|\<br>
<b>add line:</b> Ctrl+R|IDM_REPLACE|\<br>
</td>
</tr>
</tbody>
</table>
<br>
All scripts are located in Scripts directory. Subfolders determine when scripts get loaded and unloaded:

<br>
<table class="width-500" border="1" bordercolor="#a5a5a5" cellpadding="5" cellspacing="0">
<tbody>
<tr>
<td><i>&nbsp;Subfolder
</i></td>
<td><i>&nbsp;Description
</i></td>
</tr>
<tr>
<td>Core</td>
<td>MMExtension core scripts. Don't put your scripts here.
</td>
</tr>
<tr>
<td>General</td>
<td>These scripts are loaded before the game starts and are never unloaded.

</td>
</tr>
<tr>
<td>Global</td>
<td>These scripts are loaded when a new game is started or a saved game is loaded and are unloaded
when user exits to main menu or loads another game. This is a good place for most of your scripts that don't belong to specific maps. Quests scripts in particular.

</td>
</tr>
<td>Localization</td>
<td>These scripts and text files are loaded on game start just before "General" scripts and can be reloaded with <a href="#ReloadLocalization">ReloadLocalization()</a> function. They should be used for mods localization.

</td>
</tr>
<tr>
<td>Maps</td>
<td>These scripts correspond to maps. For example, scripts named <b class="def-param">oute3.lua</b> and <b class="def-param">some_name.oute3.lua</b> would be loaded when
<b class="def-param">oute3.odm</b> map (New Sorpigal) is loaded and unloaded when it is left.

</td>
</tr>
<td>Modules</td>
<td>These scripts aren't loaded automatically. Instead they can be loaded with <a href="http://www.lua.org/manual/5.1/manual.html#pdf-require">require</a> function.

</td>
</tr>
<tr>
<td>Structs</td>
<td>These scripts are intended for structs definitions. These things are low-level, so I won't describe them yet.
If you find some interesting address with ArtMoney or disassembler, contact me.

</td>
</tr>
<tr>
<td colspan="2">You can create your own subfolders. Scripts in them won't be loaded automatically and
won't be unloaded either.

<br>
<br>
The word 'unload' means removing all events of a script. As a consequence of global and maps scripts
being unloaded and then loaded again, you can change them and test changes by simply reloading a saved game.
No need to exit Might and Magic for this.

<br>
</td>
</tr>
</tbody>
</table>
<br>
<b>Debug console</b> is a convenient way to quickly test things. Press Ctrl+F1 to open it.
You can write any script here. For example, <span class="def-code"><font color="Brown">dump</font>(Party[<B><font color="#079">0</font></B>].Stats)</span> would output first player's stats.<br>
Press Ctrl+Enter to execute a script.<br>
Press Ctrl+E to repeat the last script.<br>
Press Esc to cancel debug console.<br>

<br>
<b>Variables</b> used by your scripts can be of 4 types:<br>
Local variables, declared with the word <b>local</b> in Lua.
They can be used in the place where they were declared (i.e. function, script or code block) and aren't stored is saved games.<br>
Global variables. They can be accessed from anywhere, but aren't stored in saved games.<br>
Variables in <a href="#vars">vars</a> table. They can be accessed from anywhere and are stored in savegames.<br>
Variables in <a href="#mapvars">mapvars</a> table. They belong to current map. When a new map is entered
the appropriate variables table is set as <a href="#mapvars">mapvars</a> table. They are stored in savegames. When a map is refilled, new <a href="#mapvars">mapvars</a> table is created, but the old one is accessible at this moment as <a href="#structs.GameMap.Refilled">Map.Refilled</a>.<br>


<br>

<a name="Hello-world!"></a><h3>Hello world!</h3>
Let's first use the debug console. In the game press Ctrl+F1 and paste this script:

<div class="pre-outer"><div class="pre">Message(<font color="#90A">&quot;Hello world!&quot;</font>)</div></div>
Press Ctrl+Enter to execute your welcome script.
<br><br>

To make your first game script create <b class="def-param">out01.lua</b> file (or <b class="def-param">oute3.lua</b> for MM6) in <b>Scripts\Maps</b> directory and write this text there:<br>

<div class="pre-outer"><div class="pre">MessageBox(<font color="#90A">&quot;Hello world!&quot;</font>)</div></div>
This script will show a <a href="#MessageBox">system message box</a> each time you enter the first map.<br><br>

To show a native MM message you can use a script like this:

<div class="pre-outer"><div class="pre">Game.NeedRedraw <B><font color="#00D">=</font></B> <B><font color="#079">true</font></B> <span> </span><font color="#009000">-- I remember having problems with minimap not getting drawn</font><br>Sleep(<B><font color="#079">1</font></B>) <span> </span><font color="#009000">-- sleep for 1 tick to let it be drawn</font><br>Message(<font color="#90A">&quot;Hello world!&quot;</font>)</div></div>
The reason for the first two lines of code is that Might and Magic doesn't support showing simple messages when the map is just loaded.<br>

<br>



<a name="Decompiled-Scripts"></a><h3>Decompiled Scripts</h3>
Original Might and Magic scripts are stored in binary format in files with extension <b class="def-param">.evt</b>. MMExtension can decompile these scripts.
<a href="https://dl.dropboxusercontent.com/u/44735333/mm/MM6Scripts.rar">Download decompiled scripts here.</a><br>
Decompiled scripts come in the form of Lua scripts and also pseudo code that directly corresponds to binary format.<br>
Just so you know, here are the differences between pseudo code commands and real MMExtension commands:<br>
1) "evt." isn't written in them.<br>
2) They use jumps instead of if-then and loops. They have their lines numbered.<br>
3) They almost always supply parameter names in calls to Evt functions. You can do the same, but you can also use calls without parameter names.<br>
4) Some commands are replaced by better analogs in MMExtension.
For example, you cannot use <b class="def-param">evt.OnTimer</b> command, instead you should use <a href="#Timer">Timer</a> function.<br>
5) There are other differences, like declaration of events.<br>



<br>
Here's an example (a Lua script):
<br>
<div class="pre-outer"><div class="pre">Game.MapEvtLines:RemoveEvent(<B><font color="#079">60</font></B>) <span> </span><font color="#009000">-- remove original event</font><br>evt.map[<B><font color="#079">60</font></B>] <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>()<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> i<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> evt.Cmp(<font color="#90A">&quot;MapVar0&quot;</font>, <B><font color="#079">4</font></B>) <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.StatusText(<B><font color="#079">5</font></B>) <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- &quot;Nothing here&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">else</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;MapVar0&quot;</font>, <B><font color="#079">1</font></B>)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.StatusText(<B><font color="#079">4</font></B>) <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- &quot;You found something!&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>i <B><font color="#00D">=</font></B> Game.Rand() <B><font color="#00D">%</font></B> <B><font color="#079">6</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> i <B><font color="#333">==</font></B> <B><font color="#079">1</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Inventory&quot;</font>, <B><font color="#079">1</font></B>) <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- &quot;Longsword&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">elseif</font></B> i <B><font color="#333">==</font></B> <B><font color="#079">2</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Inventory&quot;</font>, <B><font color="#079">15</font></B>) <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- &quot;Dagger&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">elseif</font></B> i <B><font color="#333">==</font></B> <B><font color="#079">3</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Inventory&quot;</font>, <B><font color="#079">58</font></B>) <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- &quot;Club&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">elseif</font></B> i <B><font color="#333">==</font></B> <B><font color="#079">4</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Inventory&quot;</font>, <B><font color="#079">161</font></B>) <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- &quot;Phirna Root&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">elseif</font></B> i <B><font color="#333">==</font></B> <B><font color="#079">5</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Inventory&quot;</font>, <B><font color="#079">309</font></B>) <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- &quot;Inferno&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">else</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Inventory&quot;</font>, <B><font color="#079">94</font></B>) <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- &quot;Cloth Hat&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>

It comes from a decompiled script <b class="def-param">ZNWC.lua</b> of MM6. I just added the first line to make it remove original event handler, so that this code fragment can be used on its own. Decompiled scripts remove all standard event handlers at once with <span class="def-code">Game.MapEvtLines.Count <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B></span> command. If you want to modify parts of decompiled scripts, you should also extract them like I did here. See <a href="#structs.EventLine.RemoveEvent">RemoveEvent</a> method for more info.<br>

<br>
Now it's time for a script doing the same thing (if you play the game from start with it), but written using more fitting MMExtension features:
<br>


<a name="LocalizeScriptExample"></a>
<div class="pre-outer"><div class="pre"><B><font color="#00D">local</font></B> TXT <B><font color="#00D">=</font></B> Localize<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>NothingHere <B><font color="#00D">=</font></B> <font color="#90A">&quot;Nothing here&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>FoundSomething <B><font color="#00D">=</font></B> <font color="#90A">&quot;You found something!&quot;</font>,<br><B><font color="Black">}</font></B><br><B><font color="#00D">local</font></B> items <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><B><font color="#079">1</font></B>, <B><font color="#079">15</font></B>, <B><font color="#079">58</font></B>, <B><font color="#079">161</font></B>, <B><font color="#079">309</font></B>, <B><font color="#079">94</font></B><B><font color="Black">}</font></B><br>Game.MapEvtLines:RemoveEvent(<B><font color="#079">60</font></B>) <span> </span><font color="#009000">-- remove original event</font><br>evt.map[<B><font color="#079">60</font></B>] <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>()<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> mapvars.Shelf60 <B><font color="#333">==</font></B> <B><font color="#079">4</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> Game.StatusText(TXT.NothingHere)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>mapvars.Shelf60 <B><font color="#00D">=</font></B> (mapvars.Shelf60 <B><font color="Black">or</font></B> <B><font color="#079">0</font></B>) <B><font color="#333">+</font></B> <B><font color="#079">1</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Game.StatusText(TXT.FoundSomething)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> i <B><font color="#00D">=</font></B> <font color="Brown">math</font>.<font color="Brown">random</font>(<B><font color="#079">1</font></B>, <B><font color="#333">#</font></B>items)<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Inventory&quot;</font>, items[i]) <span> </span><font color="#009000">-- alternatively: evt.GiveItem{Id = items[i]}</font><br><B><font color="Black">end</font></B></div></div>
<br>
You can decompile scripts by yourself if you ever need to.
To do so, extract all <b class="def-param">*.evt</b> and <b class="def-param">*.str</b> files from the same LOD archive you used to extract <b class="def-param">*.txt</b> files.

Create "Decompile" sub-folder inside the game folder, put these files there and run this simple script:

<br>
<div class="pre-outer"><div class="pre"><B><font color="#00D">local</font></B> dir <B><font color="#00D">=</font></B> <font color="#90A">&quot;Decompile/&quot;</font><br><B><font color="Black">for</font></B> f <B><font color="Black">in</font></B> path.<font color="Brown">find</font>(dir<B><font color="#333">..</font></B><font color="#90A">&quot;*.evt&quot;</font>) <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Decompile(f, <B><font color="#079">0</font></B>, dir<B><font color="#333">..</font></B><font color="#90A">&quot;Scripts/&quot;</font><B><font color="#333">..</font></B>path.setext(path.name(f), <font color="#90A">&quot;.lua&quot;</font>))<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Decompile(f, <B><font color="#079">0</font></B>, dir<B><font color="#333">..</font></B><font color="#90A">&quot;Scripts/txt/&quot;</font><B><font color="#333">..</font></B>path.setext(path.name(f), <font color="#90A">&quot;.txt&quot;</font>), <B><font color="#079">true</font></B>)<br><B><font color="Black">end</font></B></div></div>
<br>

<a name="Short-functions-syntax"></a><h3>Short functions syntax</h3>
MMExtension features one language extension &ndash; short syntax for functions declaration. Here's an example:
<div class="pre-outer"><div class="pre">sum <B><font color="#00D">=</font></B> <B><font color="Black">|</font></B>x, y<B><font color="Black">|</font></B> x <B><font color="#333">+</font></B> y<br><font color="#009000">-- translates into</font><br>sum <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>(x, y)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> x <B><font color="#333">+</font></B> y<br><B><font color="Black">end</font></B></div></div>
<b>Return</b> operator is only added when appropriate. For example,
<div class="pre-outer"><div class="pre">check <B><font color="#00D">=</font></B> <B><font color="Black">|</font></B>b<B><font color="Black">|</font></B> <B><font color="Black">if</font></B> b <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(b)<br><B><font color="Black">end</font></B><br><font color="#009000">-- translates into</font><br>check <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>(b)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> b <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(b)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
Since such short functions can return only one value, you'll have no problems using them in function calls and table declarations:
<div class="pre-outer"><div class="pre">Timer(<B><font color="Black">|</font></B><B><font color="Black">|</font></B> evt.DamagePlayer<B><font color="Black">{</font></B>Damage <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B><B><font color="Black">}</font></B>, const.Minute)<br><font color="#009000">-- translates into</font><br>Timer(<B><font color="Black">function</font></B>()<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> evt.DamagePlayer<B><font color="Black">{</font></B>Damage <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B><B><font color="Black">}</font></B><br><B><font color="Black">end</font></B>, const.Minute)</div></div>
If you want to return more than one value, put the whole short function into parentheses:
<div class="pre-outer"><div class="pre">switch <B><font color="#00D">=</font></B> (<B><font color="Black">|</font></B>x, y<B><font color="Black">|</font></B> y, x)<br><font color="#009000">-- translates into</font><br>switch <B><font color="#00D">=</font></B> (<B><font color="Black">function</font></B>(x, y)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> y, x<br><B><font color="Black">end</font></B>)</div></div>
You can even put multiple statements inside a short function in parentheses:
<div class="pre-outer"><div class="pre">print2 <B><font color="#00D">=</font></B> (<B><font color="Black">|</font></B>x, y<B><font color="Black">|</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(x)<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(y)<br>)<br><font color="#009000">-- translates into</font><br>print2 <B><font color="#00D">=</font></B> (<B><font color="Black">function</font></B>(x, y)<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(x)<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(y)<br><B><font color="Black">end</font></B>)</div></div>
Using <b class="def-param">do</b> block for the same effect would look better:
<div class="pre-outer"><div class="pre">print2 <B><font color="#00D">=</font></B> <B><font color="Black">|</font></B>x, y<B><font color="Black">|</font></B> <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(x)<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(y)<br><B><font color="Black">end</font></B><br><font color="#009000">-- translates into</font><br>print2 <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>(x, y)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(x)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">print</font>(y)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
But don't go too wild with short functions, it's best to use traditional syntax for such multiline functions.
<br>
<br>

<a name="Quests"></a><h3>Quests</h3>
Original MM quests were spread across multiple files and manually programmed, which is inconvenient and error prone. My quests support has undergone a few iterations and I'm very happy with it now.<br>
<a href="https://dl.dropboxusercontent.com/u/44735333/mm/Sample%20Quests.rar">Here are 6 examples</a>.
They are for MM8. At the end of most examples there is extra information about functions used. Most examples utilize <a href="#Short-functions-syntax">short functions syntax</a>.
<br>
<br>
Start with <b>Quest Example Simple.lua</b>. It contains a simple <a href="#Quest">quest</a> and two <a href="#NPCTopic">text topics</a>, as well as a <a href="#Greeting">greeting</a>.

<div class="spoiler"><input class="spoiler-checkbox" type="checkbox" id="spoiler1"/><div class="spoiler-scroll"><div class="spoiler-space"></div><div class="pre-spoiler"><font color="#009000">--[[</font><br><font color="#009000">This is the simplest quest example. Go to the Clan Leader's Hall in Dagger Wound to see it in action.</font><br><font color="#009000">It utilises new NPCTopic function for more convenient creation of simple text-only topics.</font><br><font color="#009000">It also uses new Quest function ability to automatically find free quest slot if the Slot parameter isn't specified.</font><br><font color="#009000">Texts are set using SetTexts function to reduce indentation level.</font><br><font color="#009000">--]]</font><br><br>QuestNPC <B><font color="#00D">=</font></B> <B><font color="#079">32</font></B> <span> </span><font color="#009000">-- Frederick Talimere</font><br><br><font color="#009000">-- another way to make a greeting</font><br>Greeting<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Hello, world!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Hi.&quot;</font>,<br><B><font color="Black">}</font></B><br><br><font color="#009000">-- a simple text topic</font><br>NPCTopic<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Blah 1&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Blah Blah Blah&quot;</font>,<br><B><font color="Black">}</font></B><br><br><font color="#009000">-- a simple quest: require item #1 (Longsword), give 1000 exp, 1000 gold and an artifact hat</font><br>Quest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;SimpleExampleQuest&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>QuestItem <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B>, <span> </span><font color="#009000">-- quest item index (Longsword)</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Gold <B><font color="#00D">=</font></B> <B><font color="#079">1000</font></B>, <span> </span><font color="#009000">-- reward: gold</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Exp <B><font color="#00D">=</font></B> <B><font color="#079">1000</font></B>, <span> </span><font color="#009000">-- reward: experience</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>RewardItem <B><font color="#00D">=</font></B> <B><font color="#079">536</font></B>, <span> </span><font color="#009000">-- reward: Lucky Hat</font><br><B><font color="Black">}</font></B><br>.SetTexts<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Quest&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Give <B><font color="#00D">=</font></B> <font color="#90A">&quot;I need a Longsword!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span>Done <B><font color="#00D">=</font></B> <font color="#90A">&quot;That's the sword I was looking for! Thank you! I have this hat and some gold coins for you!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Undone <B><font color="#00D">=</font></B> <font color="#90A">&quot;You don't have the sword yet?&quot;</font>,<br><br><span style="display: inline-block; width: 2ch;">&#9;</span>After <B><font color="#00D">=</font></B> <font color="#90A">&quot;Thank you for the sword!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span>Quest <B><font color="#00D">=</font></B> <font color="#90A">&quot;Bring a Longsword (the most basic of swords) to Frederick Talimere on Dagger Wound Islands.&quot;</font>,<br><B><font color="Black">}</font></B><br><br><font color="#009000">-- another simple text topic</font><br>NPCTopic<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Blah 2&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Second Blah Blah Blah!&quot;</font>,<br><B><font color="Black">}</font></B><br><br><font color="#009000">--[[</font><br><font color="#009000">NPCTopic{topic, text} and Greeting{firstGreet, greet} functions just call Quest function with appropriate parameters.</font><br><font color="#009000">You can specify any parameters you would normally pass to Quest function, like Slot, CanShow etc.</font><br><font color="#009000">Note that if you pass a number as topic to NPCTopic function, it will set StdTopic to that number.</font><br><font color="#009000">See Quest Example.lua for details on StdTopic and other parameters of Quest function.</font><br><br><br><font color="#009000">The call of Greeting function in this script is equivalent to this:</font><br><font color="#009000">Quest{</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">Slot = -1,</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">Texts = {</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">FirstGreet = &quot;Hello, world!&quot;,</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">Greet = &quot;Hi.&quot;,</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">}</font><br><font color="#009000">}</font><br><br><font color="#009000">The first call of NPCTopic function is equivalent to this:</font><br><font color="#009000">Quest{</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">Texts = {</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">Topic = &quot;Blah 1&quot;,</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">Ungive = &quot;Blah Blah Blah&quot;,</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">}</font><br><font color="#009000">}</font><br><font color="#009000">]]</font></div></div><label class="spoiler-label" for="spoiler1"></label><span class="spoiler-fade"></span></div>
<b>Quest Example.lua</b>
contains basically the same quest, but it is more complex. It has different NPC greetings depending on <a href="#vars.Quests">quest state</a> and conditionally shown topics, one of which lets you buy items from NPC.

<div class="spoiler"><input class="spoiler-checkbox" type="checkbox" id="spoiler2"/><div class="spoiler-scroll"><div class="spoiler-space"></div><div class="pre-spoiler"><B><font color="#00D">local</font></B> A, B, C, D, E, F <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B>, <B><font color="#079">1</font></B>, <B><font color="#079">2</font></B>, <B><font color="#079">3</font></B>, <B><font color="#079">4</font></B>, <B><font color="#079">5</font></B><br><B><font color="#00D">local</font></B> Q <B><font color="#00D">=</font></B> vars.Quests<br><br><font color="#009000">--[[</font><br><font color="#009000">This is an example of a simple quest, dialog topics that depend on quest state and a 'sell item' topic.</font><br><font color="#009000">Mostly it consists of texts rather than code. Go to the Clan Leader's Hall in Dagger Wound to see it in action.</font><br><font color="#009000">It also demonstrates short functions syntax addon (see help for more info).</font><br><font color="#009000">--]]</font><br><br>QuestNPC <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B> <span> </span><font color="#009000">-- The lizard in the tavern</font><br><br><font color="#009000">-- a simple quest: require item #1 (Longsword), give 1000 exp, 1000 gold and an artifact hat</font><br>Quest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;ExampleQuest&quot;</font>, <span> </span><font color="#009000">-- Same as: <span> </span>Name = &quot;ExampleQuest&quot;,</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Slot <B><font color="#00D">=</font></B> A,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>FirstGreet <B><font color="#00D">=</font></B> <font color="#90A">&quot;Hello, world!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Greet <B><font color="#00D">=</font></B> <font color="#90A">&quot;Hi.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Quest!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Give <B><font color="#00D">=</font></B> <font color="#90A">&quot;I need a Longsword!&quot;</font>,<br><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>GreetGiven <B><font color="#00D">=</font></B> <font color="#90A">&quot;How's it going?&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- TopicGiven can be set as well, but I keep it at &quot;Quest!&quot; here</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Done <B><font color="#00D">=</font></B> <font color="#90A">&quot;That's the sword I was looking for! Thank you! I have this hat and some gold coins for you!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Undone <B><font color="#00D">=</font></B> <font color="#90A">&quot;You don't have the sword yet?&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>GreetDone <B><font color="#00D">=</font></B> <font color="#90A">&quot;Greetings to you, The Man Who Gave The Sword!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>TopicDone <B><font color="#00D">=</font></B> <font color="#90A">&quot;Thanks!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>After <B><font color="#00D">=</font></B> <font color="#90A">&quot;Thank you for the sword!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Quest <B><font color="#00D">=</font></B> <font color="#90A">&quot;Bring a Longsword (the most basic of swords) to that lizard in the tavern of Dagger Wound Islands.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>QuestItem <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B>, <span> </span><font color="#009000">-- quest item index (Longsword)</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Gold <B><font color="#00D">=</font></B> <B><font color="#079">1000</font></B>, <span> </span><font color="#009000">-- reward: gold</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Exp <B><font color="#00D">=</font></B> <B><font color="#079">1000</font></B>, <span> </span><font color="#009000">-- reward: experience</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>RewardItem <B><font color="#00D">=</font></B> <B><font color="#079">536</font></B>, <span> </span><font color="#009000">-- reward: Lucky Hat</font><br><B><font color="Black">}</font></B><br><br><font color="#009000">-- this will hide the standard topic in slot B</font><br>Quest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Slot <B><font color="#00D">=</font></B> B,<br><B><font color="Black">}</font></B><br><br><font color="#009000">-- this will hide the standard topic in slot C</font><br>Quest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Slot <B><font color="#00D">=</font></B> C,<br><B><font color="Black">}</font></B><br><br><font color="#009000">-- this topic is shown only when the quest is taken</font><br>Quest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Slot <B><font color="#00D">=</font></B> C,<br><span style="display: inline-block; width: 2ch;">&#9;</span>CanShow <B><font color="#00D">=</font></B> <B><font color="Black">|</font></B><B><font color="Black">|</font></B> Q.ExampleQuest <B><font color="#333">==</font></B> <font color="#90A">&quot;Given&quot;</font>, <span> </span><font color="#009000">-- a check that the quest is taken (short function!)</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- Short function syntax language extension translates this into:</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- CanShow = function()</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- <span style="display: inline-block; width: 2ch;">&#9;</span>return Q.ExampleQuest == &quot;Given&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- end,</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Reverse Engineering&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Ungive <B><font color="#00D">=</font></B> <font color="#90A">&quot;If you bring me the sword, I can reverse-engineer it and make its copies. To tell you the truth, everything here is reverse-engineered.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B>,<br><B><font color="Black">}</font></B><br><br><font color="#009000">-- this topic is shown only when the quest is done in place of the topic above (sell swords)</font><br>Quest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Slot <B><font color="#00D">=</font></B> C,<br><span style="display: inline-block; width: 2ch;">&#9;</span>CanShow <B><font color="#00D">=</font></B> <B><font color="Black">|</font></B><B><font color="Black">|</font></B> Q.ExampleQuest <B><font color="#333">==</font></B> <font color="#90A">&quot;Done&quot;</font>, <span> </span><font color="#009000">-- a check that the quest is finished (short function!)</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Buy Longsword for 50 gold&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Done <B><font color="#00D">=</font></B> <font color="#90A">&quot;Here's a sword I made for you!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Undone <B><font color="#00D">=</font></B> <font color="#90A">&quot;No money - no Longsword, honey.&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>NeverGiven <B><font color="#00D">=</font></B> <B><font color="#079">true</font></B>, <span> </span><font color="#009000">-- skip &quot;Given&quot; state, perform Done/Undone check immediately</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>NeverDone <B><font color="#00D">=</font></B> <B><font color="#079">true</font></B>, <span> </span><font color="#009000">-- sell any number of swords. This makes the quest completable mutiple times</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>QuestGold <B><font color="#00D">=</font></B> <B><font color="#079">50</font></B>, <span> </span><font color="#009000">-- pay: 50 gold</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>RewardItem <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B>, <span> </span><font color="#009000">-- reward: Longsword</font><br><B><font color="Black">}</font></B><br><br><font color="#009000">--[[</font><br><br><font color="#009000">Other Quest properties:</font><br><span> </span><font color="#009000">StdTopic <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- use the standard topic with specified number. For example, a trainer topic or &quot;Join&quot; topic.</font><br><span> </span><font color="#009000">StdTopicGiven, StdTopicDone <span> </span>-- similarly, standard topics specific to Given and Done states.</font><br><span> </span><font color="#009000">FirstStdTopic <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- standard topics specific to initial (ungiven) state.</font><br><span> </span><font color="#009000">Quest <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- quest number in quests.txt, by default it's allocated automatically</font><br><span> </span><font color="#009000">BaseName <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- for quests that require you to go from one NPC to another. Setting BaseName makes two quests share the same quest state defined by BaseName. See &quot;Quest With 2 NPCs.lua&quot;.</font><br><span> </span><font color="#009000">GivenState <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- by default it's &quot;Given&quot;. This may be useful in a quest with many stages.</font><br><span> </span><font color="#009000">DoneState <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- by default it's &quot;Done&quot;. This may be useful in a quest with many stages.</font><br><br><font color="#009000">If you don't pass Slot, any slot not occupied by an MMExt quest will be chosen. If you pass &quot;same&quot; as Slot value, the last used slot will be reused.</font><br><br><br><font color="#009000">Localization:</font><br><font color="#009000">To generate localization template for all scripts, press Ctrl+F1, write</font><br><span> </span><font color="#009000">GenerateLocalization()</font><br><font color="#009000">and press Ctrl+Enter. It will generate the following items in Scripts\Localization folder:</font><br><span> </span><font color="#009000">Quests.txt <span> </span><span> </span>-- for quests</font><br><span> </span><font color="#009000">Common.txt <span> </span><span> </span>-- for strings passed to LocalizeAll function</font><br><span> </span><font color="#009000">Scripts.txt <span> </span>-- for strings passed to Localize function</font><br><font color="#009000">These files should be edited with Txt Tables Editor from my site.</font><br><font color="#009000">Alternatively, run GenerateLocalization(true) to generate *.lua localization files. Choose whichever format you prefer.</font><br><font color="#009000">To generate localization for quests only you can use GenerateQuestsLocalization() instead of GenerateLocalization() command.</font><br><font color="#009000">To generate localization excluding quests you can use GenerateLocalization(false, false) command.</font><br><font color="#009000">Note that GenerateLocalization function assumes your scripts contain up to 1 use of LocalizeAll and up to 1 use of Localize function, both of which are at the beginning of the script.</font><br><br><font color="#009000">To test localization changes without restarting the game you can create a script in Globals folder with this line:</font><br><span> </span><font color="#009000">ReloadLocalization()</font><br><font color="#009000">Then you'll only need to reload a saved game to refresh localization.</font><br><br><br><font color="#009000">For more complex quests you can set up the following functions:</font><br><font color="#009000">(here 't' is the table that you passed to the Quest function, it also has some new fields set by Quest function)</font><br><br><font color="#009000">Checks (return value is interpreted as true or false):</font><br><span> </span><font color="#009000">CanShow(t)</font><br><span> </span><font color="#009000">CheckGive(t)</font><br><span> </span><font color="#009000">CheckDone(t)</font><br><br><font color="#009000">Called on corresponding events:</font><br><span> </span><font color="#009000">Give(t)</font><br><span> </span><font color="#009000">Ungive(t)</font><br><span> </span><font color="#009000">Done(t)</font><br><span> </span><font color="#009000">Undone(t)</font><br><br><font color="#009000">For complete control - these will override default behavior:</font><br><span> </span><font color="#009000">GetGreeting(t, NotFirstVisit)</font><br><span> </span><font color="#009000">GetTopic(t)</font><br><span> </span><font color="#009000">Execute(t)</font><br><span> </span><font color="#009000">IsGiven(t)</font><br><br><font color="#009000">GetGreeting and GetTopic functions return a string.</font><br><br><font color="#009000">Note that you can also make custom quest states. Say, you have a quest called MyQuest. If you set vars.Quests.MyQuest = &quot;MyState&quot;, Texts.TopicMyState (or StdTopicMyState) will be displayed. When you click it, Texts.MyState will be displayed and MyState function will be called.</font><br><br><font color="#009000">]]</font><br></div></div><label class="spoiler-label" for="spoiler2"></label><span class="spoiler-fade"></span></div>
<b>Quest With 2 NPCs.lua</b> 
is an example of a quest that requires going to another NPC.

<div class="spoiler"><input class="spoiler-checkbox" type="checkbox" id="spoiler3"/><div class="spoiler-scroll"><div class="spoiler-space"></div><div class="pre-spoiler"><B><font color="#00D">local</font></B> A, B, C, D, E, F <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B>, <B><font color="#079">1</font></B>, <B><font color="#079">2</font></B>, <B><font color="#079">3</font></B>, <B><font color="#079">4</font></B>, <B><font color="#079">5</font></B><br><B><font color="#00D">local</font></B> Q <B><font color="#00D">=</font></B> vars.Quests<br><br><font color="#009000">--[[</font><br><font color="#009000">This is an example of a quest that requires you to go from one NPC to another.</font><br><font color="#009000">Also demonstrates usage of StdTopic to make NPC join the party.</font><br><font color="#009000">Like in Quest Example.lua, short function syntax addon is utilized.</font><br><font color="#009000">--]]</font><br><br><br>QuestNPC <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B> <span> </span><font color="#009000">-- The lizard in the tavern</font><br><br><font color="#009000">-- quest start: take the quest in the tavern</font><br>Quest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;PowerStone&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Slot <B><font color="#00D">=</font></B> D,<br><span style="display: inline-block; width: 2ch;">&#9;</span>GivenItem <B><font color="#00D">=</font></B> <B><font color="#079">617</font></B>, <span> </span><font color="#009000">-- gives Power Stone upon giving the task</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>CheckDone <B><font color="#00D">=</font></B> <B><font color="#079">false</font></B>, <span> </span><font color="#009000">-- the quest can't be completed here</font><br><B><font color="Black">}</font></B><br>.SetTexts<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Frederick Talimere&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>TopicDone <B><font color="#00D">=</font></B> <B><font color="#079">false</font></B>, <span> </span><font color="#009000">-- don't show if it's done</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Give <B><font color="#00D">=</font></B> <font color="#90A">&quot;Show this stone to Frederick Talimere. He will be interested.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Undone <B><font color="#00D">=</font></B> <font color="#90A">&quot;Yes, just a stone. Frederick is obsessed with these stones. What a fool...&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span>Quest <B><font color="#00D">=</font></B> <font color="#90A">&quot;Show a stone to Frederick Talimere in Dagger Wound Islands.&quot;</font>,<br><B><font color="Black">}</font></B><br><br><br><br>QuestNPC <B><font color="#00D">=</font></B> <B><font color="#079">32</font></B> <span> </span><font color="#009000">-- Frederick Talimere</font><br><br><font color="#009000">-- quest end: talk to Frederick to get the stone</font><br>Quest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>BaseName <B><font color="#00D">=</font></B> <font color="#90A">&quot;PowerStone&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Slot <B><font color="#00D">=</font></B> D,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Exp <B><font color="#00D">=</font></B> <B><font color="#079">1000</font></B>, <span> </span><font color="#009000">-- reward: experience</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>QuestItem <B><font color="#00D">=</font></B> <B><font color="#079">617</font></B>, <span> </span><font color="#009000">-- need Power Stone</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>KeepQuestItem <B><font color="#00D">=</font></B> <B><font color="#079">true</font></B>, <span> </span><font color="#009000">-- don't take power stone away</font><br><B><font color="Black">}</font></B><br>.SetTexts<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- no Topic - don't show the topic if the quest isn't taken</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>TopicGiven <B><font color="#00D">=</font></B> <font color="#90A">&quot;Power Stone&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>TopicDone <B><font color="#00D">=</font></B> <font color="#90A">&quot;Power Stone&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Done <B><font color="#00D">=</font></B> <font color="#90A">&quot;Wow, this is a stone! I love stones!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Undone <B><font color="#00D">=</font></B> <font color="#90A">&quot;One lizard told me you have a stone, and so do I. Why don't you show me yours and I'll show you mine?&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>After <B><font color="#00D">=</font></B> <font color="#90A">&quot;I have about 30 of these stones. You know what, let's go looking for stones together! But I need to get a sword first. Because who knows, we might meet some enemies on our way. With a sword in my hands I'll look more persuasive and will calm down any enemy. Trust me, negotiations are my thing!&quot;</font>,<br><B><font color="Black">}</font></B><br><br><font color="#009000">-- show Join topic when both example quests are completed</font><br>Quest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Slot <B><font color="#00D">=</font></B> D,<br><span style="display: inline-block; width: 2ch;">&#9;</span>StdTopic <B><font color="#00D">=</font></B> <B><font color="#079">602</font></B>, <span> </span><font color="#009000">-- Join topic of Frederick Talimere</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>CanShow <B><font color="#00D">=</font></B> <B><font color="Black">|</font></B><B><font color="Black">|</font></B> Q.PowerStone <B><font color="#333">==</font></B> <font color="#90A">&quot;Done&quot;</font> <B><font color="Black">and</font></B> Q.SimpleExampleQuest <B><font color="#333">==</font></B> <font color="#90A">&quot;Done&quot;</font>,<br><B><font color="Black">}</font></B><br></div></div><label class="spoiler-label" for="spoiler3"></label><span class="spoiler-fade"></span></div>
<b>Quest Alchemy.lua</b> 
demonstrates a quest similar to "collect ingredients for a potion" quests with a little extra twist.

<div class="spoiler"><input class="spoiler-checkbox" type="checkbox" id="spoiler4"/><div class="spoiler-scroll"><div class="spoiler-space"></div><div class="pre-spoiler"><B><font color="#00D">local</font></B> A, B, C, D, E, F <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B>, <B><font color="#079">1</font></B>, <B><font color="#079">2</font></B>, <B><font color="#079">3</font></B>, <B><font color="#079">4</font></B>, <B><font color="#079">5</font></B><br><br><font color="#009000">--[[</font><br><font color="#009000">This is an example of an alchemic quest like those seen in MM8. It works smarter by removing weaker ingredients first.</font><br><font color="#009000">It replaces default quest of Thistle that normally makes a Potion of Pure Speed.</font><br><font color="#009000">Like the example with 2 NPCs, it uses BaseName property to make a cross-topic quest easily.</font><br><font color="#009000">Then there is some stuff just for fun: I reinitiate a conversation 2 minutes after the quest is completed and show some text.</font><br><font color="#009000">--]]</font><br><br>QuestNPC <B><font color="#00D">=</font></B> <B><font color="#079">88</font></B> <span> </span><font color="#009000">-- Thistle</font><br><br><br>Quest<B><font color="Black">{</font></B> <span> </span><font color="#009000">-- Get quest</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;StreetAlchemy&quot;</font>,<br><B><font color="Black">}</font></B><br>.SetTexts<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>FirstTopic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Street Alchemy&quot;</font>, <span> </span><font color="#009000">-- only show if it isn't given</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Give <B><font color="#00D">=</font></B> <font color="#90A">&quot;Hey! Hey fellas! I'm chronicling a Street Alchemy special. You wanna see some alchemy?&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Quest <B><font color="#00D">=</font></B> <font color="#90A">&quot;Bring Thistle on the Dagger Wound Islands the basic ingredients for a Potion of Disappearance.&quot;</font>,<br><B><font color="Black">}</font></B><br><br><br>NPCTopic<B><font color="Black">{</font></B> <span> </span><font color="#009000">-- Ingredients topic</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Ingredients&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Ultimate Potions are made of a complex blending of the three basic ingredients: Swords, Boots and Armor. Potion of Disappearance requires 6 Longswords, 2 pairs of boots and 2 leather armors.&quot;</font><br><B><font color="Black">}</font></B><br><br><br>Quest<B><font color="Black">{</font></B> <span> </span><font color="#009000">-- Finish quest</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>BaseName <B><font color="#00D">=</font></B> <font color="#90A">&quot;StreetAlchemy&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>QuestItem <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">{</font></B><B><font color="#079">1</font></B>,<B><font color="#079">2</font></B>,<B><font color="#079">3</font></B>,<B><font color="#079">4</font></B>,<B><font color="#079">5</font></B>, Count <B><font color="#00D">=</font></B> <B><font color="#079">6</font></B><B><font color="Black">}</font></B>, <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- all kinds of Longswords, 6 in total</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">{</font></B><B><font color="#079">132</font></B>,<B><font color="#079">133</font></B>,<B><font color="#079">134</font></B>,<B><font color="#079">135</font></B>,<B><font color="#079">136</font></B>, Count <B><font color="#00D">=</font></B> <B><font color="#079">2</font></B><B><font color="Black">}</font></B>, <span> </span><font color="#009000">-- all kinds of Boots, 2 in total</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">{</font></B><B><font color="#079">84</font></B>,<B><font color="#079">85</font></B>,<B><font color="#079">86</font></B>,<B><font color="#079">87</font></B>,<B><font color="#079">88</font></B>, Count <B><font color="#00D">=</font></B> <B><font color="#079">2</font></B><B><font color="Black">}</font></B>, <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><font color="#009000">-- all kinds of Leather Armor, 2 in total</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Exp <B><font color="#00D">=</font></B> <B><font color="#079">1000</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>RewardItem <B><font color="#00D">=</font></B> <B><font color="#079">535</font></B>, <span> </span><font color="#009000">-- Ring of Fusion</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Done <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Inventory&quot;</font>, <B><font color="#079">220</font></B>) <span> </span><font color="#009000">-- add an empty bottle to make it appear as if it's the reward</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- now make him speak to us again after some time</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> npc <B><font color="#00D">=</font></B> QuestNPC <span> </span><font color="#009000">-- QuestNPC is set to NPC being spoken to in a dialog</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Sleep(const.Minute<B><font color="#333">*</font></B><B><font color="#079">3</font></B>, <B><font color="#079">nil</font></B>, <B><font color="Black">{</font></B><B><font color="#079">0</font></B><B><font color="Black">}</font></B>) <span> </span><font color="#009000">-- sleep for 3 minutes and only wake up when no dialog is active (hence, the 3rd parameter)</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.SpeakNPC(npc)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">}</font></B><br>.SetTexts<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>TopicGiven <B><font color="#00D">=</font></B> <font color="#90A">&quot;Do you have the Ingredients?&quot;</font>, <span> </span><font color="#009000">-- only show if it's given</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Done <B><font color="#00D">=</font></B> <font color="#90A">&quot;Hey look, the Potion of Disappearance has disappeared! Take this empty bottle, it's yours now.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Undone <B><font color="#00D">=</font></B> <font color="#90A">&quot;You are missing all or some of the needed ingredients. Remember, to make a Potion of Disappearance I need 6 Longswords, 2 pairs of boots and 2 leather armors.&quot;</font>,<br><B><font color="Black">}</font></B><br><br><br>Quest<B><font color="Black">{</font></B> <span> </span><font color="#009000">-- Instead of Ingredients topic</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>Slot <B><font color="#00D">=</font></B> B,<br><span style="display: inline-block; width: 2ch;">&#9;</span>CanShow <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> Game.CurrentScreen <B><font color="#333">~=</font></B> const.Screens.House <span> </span><font color="#009000">-- only show if NPC was met on the street</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B>,<br><B><font color="Black">}</font></B><br>.SetTexts<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Greet <B><font color="#00D">=</font></B> <font color="#90A">&quot;I think there's something in your backpack...&quot;</font>,<br><B><font color="Black">}</font></B></div></div><label class="spoiler-label" for="spoiler4"></label><span class="spoiler-fade"></span></div>
<b>Quest Kill Monsters.lua</b> 
has two <a href="#KillMonstersQuest">"kill monsters"</a> quests, MMExtension supports them natively so you don't have to add all the checks for slain monsters into effected maps.

<div class="spoiler"><input class="spoiler-checkbox" type="checkbox" id="spoiler5"/><div class="spoiler-scroll"><div class="spoiler-space"></div><div class="pre-spoiler"><font color="#009000">--[[</font><br><font color="#009000">These are 2 example quests that require killing multiple kinds of monsters.</font><br><font color="#009000">Go to the Clan Leader's Hall in Dagger Wound to see the quests in action.</font><br><font color="#009000">--]]</font><br><br>QuestNPC <B><font color="#00D">=</font></B> <B><font color="#079">182</font></B> <span> </span><font color="#009000">-- Dirthic, an empty NPC in a house on an island</font><br><br>evt.MoveNPC(QuestNPC, <B><font color="#079">173</font></B>) <span> </span><font color="#009000">-- move him to Clan Leader's Hall</font><br><br><br><font color="#009000">-- Quest 1: Kill all pirates</font><br>KillMonstersQuest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- quest name is optional</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">{</font></B>Map <B><font color="#00D">=</font></B> <font color="#90A">&quot;out01.odm&quot;</font>, Monster <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><B><font color="#079">181</font></B>, <B><font color="#079">182</font></B>, <B><font color="#079">183</font></B><B><font color="Black">}</font></B><B><font color="Black">}</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span>Exp <B><font color="#00D">=</font></B> <B><font color="#079">2000</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Gold <B><font color="#00D">=</font></B> <B><font color="#079">2000</font></B>,<br><B><font color="Black">}</font></B><br>.SetTexts<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Greet <B><font color="#00D">=</font></B> <font color="#90A">&quot;Hi there!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Pirates!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Give <B><font color="#00D">=</font></B> <font color="#90A">&quot;Kill all da Pirates on Dagger Wound Islands.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Done <B><font color="#00D">=</font></B> <font color="#90A">&quot;It's great that you've killed them! 2000 gold for you.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Undone <B><font color="#00D">=</font></B> <font color="#90A">&quot;Just kill 'em, ok?&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>TopicDone <B><font color="#00D">=</font></B> <B><font color="#079">false</font></B>, <span> </span><font color="#009000">-- hide the topic when the quest is completed</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span>Quest <B><font color="#00D">=</font></B> <font color="#90A">&quot;Kill all Pirates on Dagger Wound Islands. Return to Dirthic in Clan Leader's Hall.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Killed <B><font color="#00D">=</font></B> <font color="#90A">&quot;You have killed all Pirates!&quot;</font>, <span> </span><font color="#009000">-- completion message</font><br><B><font color="Black">}</font></B><br><br><br><font color="#009000">-- Quest 2: Kill all creatures in Abandoned Temple</font><br>KillMonstersQuest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;ClearAbandonedTemple&quot;</font>, <span> </span><font color="#009000">-- quest name</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">{</font></B>Map <B><font color="#00D">=</font></B> <font color="#90A">&quot;d05.blv&quot;</font>, Monster <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><B><font color="#079">7</font></B>, <B><font color="#079">8</font></B>, <B><font color="#079">9</font></B><B><font color="Black">}</font></B><B><font color="Black">}</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;You have killed all Couatls! Serpentmen are yet to be killed.&quot;</font>, <span> </span><font color="#009000">-- partial completion message (optional)</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">{</font></B>Map <B><font color="#00D">=</font></B> <font color="#90A">&quot;d05.blv&quot;</font>, Monster <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><B><font color="#079">94</font></B>, <B><font color="#079">95</font></B>, <B><font color="#079">96</font></B><B><font color="Black">}</font></B><B><font color="Black">}</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;You have killed all Serpentmen! Some Couatls are alive.&quot;</font>, <span> </span><font color="#009000">-- partial completion message (optional)</font><br><br><span style="display: inline-block; width: 2ch;">&#9;</span>Exp <B><font color="#00D">=</font></B> <B><font color="#079">5000</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Gold <B><font color="#00D">=</font></B> <B><font color="#079">5000</font></B>,<br><B><font color="Black">}</font></B><br>.SetTexts<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Snakes!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Give <B><font color="#00D">=</font></B> <font color="#90A">&quot;Kill all of them creatures in Abandoned Temple.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Done <B><font color="#00D">=</font></B> <font color="#90A">&quot;It's great that you've killed them! 5000 gold for you.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Undone <B><font color="#00D">=</font></B> <font color="#90A">&quot;Just kill 'em, ok?&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>TopicDone <B><font color="#00D">=</font></B> <B><font color="#079">false</font></B>, <span> </span><font color="#009000">-- hide the topic when the quest is completed</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span>Quest <B><font color="#00D">=</font></B> <font color="#90A">&quot;Kill all creatures in Abandoned Temple. Return to Dirthic in Clan Leader's Hall.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Killed <B><font color="#00D">=</font></B> <font color="#90A">&quot;You have killed all Couatls and Serpentmen!&quot;</font>, <span> </span><font color="#009000">-- completion message</font><br><B><font color="Black">}</font></B><br><br><font color="#009000">--[[</font><br><font color="#009000">KillMonstersQuest function takes a list of tasks that it checks with CheckMonstersKilled.</font><br><font color="#009000">Here are ways of using CheckMonstersKilled:</font><br><span> </span><font color="#009000">CheckMonstersKilled{} <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- killed all monsters on the map?</font><br><span> </span><font color="#009000">CheckMonstersKilled{Group = 1} <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- killed all monsters belonging to group 1?</font><br><span> </span><font color="#009000">CheckMonstersKilled{Monster = 7} <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- killed all monsters of kind 7 (Young Couatl)?</font><br><span> </span><font color="#009000">CheckMonstersKilled{NameId = 3} <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- killed all monsters with NameId = 3 in placemon.txt (Dragon Hunter Pet)?</font><br><span> </span><font color="#009000">CheckMonstersKilled{MonsterIndex = 5} <span> </span>-- killed monster with index 5 in Map.Monsters array?</font><br><font color="#009000">Instead of a single number you can pass a table with numbers, like I do in this example.</font><br><font color="#009000">Additonal parameters:</font><br><span> </span><font color="#009000">Count <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span>-- need to kill at least this many monsters</font><br><span> </span><font color="#009000">InvisibleAsDead <span> </span><span> </span>-- treat invisible (that is, currently disabled) monsters as dead when counting (MM8 only. 'true' by default)</font><br><br><font color="#009000">MM6 currently isn't supported, because it doesn't have evt.CheckMonstersKilled command. InvisibleAsDead = false is only supported in MM8.</font><br><br><font color="#009000">KillMonstersQuest tasks have an extra required Map parameter. A quest can span across multiple maps.</font><br><br><font color="#009000">You can specify partial completion messages. They are placed after a group of tasks. For example:</font><br><font color="#009000">{task1},</font><br><font color="#009000">{task2},</font><br><font color="#009000">{task3},</font><br><font color="#009000">&quot;first 3 tasks done&quot;,</font><br><font color="#009000">{task4},</font><br><font color="#009000">{task5},</font><br><font color="#009000">&quot;tasks 4 and 5 done&quot;,</font><br><font color="#009000">{task6},</font><br><font color="#009000">&quot;task 6 done&quot;,</font><br><br><font color="#009000">KillMonstersQuest adds completion messages to Texts under names Killed1, Killed2, Killed3 and so on, for localization.</font><br><br><font color="#009000">KillMonstersQuest supports all parameters of Quest function. It sets Quest parameter to 'true' if it isn't specified.</font><br><font color="#009000">]]</font></div></div><label class="spoiler-label" for="spoiler5"></label><span class="spoiler-fade"></span></div>
<b>Multilevel Quest.lua</b> 
is a complex tree-style dialog, yet elegant in execution. <a href="#QuestBranch">QuestBranch</a> function is utilized.

<div class="spoiler"><input class="spoiler-checkbox" type="checkbox" id="spoiler6"/><div class="spoiler-scroll"><div class="spoiler-space"></div><div class="pre-spoiler"><B><font color="#00D">local</font></B> A, B, C, D, E, F <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B>, <B><font color="#079">1</font></B>, <B><font color="#079">2</font></B>, <B><font color="#079">3</font></B>, <B><font color="#079">4</font></B>, <B><font color="#079">5</font></B><br><br><font color="#009000">--[[</font><br><font color="#009000">This example demonstrates a complex branched dialog.</font><br><font color="#009000">It isn't too easy to understand, but it's elegant.</font><br><font color="#009000">It also shows how you can have item name as topic name and some other bells and whistles.</font><br><font color="#009000">Go to the Clan Leader's Hall in Dagger Wound to see it in action.</font><br><font color="#009000">--]]</font><br><br><B><font color="#00D">local</font></B> MyNPC <B><font color="#00D">=</font></B> <B><font color="#079">2</font></B> <span> </span><font color="#009000">-- Dadeross in the lizards tavern</font><br><br><font color="#009000">-- For fun: play sound when entering the conversation</font><br><B><font color="Black">function</font></B> events.EnterNPC(npc)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> npc <B><font color="#333">==</font></B> MyNPC <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Game.PlaySound(<B><font color="#079">130</font></B>) <span> </span><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B><br><br><B><font color="#00D">local</font></B> <B><font color="Black">function</font></B> SetBranch(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span>QuestBranch(t.NewBranch)<br><B><font color="Black">end</font></B><br><br><B><font color="#00D">local</font></B> <B><font color="Black">function</font></B> ItemTopic(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- return 'false' if the quest is given, which means the item is given away</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> <B><font color="Black">not</font></B> vars.Quests[t.Name] <B><font color="Black">and</font></B> Game.ItemsTxt[t.MyItem].Name<br><B><font color="Black">end</font></B><br><br><B><font color="#00D">local</font></B> <B><font color="Black">function</font></B> GiveItem(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.ForPlayer().Add(<font color="#90A">&quot;Inventory&quot;</font>, t.MyItem) <span> </span><font color="#009000">-- give item</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#009000">-- Game.PlaySound(205) <span> </span>-- make only sound</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Experience&quot;</font>, <B><font color="#079">0</font></B>) <span> </span><font color="#009000">-- make sound and animation</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.FaceAnimation(Game.CurrentPlayer, const.FaceAnimation.SmileHuge) <span> </span><font color="#009000">-- a happy face</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>QuestBranch(<font color="#90A">&quot;Thanks&quot;</font>)<br><B><font color="Black">end</font></B><br><br><font color="#009000">-- sipmlify similar quests creation</font><br><B><font color="#00D">local</font></B> QuestBase <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><B><font color="Black">}</font></B><br><B><font color="#00D">local</font></B> <B><font color="Black">function</font></B> MyQuest(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="Brown">table</font>.copy(QuestBase, t) <span> </span><font color="#009000">-- copy common values</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>QuestBase.Slot <B><font color="#00D">=</font></B> QuestBase.Slot <B><font color="Black">and</font></B> QuestBase.Slot <B><font color="#333">+</font></B> <B><font color="#079">1</font></B> <span> </span><font color="#009000">-- auto-increment Slot</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> Quest(t)<br><B><font color="Black">end</font></B><br><br><font color="#009000">--[[</font><br><font color="#009000">Now, let's get to the quests themselves.</font><br><br><font color="#009000">Dialog structure:</font><br><br><font color="#009000">- Weapons</font><br><span> </span><span> </span><font color="#009000">- Swords</font><br><span> </span><span> </span><span> </span><span> </span><font color="#009000">- Sword 1</font><br><span> </span><span> </span><span> </span><span> </span><font color="#009000">- Sword 2</font><br><span> </span><span> </span><span> </span><span> </span><font color="#009000">- Sword 3</font><br><span> </span><span> </span><font color="#009000">- Daggers</font><br><span> </span><span> </span><span> </span><span> </span><font color="#009000">- Dagger 1</font><br><span> </span><span> </span><font color="#009000">- Axes</font><br><span> </span><span> </span><span> </span><span> </span><font color="#009000">- Axe 1</font><br><span> </span><span> </span><span> </span><span> </span><font color="#009000">- Axe 2</font><br><span> </span><span> </span><span> </span><span> </span><font color="#009000">- Axe 3</font><br><span> </span><span> </span><font color="#009000">- Blasters</font><br><font color="#009000">- Magic</font><br><span> </span><span> </span><font color="#009000">- Book 1</font><br><span> </span><span> </span><font color="#009000">- Book 2</font><br><span> </span><span> </span><font color="#009000">- Book 3</font><br><span> </span><span> </span><font color="#009000">- Book 4</font><br><font color="#009000">- Dadeross' Letter to Fellmoon</font><br><font color="#009000">- Certificate of Authentication (for Axe of Balthazar)</font><br><font color="#009000">(+ Thanks screen)</font><br><font color="#009000">]]</font><br><br>QuestNPC <B><font color="#00D">=</font></B> MyNPC<br><br><font color="#009000">-- greeting</font><br><br>Greeting<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;I'm placed here to give you free stuff.&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Please choose your free stuff.&quot;</font>,<br><B><font color="Black">}</font></B><br><br><font color="#009000">-- default topics</font><br><br>QuestBase <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B>Slot <B><font color="#00D">=</font></B> A<B><font color="Black">}</font></B><br><br><font color="#009000">-- get rid of standard topics of this NPC</font><br>MyQuest<B><font color="Black">{</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B><B><font color="Black">}</font></B><br><font color="#009000">-- A topic that's shown when there are no items left. This one is a bit hackish.</font><br><font color="#009000">-- Since the quest-matching function goes from slot A to slot F, by the time it</font><br><font color="#009000">-- asks for topic in slot F it has done all other slots. So, I check that these</font><br><font color="#009000">-- slots have no topics and then enable the topic of this slot</font><br>MyQuest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Ungive <B><font color="#00D">=</font></B> SetBranch,<br><span style="display: inline-block; width: 2ch;">&#9;</span>NewBranch <B><font color="#00D">=</font></B> <font color="#90A">&quot;&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>GetTopic <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> i <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B>, <B><font color="#079">4</font></B> <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> Game.NPC[MyNPC].Events[i] <B><font color="#333">~=</font></B> <B><font color="#079">0</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> t.Texts.Topic<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Sorry, I don't have any of these&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Ungive <B><font color="#00D">=</font></B> <font color="#90A">&quot;Sorry, I don't have any of these. Maybe you want something else?&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B><br><B><font color="Black">}</font></B><br><br><font color="#009000">-- base branch topics</font><br><br>QuestBase <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B>Branch <B><font color="#00D">=</font></B> <font color="#90A">&quot;&quot;</font>, Slot <B><font color="#00D">=</font></B> A, Ungive <B><font color="#00D">=</font></B> SetBranch<B><font color="Black">}</font></B><br><br>MyQuest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>NewBranch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Weapons&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Weapons&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Ungive <B><font color="#00D">=</font></B> <font color="#90A">&quot;Choose which you prefer.&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B><br><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>NewBranch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Magic&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Magic&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Ungive <B><font color="#00D">=</font></B> <font color="#90A">&quot;I have a few books.&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B><br><B><font color="Black">}</font></B><br><br><font color="#009000">-- Weapons branch</font><br><br>QuestBase <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B>Branch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Weapons&quot;</font>, Slot <B><font color="#00D">=</font></B> A, Ungive <B><font color="#00D">=</font></B> SetBranch<B><font color="Black">}</font></B><br><br>MyQuest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>NewBranch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Swords&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Swords&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B><br><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>NewBranch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Daggers&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Daggers&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B><br><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>NewBranch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Axes&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Axes&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B><br><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>NewBranch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Blasters&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Topic <B><font color="#00D">=</font></B> <font color="#90A">&quot;Blasters&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B><br><B><font color="Black">}</font></B><br><br><font color="#009000">-- Swords branch</font><br><br>QuestBase <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Branch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Swords&quot;</font>, Slot <B><font color="#00D">=</font></B> A,<br><span style="display: inline-block; width: 2ch;">&#9;</span>GetTopic <B><font color="#00D">=</font></B> ItemTopic,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Give <B><font color="#00D">=</font></B> GiveItem,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Texts <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Give <B><font color="#00D">=</font></B> <font color="#90A">&quot;Use it well!&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">}</font></B><br><B><font color="Black">}</font></B><br><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">10</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">502</font></B><B><font color="Black">}</font></B><br><br><font color="#009000">-- Daggers branch</font><br><br>QuestBase <B><font color="#00D">=</font></B> <font color="Brown">table</font>.copy(QuestBase, <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Branch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Daggers&quot;</font>, Slot <B><font color="#00D">=</font></B> A,<br><B><font color="Black">}</font></B>)<br><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">508</font></B><B><font color="Black">}</font></B><br><br><font color="#009000">-- Axes branch</font><br><br>QuestBase <B><font color="#00D">=</font></B> <font color="Brown">table</font>.copy(QuestBase, <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Branch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Axes&quot;</font>, Slot <B><font color="#00D">=</font></B> A,<br><B><font color="Black">}</font></B>)<br><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">34</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">37</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">541</font></B><B><font color="Black">}</font></B><br><br><font color="#009000">-- Magic branch</font><br><br>QuestBase <B><font color="#00D">=</font></B> <font color="Brown">table</font>.copy(QuestBase, <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Branch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Magic&quot;</font>, Slot <B><font color="#00D">=</font></B> A,<br><B><font color="Black">}</font></B>)<br><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">460</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">430</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">444</font></B><B><font color="Black">}</font></B><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">404</font></B><B><font color="Black">}</font></B><br><br><font color="#009000">-- Letter and Certificate of Authentication items in main branch</font><br><br>QuestBase <B><font color="#00D">=</font></B> <font color="Brown">table</font>.copy(QuestBase, <B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Branch <B><font color="#00D">=</font></B> <font color="#90A">&quot;&quot;</font>, Slot <B><font color="#00D">=</font></B> C,<br><B><font color="Black">}</font></B>)<br><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">741</font></B><B><font color="Black">}</font></B> <span> </span><font color="#009000">-- Dadeross' Letter to Fellmoon</font><br>MyQuest<B><font color="Black">{</font></B>MyItem <B><font color="#00D">=</font></B> <B><font color="#079">732</font></B>, <span> </span><font color="#009000">-- Certificate of Authentication</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>CanShow <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>()<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> evt.All.Cmp(<font color="#90A">&quot;Inventory&quot;</font>, <B><font color="#079">541</font></B>) <span> </span><font color="#009000">-- check for Axe of Balthazar</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">}</font></B><br><br><font color="#009000">-- Thanks branch</font><br><br>NPCTopic<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Branch <B><font color="#00D">=</font></B> <font color="#90A">&quot;Thanks&quot;</font>, Slot <B><font color="#00D">=</font></B> A,<br><span style="display: inline-block; width: 2ch;">&#9;</span>Ungive <B><font color="#00D">=</font></B> SetBranch,<br><span style="display: inline-block; width: 2ch;">&#9;</span>NewBranch <B><font color="#00D">=</font></B> <font color="#90A">&quot;&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Thanks!&quot;</font>,<br><span style="display: inline-block; width: 2ch;">&#9;</span><font color="#90A">&quot;Maybe you want something else?&quot;</font>,<br><B><font color="Black">}</font></B><br><br><font color="#009000">--[[</font><br><font color="#009000">Here's how dialog branches work:</font><br><br><font color="#009000">A quest with Branch field is only shown if that's the current branch.</font><br><br><font color="#009000">Current branch can be set with QuestBranch function:</font><br><span> </span><font color="#009000">QuestBranch(&quot;BranchName&quot;)</font><br><font color="#009000">You can also make the branch persist after you reenter NPC dialog:</font><br><span> </span><font color="#009000">QuestBranch(&quot;BranchName&quot;, true)</font><br><font color="#009000">Or you can obtain current branch:</font><br><span> </span><font color="#009000">local branch = QuestBranch()</font><br><br><font color="#009000">If there is no persisted branch name, when you enter NPC dialog the branch is set to &quot;&quot;.</font><br><br><font color="#009000">Branches support is really simple. Previous version of this example implemented it manually.</font><br><font color="#009000">]]</font></div></div><label class="spoiler-label" for="spoiler6"></label><span class="spoiler-fade"></span></div>
Some examples also work in MM7 if you find the NPCs they operate on. As for MM6, it lacks NPC greetings and only has 3 dialog topics, plus two text-only topics. The first quest should work in it.

<br>
<br>

<a name="Localization"></a><h3>Localization</h3>
In order to make a script localizeable you should call <a href="#Localize">Localize</a> function in it, passing a table with default strings. The function will return a table with localized strings. See 
 
<a href="#LocalizeScriptExample">an example above</a>.<br>

For strings shared by multiple scripts you should use <a href="#LocalizeAll">LocalizeAll</a> function which works the same way, but normally you should only use the table returned by <a href="#Localize">Localize</a>. It automatically falls back to common localization strings if there is no script-specific one.<br>
Also note that you aren't limited to strings, localization table can contain any values, including subtables.<br>
Quests are localized automatically.


<br>
<br>
Localization is very much automated. <a href="#GenerateLocalization">GenerateLocalization()</a> function automatically extracts localization information from all scripts and generates localization files. It requires scripts in <b>Maps</b> and <b>Modules</b> folders not to do anything prior to calling <a href="#Localize">Localize</a> and/or <a href="#LocalizeAll">LocalizeAll</a> functions. Also, each function should be called at most once per script, otherwise strings passed in subsequent calls may get ignored.

<br>
To generate localization files for all scripts, load any game, press Ctrl+F1, write <b>GenerateLocalization()</b> and press Ctrl+Enter. It will generate the following files in <b>Scripts\Localization</b> folder:

<table class="table" border="1" bordercolor="#a5a5a5" cellpadding="5" cellspacing="0">
<tbody>
	<td><i>&nbsp;File</i></td><td><i>&nbsp;Description</i></td>
	<tr><td>Quests.txt</td><td>Quests localization.</td></tr>
	<tr><td>Common.txt</td><td>Strings passed to <a href="#LocalizeAll">LocalizeAll</a> function.</td></tr>
	<tr><td>Scripts.txt</td><td>Strings passed to <a href="#Localize">Localize</a> function.</td></tr>
</tbody>
</table>
 These files should be edited with <a href="https://sites.google.com/site/sergroj/wog/TxtEdit.rar">Txt Tables Editor</a>.<br>
 Alternatively, you can run <b>GenerateLocalization(true)</b> to generate <b class="def-param">*.lua</b> localization files. Choose whichever format you prefer.
<br>
 To generate localization only for quests you can use <a href="#GenerateQuestsLocalization">GenerateQuestsLocalization()</a> command.<br>
To generate localization excluding quests you can use <b>GenerateLocalization(false, false)</b> command.

<br>
<br>
 To test localization changes without restarting the game you can create a script in <b>Global</b> folder with this line:

<br>
<div class="pre-outer"><div class="pre">ReloadLocalization()</div></div>
 Then you'll only need to reload a saved game to test localization changes.

<br>
<br>


<br>
<hr>
<a name="Examples"></a><h2>Examples</h2>

<a name="Players-Skills-And-Spells"></a><h3>Players Skills And Spells</h3>
Below are some scripts demonstrating how you can work with skills and spells. You can test them by pasting the one you like into debug console.<br>

<div class="pre-outer"><div class="pre"><font color="#009000">-- learn all spells</font><br><B><font color="Black">for</font></B> _, pl <B><font color="Black">in</font></B> Party <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> i <B><font color="Black">in</font></B> pl.Spells <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>pl.Spells[i] <B><font color="#00D">=</font></B> <B><font color="#079">true</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<div class="pre-outer"><div class="pre"><font color="#009000">-- give Expert Perception for all players</font><br><B><font color="Black">for</font></B> _, pl <B><font color="Black">in</font></B> Party <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> skill, mastery <B><font color="#00D">=</font></B> SplitSkill(pl.Skills[const.Skills.Perception])<br><span style="display: inline-block; width: 2ch;">&#9;</span>pl.Skills[const.Skills.Perception] <B><font color="#00D">=</font></B> JoinSkill(<font color="Brown">math</font>.<font color="Brown">max</font>(skill, <B><font color="#079">4</font></B>), <font color="Brown">math</font>.<font color="Brown">max</font>(mastery, const.Expert))<br><B><font color="Black">end</font></B></div></div>
<div class="pre-outer"><div class="pre"><font color="#009000">-- get all skills at Master 12</font><br><B><font color="Black">for</font></B> _, pl <B><font color="Black">in</font></B> Party <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> i, val <B><font color="Black">in</font></B> pl.Skills <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> skill, mastery <B><font color="#00D">=</font></B> SplitSkill(val)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>pl.Skills[i] <B><font color="#00D">=</font></B> JoinSkill(<font color="Brown">math</font>.<font color="Brown">max</font>(skill, <B><font color="#079">12</font></B>), <font color="Brown">math</font>.<font color="Brown">max</font>(mastery, const.Master))<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<div class="pre-outer"><div class="pre"><font color="#009000">-- get all learned skills to Master 12</font><br><B><font color="Black">for</font></B> _, pl <B><font color="Black">in</font></B> Party <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> i, val <B><font color="Black">in</font></B> pl.Skills <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> val <B><font color="#333">~=</font></B> <B><font color="#079">0</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> skill, mastery <B><font color="#00D">=</font></B> SplitSkill(val)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>pl.Skills[i] <B><font color="#00D">=</font></B> JoinSkill(<font color="Brown">math</font>.<font color="Brown">max</font>(skill, <B><font color="#079">12</font></B>), <font color="Brown">math</font>.<font color="Brown">max</font>(mastery, const.Master))<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<div class="pre-outer"><div class="pre"><font color="#009000">-- learn all available skills at Expert</font><br><B><font color="Black">for</font></B> _, pl <B><font color="Black">in</font></B> Party <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> i, learn <B><font color="Black">in</font></B> EnumAvailableSkills(pl.Class) <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> learn <B><font color="#333">&gt;=</font></B> const.Expert <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> skill, mastery <B><font color="#00D">=</font></B> SplitSkill(pl.Skills[i])<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>skill <B><font color="#00D">=</font></B> <font color="Brown">math</font>.<font color="Brown">max</font>(skill, <B><font color="#079">4</font></B>) <span> </span><font color="#009000">-- learn at least level 4</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>mastery <B><font color="#00D">=</font></B> <font color="Brown">math</font>.<font color="Brown">max</font>(mastery, const.Expert) <span> </span><font color="#009000">-- learn the mastery</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>pl.Skills[i] <B><font color="#00D">=</font></B> JoinSkill(skill, mastery)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<div class="pre-outer"><div class="pre"><font color="#009000">-- learn all available skills at their maximum level</font><br><B><font color="#00D">local</font></B> LearnLevel <B><font color="#00D">=</font></B> (Game.Version <B><font color="#333">&gt;</font></B> <B><font color="#079">6</font></B> <B><font color="Black">and</font></B> <B><font color="Black">{</font></B><B><font color="#079">1</font></B>, <B><font color="#079">4</font></B>, <B><font color="#079">7</font></B>, <B><font color="#079">10</font></B><B><font color="Black">}</font></B> <B><font color="Black">or</font></B> <B><font color="Black">{</font></B><B><font color="#079">1</font></B>, <B><font color="#079">4</font></B>, <B><font color="#079">12</font></B><B><font color="Black">}</font></B>)<br><br><B><font color="Black">for</font></B> _, pl <B><font color="Black">in</font></B> Party <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> i, learn <B><font color="Black">in</font></B> EnumAvailableSkills(pl.Class) <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> skill, mastery <B><font color="#00D">=</font></B> SplitSkill(pl.Skills[i])<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>skill <B><font color="#00D">=</font></B> <font color="Brown">math</font>.<font color="Brown">max</font>(skill, LearnLevel[learn]) <span> </span><font color="#009000">-- learn at least the usual needed level</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>mastery <B><font color="#00D">=</font></B> <font color="Brown">math</font>.<font color="Brown">max</font>(mastery, learn) <span> </span><font color="#009000">-- learn the mastery</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>pl.Skills[i] <B><font color="#00D">=</font></B> JoinSkill(skill, mastery)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<br>

<a name="Artifact-Bonuses"></a><h3>Artifact Bonuses</h3>
Giving Hareck's Leather an 'Of Earth Magic' enhancement. (untested)
<div class="pre-outer"><div class="pre"><B><font color="Black">function</font></B> events.CalcStatBonusByItems(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> t.Stat <B><font color="#333">~=</font></B> const.Stats.EarthMagic <B><font color="Black">or</font></B> t.Player.Skills[const.Skills.EarthMagic] <B><font color="#333">==</font></B> <B><font color="#079">0</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> item, slot <B><font color="Black">in</font></B> t.Player:EnumActiveItems() <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> item.Number <B><font color="#333">==</font></B> <B><font color="#079">516</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>t:SetMagicBonus(SplitSkill(t.Player.Skills[const.Skill.EarthMagic]):div(<B><font color="#079">2</font></B>))<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<br>
Giving Hareck's Leather 'Armsmaster + 8' bonus. (untested)
<div class="pre-outer"><div class="pre"><B><font color="Black">function</font></B> events.CalcStatBonusByItems(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> t.Stat <B><font color="#333">~=</font></B> const.Stats.Armsmaster <B><font color="Black">or</font></B> t.Player.Skills[const.Skills.Armsmaster] <B><font color="#333">==</font></B> <B><font color="#079">0</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> item, slot <B><font color="Black">in</font></B> t.Player:EnumActiveItems() <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> item.Number <B><font color="#333">==</font></B> <B><font color="#079">516</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>t:SetArtifactBonus(<B><font color="#079">8</font></B>)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<br>
Q: Is there a way to change values of enchantments? For example, to make Of the Gods one give say +30 stats instead of +10?<br>
A: (untested)
<div class="pre-outer"><div class="pre"><B><font color="Black">function</font></B> events.CalcStatBonusByItems(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> t.Stat <B><font color="#333">&gt;=</font></B> const.Stats.Might <B><font color="Black">and</font></B> t.Stat <B><font color="#333">&lt;=</font></B> const.Stats.Luck <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> it <B><font color="Black">in</font></B> t.Player:EnumActiveItems() <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> it.Bonus2 <B><font color="#333">==</font></B> <B><font color="#079">2</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>t.Result <B><font color="#00D">=</font></B> t.Result <B><font color="#333">+</font></B> <B><font color="#079">20</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<br>

<a name="Spells-Damage"></a><h3>Spells Damage</h3>
Change damage of spell 2 &ndash; Flame Arrow. You can also make damage depend on <b class="def-param">t.Mastery</b> and <b class="def-param">t.HP</b> (monster hit points).
<div class="pre-outer"><div class="pre"><B><font color="#00D">local</font></B> <B><font color="Black">function</font></B> Randoms(<font color="Brown">min</font>, <font color="Brown">max</font>, count)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> r <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> i <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B>, count <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>r <B><font color="#00D">=</font></B> r <B><font color="#333">+</font></B> <font color="Brown">math</font>.<font color="Brown">random</font>(<font color="Brown">min</font>, <font color="Brown">max</font>)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">return</font></B> r<br><B><font color="Black">end</font></B><br><br><B><font color="Black">function</font></B> events.CalcSpellDamage(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> t.Spell <B><font color="#333">==</font></B> <B><font color="#079">2</font></B> <B><font color="Black">then</font></B> <span> </span><font color="#009000">-- Flame Arrow</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>t.Result <B><font color="#00D">=</font></B> <B><font color="#079">100</font></B> <B><font color="#333">+</font></B> Randoms(<B><font color="#079">1</font></B>, <B><font color="#079">100</font></B>, t.Skill) <span> </span><font color="#009000">-- 100 + (1-100) per skill level</font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<br>

<a name="Controlling-monsters-aggression-in-MM6"></a><h3>Controlling monsters aggression in MM6</h3>
Put this script into <b>Scripts\Global</b> folder. It would make archers in Free Haven friendly
and female peasants aggressive. In other places archers would still be aggressive and peasants still friendly.

<div class="pre-outer"><div class="pre"><B><font color="Black">function</font></B> events.BeforeLoadMap() <br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> Game.Map.Name <B><font color="#333">==</font></B> <font color="#90A">&quot;outc2.odm&quot;</font> <B><font color="Black">then</font></B> <br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>LocalMonstersTxt()<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Game.MonstersTxt[<B><font color="#079">1</font></B>].HostileType <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B> <span> </span><font color="#009000">-- ArcherA </font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Game.MonstersTxt[<B><font color="#079">2</font></B>].HostileType <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B> <span> </span><font color="#009000">-- ArcherB </font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Game.MonstersTxt[<B><font color="#079">3</font></B>].HostileType <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B> <span> </span><font color="#009000">-- ArcherC </font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Game.MonstersTxt[<B><font color="#079">121</font></B>].HostileType <B><font color="#00D">=</font></B> <B><font color="#079">4</font></B> <span> </span><font color="#009000">-- PeasantF1A </font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Game.MonstersTxt[<B><font color="#079">122</font></B>].HostileType <B><font color="#00D">=</font></B> <B><font color="#079">4</font></B> <span> </span><font color="#009000">-- PeasantF1B </font><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Game.MonstersTxt[<B><font color="#079">123</font></B>].HostileType <B><font color="#00D">=</font></B> <B><font color="#079">4</font></B> <span> </span><font color="#009000">-- PeasantF1C </font><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
Instead of map name check you can put any condition. For example, after player completes a quest you can make some monsters friendly or aggressive.
<br>
<br>

<a name="Flowers-you-can-pick-up-(MM8)"></a><h3>Flowers you can pick up (MM8)</h3>
Put this script into <b>Scripts\Global</b> folder.

<div class="pre-outer"><div class="pre"><font color="#009000">-- You can find such flowers in Ravenshore at X = 16921, Y = 4112</font><br><font color="#009000">-- Flowers disappear when picked up, which makes life easier than in Barrels script</font><br><font color="#009000">-- The game remembers which sprites are hidden by itself</font><br><br><B><font color="#00D">local</font></B> SpriteEvents <B><font color="#00D">=</font></B> <B><font color="#079">20000</font></B><br><B><font color="#00D">local</font></B> TXT <B><font color="#00D">=</font></B> Localize<B><font color="Black">{</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>FlowerHint <B><font color="#00D">=</font></B> <font color="#90A">&quot;Flowers&quot;</font>,<br><B><font color="Black">}</font></B><br><br><B><font color="#00D">local</font></B> <B><font color="Black">function</font></B> Flower(EvtId)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> i <B><font color="#00D">=</font></B> EvtId &ndash; SpriteEvents<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(<font color="#90A">&quot;Inventory&quot;</font>, <B><font color="#079">208</font></B>)<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.SetSprite(i, <B><font color="#079">false</font></B>) <span> </span><font color="#009000">-- alternatively, for the same effect: <span> </span>Map.Sprites[i].Invisible = true</font><br><B><font color="Black">end</font></B><br><br><B><font color="#00D">local</font></B> <B><font color="Black">function</font></B> InitFlower(i, a)<br><span style="display: inline-block; width: 2ch;">&#9;</span>a.Event <B><font color="#00D">=</font></B> SpriteEvents <B><font color="#333">+</font></B> i<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.map[SpriteEvents <B><font color="#333">+</font></B> i] <B><font color="#00D">=</font></B> Flower<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.hint[SpriteEvents <B><font color="#333">+</font></B> i] <B><font color="#00D">=</font></B> TXT.FlowerHint<br><B><font color="Black">end</font></B><br><br><B><font color="Black">function</font></B> events.LoadMap()<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> i, a <B><font color="Black">in</font></B> Map.Sprites <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> a.DecName <B><font color="#333">==</font></B> <font color="#90A">&quot;plant27&quot;</font> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>InitFlower(i, a)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<br>

<a name="Unusually-looking-barrels-(MM7)"></a><h3>Unusually looking barrels (MM7)</h3>
Put this script into <b>Scripts\Global</b> folder to turn trees into barrels.
<div class="pre-outer"><div class="pre"><font color="#009000">-- Turns trees into barrels</font><br><br><B><font color="#00D">local</font></B> SpriteEvents <B><font color="#00D">=</font></B> <B><font color="#079">20000</font></B><br><B><font color="#00D">local</font></B> TopicBase <B><font color="#00D">=</font></B> <B><font color="#079">383</font></B><br><B><font color="#00D">local</font></B> TextBase <B><font color="#00D">=</font></B> <B><font color="#079">582</font></B><br><B><font color="#00D">local</font></B> Reorder <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B>[<B><font color="#079">0</font></B>] <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B>, <B><font color="#079">1</font></B>, <B><font color="#079">4</font></B>, <B><font color="#079">3</font></B>, <B><font color="#079">5</font></B>, <B><font color="#079">2</font></B>, <B><font color="#079">6</font></B>, <B><font color="#079">7</font></B><B><font color="Black">}</font></B> <span> </span><font color="#009000">-- NPC topics order is messed up</font><br><B><font color="#00D">local</font></B> AutonotesBase <B><font color="#00D">=</font></B> <B><font color="#079">32</font></B><br><br><B><font color="#00D">local</font></B> <B><font color="Black">function</font></B> Barrel(EvtId)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> i <B><font color="#00D">=</font></B> EvtId &ndash; SpriteEvents<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="#00D">local</font></B> v <B><font color="#00D">=</font></B> mapvars.Barrels[i]<br><span style="display: inline-block; width: 2ch;">&#9;</span>Game.ShowStatusText(Game.NPCText[TextBase <B><font color="#333">+</font></B> Reorder[v]])<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> v <B><font color="#333">&gt;</font></B> <B><font color="#079">0</font></B> <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Add(evt.VarNum.BaseStats[v &ndash; <B><font color="#079">1</font></B>], <B><font color="#079">2</font></B>)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.Set(<font color="#90A">&quot;AutonotesBits&quot;</font>, AutonotesBase <B><font color="#333">+</font></B> v)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>mapvars.Barrels[i] <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>evt.hint[SpriteEvents <B><font color="#333">+</font></B> i] <B><font color="#00D">=</font></B> Game.NPCTopic[TopicBase]<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B><br><br><B><font color="#00D">local</font></B> <B><font color="Black">function</font></B> InitBarrel(i, a)<br><span style="display: inline-block; width: 2ch;">&#9;</span>mapvars.Barrels <B><font color="#00D">=</font></B> mapvars.Barrels <B><font color="Black">or</font></B> <B><font color="Black">{</font></B><B><font color="Black">}</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>mapvars.Barrels[i] <B><font color="#00D">=</font></B> mapvars.Barrels[i] <B><font color="Black">or</font></B> <font color="Brown">math</font>.<font color="Brown">random</font>(<B><font color="#079">1</font></B>, <B><font color="#079">7</font></B>)<br><span style="display: inline-block; width: 2ch;">&#9;</span><br><span style="display: inline-block; width: 2ch;">&#9;</span>a.Event <B><font color="#00D">=</font></B> SpriteEvents <B><font color="#333">+</font></B> i<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.map[SpriteEvents <B><font color="#333">+</font></B> i] <B><font color="#00D">=</font></B> Barrel<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.hint[SpriteEvents <B><font color="#333">+</font></B> i] <B><font color="#00D">=</font></B> Game.NPCTopic[TopicBase <B><font color="#333">+</font></B> Reorder[mapvars.Barrels[i]]]<br><B><font color="Black">end</font></B><br><br><B><font color="Black">function</font></B> events.LoadMap()<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">for</font></B> i, a <B><font color="Black">in</font></B> Map.Sprites <B><font color="Black">do</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> a.DecName <B><font color="Black">and</font></B> a.DecName:match(<font color="#90A">&quot;^tree&quot;</font>) <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>InitBarrel(i, a)<br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
<br>

<a name="Other-Examples"></a><h3>Other Examples</h3>
Summon monster (Peasant):
<div class="pre-outer"><div class="pre"><B><font color="#00D">local</font></B> mon <B><font color="#00D">=</font></B> SummonMonster(<B><font color="#079">151</font></B>, Party.X, Party.Y, Party.Z, <B><font color="#079">true</font></B>)<br>mon.NPC_ID <B><font color="#00D">=</font></B> <B><font color="#079">52</font></B><br>mon.Hostile <B><font color="#00D">=</font></B> <B><font color="#079">false</font></B></div></div>
<br>
See global event number (copy to console to quickly test what event is triggered by a dialog item):
<div class="pre-outer"><div class="pre"><font color="#009000">-- on:</font><br><B><font color="Black">function</font></B> events.EvtGlobal(evt)<br><span style="display: inline-block; width: 2ch;">&#9;</span>Message(evt)<br><B><font color="Black">end</font></B></div></div>
<div class="pre-outer"><div class="pre"><font color="#009000">-- off:</font><br>events.EvtGlobal.clear()</div></div>
<br>
Q: How to change the home position after the death of the team on current map?<br>
A: Pass any coordinates in call to <a href="#XYZ">XYZ</a> and set any <a href="#structs.GameParty.Direction">Direction</a>:
<div class="pre-outer"><div class="pre"><B><font color="Black">function</font></B> events.DeathMap(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span>t.Name <B><font color="#00D">=</font></B> <font color="#90A">&quot;out05.odm&quot;</font><br><span style="display: inline-block; width: 2ch;">&#9;</span>XYZ(Party, <B><font color="#079">0</font></B>, <B><font color="#079">0</font></B>, <B><font color="#079">0</font></B>)<br><span style="display: inline-block; width: 2ch;">&#9;</span>Party.Direction <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Party.LookAngle <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B><br><B><font color="Black">end</font></B></div></div>
<br>
Changing starting map (similar to previous example):
<div class="pre-outer"><div class="pre">Game.NewGameMap <B><font color="#00D">=</font></B> <font color="#90A">&quot;out05.odm&quot;</font><br><B><font color="Black">function</font></B> events.NewGameMap()<br><span style="display: inline-block; width: 2ch;">&#9;</span>XYZ(Party, <B><font color="#079">0</font></B>, <B><font color="#079">0</font></B>, <B><font color="#079">0</font></B>)<br><span style="display: inline-block; width: 2ch;">&#9;</span>Party.Direction <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span>Party.LookAngle <B><font color="#00D">=</font></B> <B><font color="#079">0</font></B><br><B><font color="Black">end</font></B></div></div>
<br>
Q: How to run a method when a user presses a specific key?<br>
Method #1 (preferred):
<div class="pre-outer"><div class="pre"><B><font color="Black">function</font></B> events.KeyDown(t)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">if</font></B> t.Key <B><font color="#333">==</font></B> const.Keys.F2 <B><font color="Black">then</font></B><br><span style="display: inline-block; width: 2ch;">&#9;</span><span style="display: inline-block; width: 2ch;">&#9;</span>Message(<font color="#90A">&quot;F2 pressed&quot;</font>)<br><span style="display: inline-block; width: 2ch;">&#9;</span><B><font color="Black">end</font></B><br><B><font color="Black">end</font></B></div></div>
Method #2 (doesn't repeat when holding the key):
<div class="pre-outer"><div class="pre">Keys[const.Keys.F2] <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>()<br><span style="display: inline-block; width: 2ch;">&#9;</span>Message(<font color="#90A">&quot;F2 pressed&quot;</font>)<br><B><font color="Black">end</font></B></div></div>
<br>
<!--
<div class="pre-outer"><div class="pre"></div></div>
<br>

<div class="pre-outer"><div class="pre"></div></div>
<br>

<div class="pre-outer"><div class="pre"></div></div>
<br>

<div class="pre-outer"><div class="pre"></div></div>
<br>

<div class="pre-outer"><div class="pre"></div></div>
<br>
-->
<br>
<hr>




<br>
<a name="Evt-Commands"></a><h2>Evt Commands</h2>



<br>
<a name="evt.EnterHouse"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>evt.EnterHouse</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Id
</td><td class="def-right">
 In 2DEvents.txt<br>600 = you won<br>601 = you won 2 / you lost
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.PlaySound"></a><h3>evt.PlaySound</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.MoveToMap"></a><h3>evt.MoveToMap</h3>
 Notes:<br>If cancel is pressed, event execution is stopped<br>If <b class="def-param">X</b>, <b class="def-param">Y</b>, <b class="def-param">Z</b>, <b class="def-param">Direction</b>, <b class="def-param">LookAngle</b>, <b class="def-param">SpeedZ</b> are all 0, the party isn't moved<br>If <b class="def-param">HouseId</b> and <b class="def-param">Icon</b> are 0, the enter dungeon dialog isn't shown<br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Direction
</td><td class="def-right">
 -1 = special case
</td>
</tr><tr>
<td class="def-left">
LookAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
SpeedZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
HouseId
</td><td class="def-right">
 In 2DEvents.txt
</td>
</tr><tr>
<td class="def-left">
Icon
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Name
</td><td class="def-right">
 if unspecified or starts with "0" =&gt; current map
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.OpenChest"></a><h3>evt.OpenChest</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.FaceExpression"></a><h3>evt.FaceExpression</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a href="#evt.Players">Player</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Frame
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.DamagePlayer"></a><h3>evt.DamagePlayer</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a href="#evt.Players">Player</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a href="#const.Damage">DamageType</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Damage
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetSnow"></a><h3>evt.SetSnow</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
EffectId
</td><td class="def-right">
 only 0 available
</td>
</tr><tr>
<td class="def-left">
On
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetTexture"></a><h3>evt.SetTexture</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Facet
</td><td class="def-right">
 <span class="def-ver">[MM6]</span> <span class="def-nbsp"> </span>Index in <a href="#structs.GameMap.Facets">Map.Facets</a> indoors.<br><span class="def-ver">[MM7+]</span> <span class="def-nbsp"> </span>Id of facets group.
</td>
</tr><tr>
<td class="def-left">
Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetTextureOutdoors"></a><h3>evt.SetTextureOutdoors</h3>
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Model
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Facet
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.ShowMovie"></a><h3>evt.ShowMovie</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
DoubleSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
ExitCurrentScreen
</td><td class="def-right">
 Use <b class="def-param">true</b> only before using <a href="#evt.MoveToMap">evt.MoveToMap</a> command in houses and before showing game ending.<br>Prevents loading of house anmation after the movie stops playing, but doesn't exit the screen properly.
</td>
</tr><tr>
<td class="def-left">
Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetSprite"></a><h3>evt.SetSprite</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
SpriteId
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Visible
</td><td class="def-right">
 bit 0x20 of sprite
</td>
</tr><tr>
<td class="def-left">
Name
</td><td class="def-right">
 If <b class="def-param">Name</b> is unspecified or "0", the sprite isn't changed
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.Cmp"></a><h3>evt.Cmp</h3>
 Usually performs Variable &gt;= Value comparison<br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a href="#evt.VarNum">VarNum</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Value
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetDoorState"></a><h3>evt.SetDoorState</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
State
</td><td class="def-right">
 0 &ndash; state (0),<br>1 &ndash; state (1),<br>2 &ndash; switch state if the door isn't moving,<br>3 &ndash; switch state
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.Add"></a><h3>evt.Add</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a href="#evt.VarNum">VarNum</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Value
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.Subtract"></a><h3>evt.Subtract</h3>
 Also available as <b class="def-param">evt.Sub</b>.<br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a href="#evt.VarNum">VarNum</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Value
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.Set"></a><h3>evt.Set</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a href="#evt.VarNum">VarNum</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Value
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SummonMonsters"></a><h3>evt.SummonMonsters</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
TypeIndexInMapStats
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Level
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Count
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
NPCGroup
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
unk
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.CastSpell"></a><h3>evt.CastSpell</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Spell
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a href="#const">Mastery</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Skill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
FromX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
FromY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
FromZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
ToX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
ToY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
ToZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SpeakNPC"></a><h3>evt.SpeakNPC</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
NPC
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetFacetBit"></a><h3>evt.SetFacetBit</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Id
</td><td class="def-right">
 <span class="def-ver">[MM6]</span> <span class="def-nbsp"> </span>Index in <a href="#structs.GameMap.Facets">Map.Facets</a> indoors.<br><span class="def-ver">[MM7+]</span> <span class="def-nbsp"> </span>Id of facets group.
</td>
</tr><tr>
<td class="def-left">
<a href="#const.FacetBits">Bit</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
On
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetFacetBitOutdoors"></a><h3>evt.SetFacetBitOutdoors</h3>
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Model
</td><td class="def-right">
 Model index in <a href="#structs.GameMap.Models">Map.Models</a>
</td>
</tr><tr>
<td class="def-left">
Facet
</td><td class="def-right">
 -1 = for all faces of model
</td>
</tr><tr>
<td class="def-left">
<a href="#const.FacetBits">Bit</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
On
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetMonsterBit"></a><h3>evt.SetMonsterBit</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Monster
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a href="#const.MonsterBits">Bit</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
On
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.Question"></a><h3>evt.Question</h3>
 Use <a href="#Question">Question</a> function instead, e.g.<div class="def-codeblock"><B><font color="Black">if</font></B> Question(<font color="#90A">&quot;Restricted area - Keep out.&quot;</font>, <font color="#90A">&quot;What's the password?&quot;</font>):<font color="Brown">lower</font>() <B><font color="#333">==</font></B> <font color="#90A">&quot;jbard&quot;</font> <B><font color="Black">then</font></B> ...</div><br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Question
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Answer1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Answer2
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.StatusText"></a><h3>evt.StatusText</h3>
 Use <a href="#structs.GameStructure.ShowStatusText">Game.ShowStatusText</a> function instead, e.g.<div class="def-codeblock">Game.ShowStatusText(<font color="#90A">&quot;Hi!&quot;</font>)</div><br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Str
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetMessage"></a><h3>evt.SetMessage</h3>
 Use <a href="#Message">Message</a> function instead, e.g.<div class="def-codeblock">Message(<font color="#90A">&quot;Hi!&quot;</font>)</div><br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Str
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetLight"></a><h3>evt.SetLight</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Id
</td><td class="def-right">
 <span class="def-ver">[MM6, MM7]</span> <span class="def-nbsp"> </span><a href="#structs.GameMap.Lights">Map.Lights</a> index<br><span class="def-ver">[MM8]</span> <span class="def-nbsp"> </span>Light group id
</td>
</tr><tr>
<td class="def-left">
On
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SimpleMessage"></a><h3>evt.SimpleMessage</h3>
 Use <a href="#Message">Message</a> function instead, e.g.<div class="def-codeblock">Message(<font color="#90A">&quot;Hi!&quot;</font>)</div><br><br>
&nbsp;<i>Has no parameters.</i><br>
</td>
</tr>
<tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SummonObject"></a><h3>evt.SummonObject</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Type
</td><td class="def-right">
 <span class="def-ver">[MM6, MM7]</span> <span class="def-nbsp"> </span>Object kind index (ObjList.txt)<br><span class="def-ver">[MM8]</span> <span class="def-nbsp"> </span>Item index. Index over 1000 means random item of the same kind as <b class="def-param">Type</b> % 1000 of strength <b class="def-param">Type</b> div 1000.
</td>
</tr><tr>
<td class="def-left">
X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Speed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Count
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
RandomAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.ForPlayer"></a><h3>evt.ForPlayer</h3>
 Sets current player and returns <b class="def-param">evt</b>. You can thus write things like this:<div class="def-codeblock"><span style="display: inline-block; width: 2ch;">&#9;</span>evt.ForPlayer(<font color="#90A">&quot;All&quot;</font>).Add(<font color="#90A">&quot;Exp&quot;</font>, <B><font color="#079">1000</font></B>)</div><br>You can also manipulate <a href="#evt.Player">evt.Player</a> and <a href="#evt.CurrentPlayer">evt.CurrentPlayer</a> variables.<br>Usually a better approach is to specify player after <b class="def-param">evt</b>, this way it only effects one call that follows:<div class="def-codeblock"><span style="display: inline-block; width: 2ch;">&#9;</span>evt.All.Add(<font color="#90A">&quot;Exp&quot;</font>, <B><font color="#079">1000</font></B>)<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt[<B><font color="#079">0</font></B>].Add(<font color="#90A">&quot;Gold&quot;</font>, <B><font color="#079">1000</font></B>)</div><br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a href="#evt.Players">Player</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetNPCTopic"></a><h3>evt.SetNPCTopic</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
NPC
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Index
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Event
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.MoveNPC"></a><h3>evt.MoveNPC</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
NPC
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
HouseId
</td><td class="def-right">
 In 2DEvents.txt
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.GiveItem"></a><h3>evt.GiveItem</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Strength
</td><td class="def-right">
 1-6 (like described at the end of STDITEMS.TXT)
</td>
</tr><tr>
<td class="def-left">
<a href="#const.ItemType">Type</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Id
</td><td class="def-right">
 If <b class="def-param">Id</b> is 0, a random item is chosen from the specified class with specified strength,<br>otherwise, <b class="def-param">Type</b> and <b class="def-param">Strength</b> determine the enchantments
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.ChangeEvent"></a><h3>evt.ChangeEvent</h3>
 
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
NewEvent
</td><td class="def-right">
 Changes global event for barrels, pedestals etc. The kinds of sprites with such events are hard-coded.
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.CheckSkill"></a><h3>evt.CheckSkill</h3>
 Checks that the skill meets specified <b class="def-param">Mastery</b> and <b class="def-param">Level</b> requirements<br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a href="#const.Skills">Skill</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a href="#const">Mastery</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Level
</td><td class="def-right">
 Includes "Double effect" enchantments and NPC bonuses
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetNPCGroupNews"></a><h3>evt.SetNPCGroupNews</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
NPCGroup
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
NPCNews
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetMonsterGroup"></a><h3>evt.SetMonsterGroup</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Monster
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
NPCGroup
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetNPCItem"></a><h3>evt.SetNPCItem</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
NPC
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Item
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
On
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetNPCGreeting"></a><h3>evt.SetNPCGreeting</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
NPC
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Greeting
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.CheckMonstersKilled"></a><h3>evt.CheckMonstersKilled</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
CheckType
</td><td class="def-right">
 0 &ndash; any monster, 1 &ndash; in group, 2 &ndash; of type, 3 &ndash; specific monster, 4 &ndash; specific monster by name (MM8)
</td>
</tr><tr>
<td class="def-left">
Id
</td><td class="def-right">
 Depending on <b class="def-param">CheckType</b>: 0 &ndash; not used, 1 &ndash; group id, 2 &ndash; monster type minus 1, 3 &ndash; monster id, 4 &ndash; id in placemon.txt (MM8 only)
</td>
</tr><tr>
<td class="def-left">
Count
</td><td class="def-right">
 0 &ndash; all must be killed, else a number of monsters that must be killed
</td>
</tr><tr>
<td class="def-left">
InvisibleAsDead
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  1 (default) &ndash; treat invisible (that is, currently disabled, like pirates in Ravenshore before you enter Regna) monsters as dead when counting, 0 &ndash; include invisible monsters
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.ChangeGroupToGroup"></a><h3>evt.ChangeGroupToGroup</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Old
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
New
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.ChangeGroupAlly"></a><h3>evt.ChangeGroupAlly</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
NPCGroup
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Ally
</td><td class="def-right">
 Monster class that guards this group. That is, <span class="def-code">(Id <B><font color="#333">+</font></B> <B><font color="#079">2</font></B>):div(<B><font color="#079">3</font></B>)</span>, like in Hostile.txt.
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.CheckSeason"></a><h3>evt.CheckSeason</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Season
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetMonGroupBit"></a><h3>evt.SetMonGroupBit</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
NPCGroup
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a href="#const.MonsterBits">Bit</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
On
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetChestBit"></a><h3>evt.SetChestBit</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
ChestId
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a href="#const.ChestBits">Bit</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
On
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.FaceAnimation"></a><h3>evt.FaceAnimation</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a href="#evt.Players">Player</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Animation
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.SetMonsterItem"></a><h3>evt.SetMonsterItem</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Monster
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Item
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Has
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.StopDoor"></a><h3>evt.StopDoor</h3>
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.CheckItemsCount"></a><h3>evt.CheckItemsCount</h3>
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
MinItemIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
MaxItemIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Count
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.RemoveItems"></a><h3>evt.RemoveItems</h3>
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
MinItemIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
MaxItemIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Count
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.Jump"></a><h3>evt.Jump</h3>
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Direction
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
ZAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
Speed
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.IsTotalBountyInRange"></a><h3>evt.IsTotalBountyInRange</h3>
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
MinGold
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
MaxGold
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-caption">
<br>
<a name="evt.IsPlayerInParty"></a><h3>evt.IsPlayerInParty</h3>
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i>Parameters:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
Id
</td><td class="def-right">
 Roster.txt
</td>
</tr></tbody>
</table>
<br>


<br>
<hr>
<a name="Events"></a><h2>Events</h2>



<br>
<a name="Core-events.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>events.lua</h3>
 
&nbsp;<i class="def-ib">Events:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="events.CalcSpellDamage" class="abs"></a><h4 class="def-h4">CalcSpellDamage</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>HP<br><span class="def-nbsp">  </span>HitPoints<br><span class="def-nbsp">  </span>Mastery:const<br><span class="def-nbsp">  </span>Result<br><span class="def-nbsp">  </span><a href="#const.Skills">Skill</a><br><span class="def-nbsp">  </span>Spell<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.WalkToMap" class="abs"></a><h4 class="def-h4">WalkToMap</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Days <span class="def-ver">[MM7+]</span><br><span class="def-nbsp">  </span>EnterMap<br><span class="def-nbsp">  </span>EnterSide <span class="def-ver">[MM7+]</span><br><span class="def-nbsp">  </span>LeaveMap<br><span class="def-nbsp">  </span>LeaveSide <span class="def-ver">[MM7+]</span><br><span class="def-nbsp">  </span>X<br><span class="def-nbsp">  </span>Y<br> <b>}</b>
</td><td class="def-right">
 Sides:<br><span class="def-nbsp">  </span>0, "up", "down", "left", "right".<br><span class="def-nbsp">  </span>0 means "party start" sprite.
</td>
</tr><tr>
<td class="def-left">
<a name="events.NewGameMap" class="abs"></a><h4 class="def-h4">NewGameMap</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.DeathMap" class="abs"></a><h4 class="def-h4">DeathMap</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Name<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.FogRange" class="abs"></a><h4 class="def-h4">FogRange</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.GameInitialized1" class="abs"></a><h4 class="def-h4">GameInitialized1</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 loaded .bin data
</td>
</tr><tr>
<td class="def-left">
<a name="events.GameInitialized2" class="abs"></a><h4 class="def-h4">GameInitialized2</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 loaded .txt data
</td>
</tr><tr>
<td class="def-left">
<a name="events.CanSaveGame" class="abs"></a><h4 class="def-h4">CanSaveGame</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>IsArena<br><span class="def-nbsp">  </span>SaveKind<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.CanCastLloyd" class="abs"></a><h4 class="def-h4">CanCastLloyd</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.IsUnderwater" class="abs"></a><h4 class="def-h4">IsUnderwater</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Map<br><span class="def-nbsp">  </span>Result<br> <b>}</b>
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="events.SetMapNoNPC" class="abs"></a><h4 class="def-h4">SetMapNoNPC</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 <span class="def-ver">[MM7]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="events.EnterNPC" class="abs"></a><h4 class="def-h4">EnterNPC</h4> <span class="def-nbsp"> </span><b>(</b> i <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.ShowNPCTopics" class="abs"></a><h4 class="def-h4">ShowNPCTopics</h4> <span class="def-nbsp"> </span><b>(</b> i <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.DrawNPCGreeting" class="abs"></a><h4 class="def-h4">DrawNPCGreeting</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>NPC<br><span class="def-nbsp">  </span>Seen<br><span class="def-nbsp">  </span>Text<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.WindowMessage" class="abs"></a><h4 class="def-h4">WindowMessage</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Handled<br><span class="def-nbsp">  </span>LParam<br><span class="def-nbsp">  </span>Msg<br><span class="def-nbsp">  </span>Result<br><span class="def-nbsp">  </span>WParam<br><span class="def-nbsp">  </span>Window<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.KeyUp" class="abs"></a><h4 class="def-h4">KeyUp</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Alt<br><span class="def-nbsp">  </span>ExtendedKey<br><span class="def-nbsp">  </span>Handled<br><span class="def-nbsp">  </span><a href="#const.Keys">Key</a><br><span class="def-nbsp">  </span>WasPressed<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.KeyDown" class="abs"></a><h4 class="def-h4">KeyDown</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Alt<br><span class="def-nbsp">  </span>ExtendedKey<br><span class="def-nbsp">  </span>Handled<br><span class="def-nbsp">  </span><a href="#const.Keys">Key</a><br><span class="def-nbsp">  </span>WasPressed<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.Action" class="abs"></a><h4 class="def-h4">Action</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Action<br><span class="def-nbsp">  </span>Handled<br><span class="def-nbsp">  </span>Param<br><span class="def-nbsp">  </span>Param2<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.MenuAction" class="abs"></a><h4 class="def-h4">MenuAction</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Action<br><span class="def-nbsp">  </span>Handled<br><span class="def-nbsp">  </span>Param<br><span class="def-nbsp">  </span>Param2<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.ExitNPC" class="abs"></a><h4 class="def-h4">ExitNPC</h4> <span class="def-nbsp"> </span><b>(</b> i <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.KeysFilter" class="abs"></a><h4 class="def-h4">KeysFilter</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span><a href="#const.Keys">Key</a><br><span class="def-nbsp">  </span>On<br><span class="def-nbsp">  </span>Result<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.BeforeSaveGame" class="abs"></a><h4 class="def-h4">BeforeSaveGame</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.AfterSaveGame" class="abs"></a><h4 class="def-h4">AfterSaveGame</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.SkyBitmap" class="abs"></a><h4 class="def-h4">SkyBitmap</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>FirstVisit<br><span class="def-nbsp">  </span>Result<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.ShowMovie" class="abs"></a><h4 class="def-h4">ShowMovie</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Allow<br><span class="def-nbsp">  </span>CallDefault<br><span class="def-nbsp">  </span>DoubleSize<br><span class="def-nbsp">  </span>ExitCurrentScreen<br><span class="def-nbsp">  </span>Name<br><span class="def-nbsp">  </span>Y<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.CalcStatBonusByItems" class="abs"></a><h4 class="def-h4">CalcStatBonusByItems</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>ArtifactBonus <span class="def-ver">[MM7+]</span><br><span class="def-nbsp">  </span>IgnoreExtraHand<br><span class="def-nbsp">  </span>MagicBonus <span class="def-ver">[MM7+]</span><br><span class="def-nbsp">  </span><a href="#structs.Player">Player</a><br><span class="def-nbsp">  </span>PlayerIndex<br><span class="def-nbsp">  </span>Result<br><span class="def-nbsp">  </span>SetArtifactBonus<br><span class="def-nbsp">  </span>SetMagicBonus<br><span class="def-nbsp">  </span><a href="#const.Stats">Stat</a><br> <b>}</b>
</td><td class="def-right">
 Here's how <b class="def-param">SetArtifactBonus</b> works:<br><span class="def-nbsp">  </span><span class="def-ver">[MM7+]</span> If given value is bigger than <b class="def-param">ArtifactBonus</b>, modifies <b class="def-param">ArtifactBonus</b> and increases <b class="def-param">Result</b>.<br><span class="def-nbsp">  </span><span class="def-ver">[MM6]</span> Just adds the value to <b class="def-param">Rusult</b>.<br><br><b class="def-param">SetMagicBonus</b> does the same to <b class="def-param">MagicBonus</b>.
</td>
</tr><tr>
<td class="def-left">
<a name="events.CalcStatBonusByMagic" class="abs"></a><h4 class="def-h4">CalcStatBonusByMagic</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span><a href="#structs.Player">Player</a><br><span class="def-nbsp">  </span>PlayerIndex<br><span class="def-nbsp">  </span>Result<br><span class="def-nbsp">  </span><a href="#const.Stats">Stat</a><br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.CalcStatBonusBySkills" class="abs"></a><h4 class="def-h4">CalcStatBonusBySkills</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span><a href="#structs.Player">Player</a><br><span class="def-nbsp">  </span>PlayerIndex<br><span class="def-nbsp">  </span>Result<br><span class="def-nbsp">  </span><a href="#const.Stats">Stat</a><br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.GetSkill" class="abs"></a><h4 class="def-h4">GetSkill</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span><a href="#structs.Player">Player</a><br><span class="def-nbsp">  </span>PlayerIndex<br><span class="def-nbsp">  </span>Result<br><span class="def-nbsp">  </span>Skill<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.GetAttackDelay" class="abs"></a><h4 class="def-h4">GetAttackDelay</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span><a href="#structs.Player">Player</a><br><span class="def-nbsp">  </span>PlayerIndex<br><span class="def-nbsp">  </span>Ranged<br><span class="def-nbsp">  </span>Result<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.CalcDamageToPlayer" class="abs"></a><h4 class="def-h4">CalcDamageToPlayer</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Damage<br><span class="def-nbsp">  </span><a href="#const.Damage">DamageKind</a><br><span class="def-nbsp">  </span><a href="#structs.Player">Player</a><br><span class="def-nbsp">  </span>PlayerIndex<br><span class="def-nbsp">  </span>Result<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.DoBadThingToPlayer" class="abs"></a><h4 class="def-h4">DoBadThingToPlayer</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Allow<br><span class="def-nbsp">  </span><a href="#structs.MapMonster">Monster</a> <span class="def-ver">[MM7+]</span><br><span class="def-nbsp">  </span>MonsterIndex <span class="def-ver">[MM7+]</span><br><span class="def-nbsp">  </span><a href="#structs.Player">Player</a><br><span class="def-nbsp">  </span>PlayerIndex<br><span class="def-nbsp">  </span><a href="#const.MonsterBonus">Thing</a><br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.GetStatisticEffect" class="abs"></a><h4 class="def-h4">GetStatisticEffect</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Result<br><span class="def-nbsp">  </span>Value<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.UseMouseItem" class="abs"></a><h4 class="def-h4">UseMouseItem</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span><a href="#structs.Player">ActivePlayer</a><br><span class="def-nbsp">  </span>ActivePlayerIndex<br><span class="def-nbsp">  </span>Allow<br><span class="def-nbsp">  </span>CallDefault<br><span class="def-nbsp">  </span>IsPortraitClick<br><span class="def-nbsp">  </span><a href="#structs.Player">Player</a><br><span class="def-nbsp">  </span>PlayerIndex<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.MonsterKilled" class="abs"></a><h4 class="def-h4">MonsterKilled</h4> <span class="def-nbsp"> </span><b>(</b> <a href="#structs.MapMonster">mon</a>, monIndex, defaultHandler <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.ItemAdditionalDamage" class="abs"></a><h4 class="def-h4">ItemAdditionalDamage</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span><a href="#const.Damage">DamageKind</a><br><span class="def-nbsp">  </span>Item<br><span class="def-nbsp">  </span>Result<br><span class="def-nbsp">  </span>Vampiric<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.CalcDamageToMonster" class="abs"></a><h4 class="def-h4">CalcDamageToMonster</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Damage<br><span class="def-nbsp">  </span><a href="#const.Damage">DamageKind</a><br><span class="def-nbsp">  </span><a href="#structs.MapMonster">Monster</a><br><span class="def-nbsp">  </span>MonsterIndex<br><span class="def-nbsp">  </span>Result<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.PickCorpse" class="abs"></a><h4 class="def-h4">PickCorpse</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Allow<br><span class="def-nbsp">  </span>CallDefault<br><span class="def-nbsp">  </span><a href="#structs.MapMonster">Monster</a><br><span class="def-nbsp">  </span>MonsterIndex<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.CastTelepathy" class="abs"></a><h4 class="def-h4">CastTelepathy</h4> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Allow<br><span class="def-nbsp">  </span>CallDefault<br><span class="def-nbsp">  </span><a href="#structs.MapMonster">Monster</a><br><span class="def-nbsp">  </span>MonsterIndex<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-evt.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>evt.lua</h3>
 
&nbsp;<i class="def-ib">Events:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="events.LeaveMap" class="abs"></a><h4 class="def-h4">LeaveMap</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.LeaveGame" class="abs"></a><h4 class="def-h4">LeaveGame</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.BeforeLoadMap" class="abs"></a><h4 class="def-h4">BeforeLoadMap</h4> <span class="def-nbsp"> </span><b>(</b> WasInGame <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.CancelLoadingMapScripts" class="abs"></a><h4 class="def-h4">CancelLoadingMapScripts</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 Return <b class="def-param">true</b> to cancel execution of map scripts. Used by the Editor.
</td>
</tr><tr>
<td class="def-left">
<a name="events.LoadMap" class="abs"></a><h4 class="def-h4">LoadMap</h4> <span class="def-nbsp"> </span><b>(</b> WasInGame, NoScripts <b>)</b>
</td><td class="def-right">
 <b class="def-param">NoScripts</b> = <b class="def-param">true</b> if map scripts execution was cancelled by <a href="#events.CancelLoadingMapScripts">CancelLoadingMapScripts</a> event.
</td>
</tr><tr>
<td class="def-left">
<a name="events.AfterLoadMap" class="abs"></a><h4 class="def-h4">AfterLoadMap</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.GetEventHint" class="abs"></a><h4 class="def-h4">GetEventHint</h4> <span class="def-nbsp"> </span><b>(</b> evtId <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.GetMazeInfo" class="abs"></a><h4 class="def-h4">GetMazeInfo</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.EvtMap" class="abs"></a><h4 class="def-h4">EvtMap</h4> <span class="def-nbsp"> </span><b>(</b> evtId, seq <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.EvtGlobal" class="abs"></a><h4 class="def-h4">EvtGlobal</h4> <span class="def-nbsp"> </span><b>(</b> evtId, seq <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-main.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>main.lua</h3>
 
&nbsp;<i class="def-ib">Events:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="events.StructsLoaded" class="abs"></a><h4 class="def-h4">StructsLoaded</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="events.ScriptsLoaded" class="abs"></a><h4 class="def-h4">ScriptsLoaded</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-timers.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>timers.lua</h3>
 
&nbsp;<i class="def-ib">Events:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="events.Tick" class="abs"></a><h4 class="def-h4">Tick</h4> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>


<br>
<hr>
<a name="General-Functions"></a><h2>General Functions</h2>



<br>
<a name="StructsAfter-Backup.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Structs\After\ </span>Backup.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="LocalFile" class="abs"></a><h5 class="def-h5">LocalFile</h5> <span class="def-nbsp"> </span><b>(</b> t <b>)</b>
</td><td class="def-right">
 Pass any table from <a href="#structs.GameStructure">Game.*</a> to this function to make it restore its original state after the player exits the map.
</td>
</tr><tr>
<td class="def-left">
<a name="LocalMonstersTxt" class="abs"></a><h5 class="def-h5">LocalMonstersTxt</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="LocalHostileTxt" class="abs"></a><h5 class="def-h5">LocalHostileTxt</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="LocalNPCNews" class="abs"></a><h5 class="def-h5">LocalNPCNews</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="StructsAfter-DataTablesSupport.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Structs\After\ </span>DataTablesSupport.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="SplitLines" class="abs"></a><h5 class="def-h5">SplitLines</h5> <span class="def-nbsp"> </span><b>(</b> str, startIdx <b>)</b>
</td><td class="def-right">
 \r\n, \r
</td>
</tr><tr>
<td class="def-left">
<a name="SplitLinesAny" class="abs"></a><h5 class="def-h5">SplitLinesAny</h5> <span class="def-nbsp"> </span><b>(</b> str, startIdx <b>)</b>
</td><td class="def-right">
 \r\n, \n, \r
</td>
</tr><tr>
<td class="def-left">
<a name="SplitTabs" class="abs"></a><h5 class="def-h5">SplitTabs</h5> <span class="def-nbsp"> </span><b>(</b> str, startIdx <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="StructsAfter-Functions.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Structs\After\ </span>Functions.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="SplitSkill" class="abs"></a><h5 class="def-h5">SplitSkill</h5> <span class="def-nbsp"> </span><b>(</b> val <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="JoinSkill" class="abs"></a><h5 class="def-h5">JoinSkill</h5> <span class="def-nbsp"> </span><b>(</b> skill, mastery:const <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="XYZ" class="abs"></a><h5 class="def-h5">XYZ</h5> <span class="def-nbsp"> </span><b>(</b> t, x, y, z <b>)</b>
</td><td class="def-right">
 Get X,Y,Z, fields:<div class="def-codeblock"><B><font color="#00D">local</font></B> x, y, z <B><font color="#00D">=</font></B> XYZ(Party)</div><br>Set X,Y,Z, fields:<div class="def-codeblock">XYZ(Party, x, y, z)</div><br>Enumerate "X", "Y", "Z" strings:<div class="def-codeblock"><B><font color="Black">for</font></B> X <B><font color="Black">in</font></B> XYZ <B><font color="Black">do</font></B><br><span> </span><span> </span><font color="Brown">print</font>(Party[X])<br><B><font color="Black">end</font></B></div><br>
</td>
</tr><tr>
<td class="def-left">
<a name="Message" class="abs"></a><h5 class="def-h5">Message</h5> <span class="def-nbsp"> </span><b>(</b> text <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="Question" class="abs"></a><h5 class="def-h5">Question</h5> <span class="def-nbsp"> </span><b>(</b> text, qtext <b>)</b>
</td><td class="def-right">
 Returns the reply. <b class="def-param">text</b> is shown as message, <b class="def-param">qtext</b> is shown at the beginning of reply field.<br>Doesn't work in houses in MM7.
</td>
</tr><tr>
<td class="def-left">
<a name="ReplaceNPCTopic" class="abs"></a><h5 class="def-h5">ReplaceNPCTopic</h5> <span class="def-nbsp"> </span><b>(</b> old, new <b>)</b>
</td><td class="def-right">
 Searches through all NPC topics and replaces one topic with another
</td>
</tr><tr>
<td class="def-left">
<a name="AddGoldExp" class="abs"></a><h5 class="def-h5">AddGoldExp</h5> <span class="def-nbsp"> </span><b>(</b> gold, exp <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="ShowQuestEffect" class="abs"></a><h5 class="def-h5">ShowQuestEffect</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 Plays sound and shows visual effect on current character's face
</td>
</tr><tr>
<td class="def-left">
<a name="TakeItemFromParty" class="abs"></a><h5 class="def-h5">TakeItemFromParty</h5> <span class="def-nbsp"> </span><b>(</b> id, keep <b>)</b>
</td><td class="def-right">
 <b class="def-param">id</b> can also be a table or a table of tables. See <b class="def-param">Quest Alchemy.lua</b> from <a href="#Quests">quest examples</a>
</td>
</tr><tr>
<td class="def-left">
<a name="CheckMonstersKilled" class="abs"></a><h5 class="def-h5">CheckMonstersKilled</h5> <span class="def-nbsp"> </span><b>{</b> <br><span class="def-nbsp">  </span>Group<br><span class="def-nbsp">  </span>Monster<br><span class="def-nbsp">  </span>MonsterIndex<br><span class="def-nbsp">  </span>NameId<br><span class="def-nbsp">  </span>Count<br><span class="def-nbsp">  </span>InvisibleAsDead<br> <b>}</b>
</td><td class="def-right">
 See <b class="def-param">Quest Kill Monsters.lua</b> from <a href="#Quests">quest examples</a>
</td>
</tr><tr>
<td class="def-left">
<a name="EnumAvailableSkills" class="abs"></a><h5 class="def-h5">EnumAvailableSkills</h5> <span class="def-nbsp"> </span><b>(</b> class <b>)</b>
</td><td class="def-right">
 Returns <a href="#const.Skills">Skill</a>, <a href="#const">MaxMastery</a>
</td>
</tr><tr>
<td class="def-left">
<a name="SummonMonster" class="abs"></a><h5 class="def-h5">SummonMonster</h5> <span class="def-nbsp"> </span><b>(</b> id, x, y, z, treasure, place <b>)</b>
</td><td class="def-right">
 Unless <b class="def-param">treasure</b> is <b class="def-param">true</b>, the monster doesn't have any items or gold.<br><b class="def-param">place</b> defines monster index in <a href="#structs.GameMap.Monsters">Map.Monsters</a> array if specified.
</td>
</tr><tr>
<td class="def-left">
<a name="SummonItem" class="abs"></a><h5 class="def-h5">SummonItem</h5> <span class="def-nbsp"> </span><b>(</b> number, x, y, z, speed <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="RebildIDList" class="abs"></a><h5 class="def-h5">RebildIDList</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="ChangeSprite" class="abs"></a><h5 class="def-h5">ChangeSprite</h5> <span class="def-nbsp"> </span><b>(</b> n, name <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="CreateSprite" class="abs"></a><h5 class="def-h5">CreateSprite</h5> <span class="def-nbsp"> </span><b>{</b> name, x, y, z;<br><span class="def-nbsp">  </span>Bits<br><span class="def-nbsp">  </span>X<br><span class="def-nbsp">  </span>Y<br><span class="def-nbsp">  </span>Z<br> <b>}</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="MoveModel" class="abs"></a><h5 class="def-h5">MoveModel</h5> <span class="def-nbsp"> </span><b>(</b> m, dx, dy, dz, MoveParty <b>)</b>
</td><td class="def-right">
 <b class="def-param">MoveParty</b> isn't supported yet
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="StructsAfter-LocalizationAndQuests.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Structs\After\ </span>LocalizationAndQuests.lua</h3>
 
&nbsp;<i class="def-ib">Variables:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="TakeQuestOperation" class="abs"></a><h5 class="def-h5">TakeQuestOperation</h5>
</td><td class="def-right">
 Should be either "Add" or "Set". This determines the overlay flash on character face when a quest is taken.<br><span class="def-ver">[MM6, MM8]</span> Defaults to "Add".<br><span class="def-ver">[MM7]</span> Defaults to "Set".
</td>
</tr><tr>
<td class="def-left">
<a name="Quests-" class="abs"></a><h5 class="def-h5">Quests</h5>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="QuestNPC" class="abs"></a><h5 class="def-h5">QuestNPC</h5>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="vars.Quests" class="abs"></a><h5 class="def-h5">vars.Quests</h5>[name]
</td><td class="def-right">
 Quest states: nil, "Given", "Done" or a custom state.
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="LocalizeAll" class="abs"></a><h5 class="def-h5">LocalizeAll</h5> <span class="def-nbsp"> </span><b>(</b> t, over <b>)</b>
</td><td class="def-right">
 Possible values of <b class="def-param">over</b>:<br><span class="def-nbsp">  </span>true: <span class="def-nbsp"> </span>permanent setup &ndash; overwrite all (used in <b>Localization</b> scripts only)<br><span class="def-nbsp">  </span>false: <span class="def-nbsp"> </span>temporary setup &ndash; overwrite temporary setup only<br><span class="def-nbsp">  </span>"update": <span class="def-nbsp"> </span>remove all previous temporary setup, overwrite temporary setup only
</td>
</tr><tr>
<td class="def-left">
<a name="Localize" class="abs"></a><h5 class="def-h5">Localize</h5> <span class="def-nbsp"> </span><b>(</b> t, over, lev = 1 <b>)</b>
</td><td class="def-right">
 Possible values of <b class="def-param">over</b>:<br><span class="def-nbsp">  </span>true: <span class="def-nbsp"> </span>permanent setup &ndash; overwrite all (used in <b>Localization</b> scripts only)<br><span class="def-nbsp">  </span>false: <span class="def-nbsp"> </span>temporary setup &ndash; overwrite temporary setup only<br><span class="def-nbsp">  </span>"update": <span class="def-nbsp"> </span>remove all previous temporary setup, overwrite temporary setup only
</td>
</tr><tr>
<td class="def-left">
<a name="GenerateQuestsLocalization" class="abs"></a><h5 class="def-h5">GenerateQuestsLocalization</h5> <span class="def-nbsp"> </span><b>(</b> IsLua <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="GenerateLocalization" class="abs"></a><h5 class="def-h5">GenerateLocalization</h5> <span class="def-nbsp"> </span><b>(</b> IsLua, IncludeQuests <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="QuestBranch" class="abs"></a><h5 class="def-h5">QuestBranch</h5> <span class="def-nbsp"> </span><b>(</b> branch, persist <b>)</b>
</td><td class="def-right">
 Sets current dialog branch to <b class="def-param">branch</b> if it's specified.<br><b class="def-param">persist</b> parameter makes the branch persist after you reenter NPC dialog.<br>Returns current branch when called without parameters.<br>If there is no persisted branch name, when you enter NPC dialog the branch is set to "".
</td>
</tr><tr>
<td class="def-left">
<a name="Quest" class="abs"></a><h5 class="def-h5">Quest</h5> <span class="def-nbsp"> </span><b>{</b> name;<br><span class="def-nbsp">  </span>After<br><span class="def-nbsp">  </span>Awards<br><span class="def-nbsp">  </span>BaseName<br><span class="def-nbsp">  </span>Branch<br><span class="def-nbsp">  </span>CheckDone<br><span class="def-nbsp">  </span>CheckGive<br><span class="def-nbsp">  </span>Done<br><span class="def-nbsp">  </span>DoneState<br><span class="def-nbsp">  </span>Event<br><span class="def-nbsp">  </span>Execute<br><span class="def-nbsp">  </span>Exp<br><span class="def-nbsp">  </span>Experience<br><span class="def-nbsp">  </span>FirstStdTopic<br><span class="def-nbsp">  </span>GetGreeting<br><span class="def-nbsp">  </span>GetTopic<br><span class="def-nbsp">  </span>Give<br><span class="def-nbsp">  </span>GivenItem<br><span class="def-nbsp">  </span>GivenState<br><span class="def-nbsp">  </span>Gold<br><span class="def-nbsp">  </span>IsGiven<br><span class="def-nbsp">  </span>KeepQuestItem<br><span class="def-nbsp">  </span>NPC<br><span class="def-nbsp">  </span>Name<br><span class="def-nbsp">  </span>NeverDone<br><span class="def-nbsp">  </span>NeverGiven<br><span class="def-nbsp">  </span>Quest<br><span class="def-nbsp">  </span>QuestGold<br><span class="def-nbsp">  </span>QuestItem<br><span class="def-nbsp">  </span>RewardItem<br><span class="def-nbsp">  </span>SetTexts<br><span class="def-nbsp">  </span>Slot<br><span class="def-nbsp">  </span>StdTopic<br><span class="def-nbsp">  </span>StdTopicDone<br><span class="def-nbsp">  </span>StdTopicGiven<br><span class="def-nbsp">  </span>TakeQuestOperation<br><span class="def-nbsp">  </span>Texts<br><span class="def-nbsp">  </span>Undone<br><span class="def-nbsp">  </span>Ungive<br> <b>}</b>
</td><td class="def-right">
 See <a href="#Quests">quest examples</a>
</td>
</tr><tr>
<td class="def-left">
<a name="Greeting" class="abs"></a><h5 class="def-h5">Greeting</h5> <span class="def-nbsp"> </span><b>{</b> text, textSeen;<br><span class="def-nbsp">  </span>Text<br><span class="def-nbsp">  </span>TextSeen<br><span class="def-nbsp">  </span>... Quest() parameters ...<br> <b>}</b>
</td><td class="def-right">
 See <a href="#Quests">quest examples</a>
</td>
</tr><tr>
<td class="def-left">
<a name="NPCTopic" class="abs"></a><h5 class="def-h5">NPCTopic</h5> <span class="def-nbsp"> </span><b>{</b> topic, text;<br><span class="def-nbsp">  </span>Topic<br><span class="def-nbsp">  </span>Text<br><span class="def-nbsp">  </span>... Quest() parameters ...<br> <b>}</b>
</td><td class="def-right">
 See <a href="#Quests">quest examples</a>
</td>
</tr><tr>
<td class="def-left">
<a name="KillMonstersQuest" class="abs"></a><h5 class="def-h5">KillMonstersQuest</h5> <span class="def-nbsp"> </span><b>{</b> name = nil, ... A list of either tables with CheckMonstersKilled() parameters or partial completion messages ...;<br><span class="def-nbsp">    </span>... Quest() parameters ...<br> <b>}</b>
</td><td class="def-right">
 See <b class="def-param">Quest Kill Monsters.lua</b> from <a href="#Quests">quest examples</a>
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="StructsAfter-Text-Tables.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Structs\After\ </span>Text Tables.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="ParseTextTable" class="abs"></a><h5 class="def-h5">ParseTextTable</h5> <span class="def-nbsp"> </span><b>(</b> s, r, SkipEmpty, AssignTables <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="LoadTextTable" class="abs"></a><h5 class="def-h5">LoadTextTable</h5> <span class="def-nbsp"> </span><b>(</b> s, r, SkipEmpty, AssignTables <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="ParseBasicTextTable" class="abs"></a><h5 class="def-h5">ParseBasicTextTable</h5> <span class="def-nbsp"> </span><b>(</b> s, StartingLinesCount <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="LoadBasicTextTable" class="abs"></a><h5 class="def-h5">LoadBasicTextTable</h5> <span class="def-nbsp"> </span><b>(</b> s, StartingLinesCount <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="ParseNumbersTextTable" class="abs"></a><h5 class="def-h5">ParseNumbersTextTable</h5> <span class="def-nbsp"> </span><b>(</b> s, StartingLinesCount <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="LoadNumbersTextTable" class="abs"></a><h5 class="def-h5">LoadNumbersTextTable</h5> <span class="def-nbsp"> </span><b>(</b> s, StartingLinesCount <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="TransposeTextTable" class="abs"></a><h5 class="def-h5">TransposeTextTable</h5> <span class="def-nbsp"> </span><b>(</b> t <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="ReadLodTextTable" class="abs"></a><h5 class="def-h5">ReadLodTextTable</h5> <span class="def-nbsp"> </span><b>(</b> fname, row, col <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-Common.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>Common.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="assertnum" class="abs"></a><h5 class="def-h5">assertnum</h5> <span class="def-nbsp"> </span><b>(</b> v, level, msg <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="tget" class="abs"></a><h5 class="def-h5">tget</h5> <span class="def-nbsp"> </span><b>(</b> t, k, ... <b>)</b>
</td><td class="def-right">
 Returns <span class="def-code">t[k]</span> if it exists, otherwise sets <span class="def-code">t[k] <B><font color="#00D">=</font></B> <B><font color="Black">{</font></B><B><font color="Black">}</font></B></span> and returns <span class="def-code">t[k]</span>.<br>The process is repeated for additional parameters, e.g. <span class="def-code">t[k][k1]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="pcall2" class="abs"></a><h5 class="def-h5">pcall2</h5> <span class="def-nbsp"> </span><b>(</b> ... <b>)</b>
</td><td class="def-right">
 Like <b class="def-param">pcall</b>, but in case of an error shows error message
</td>
</tr><tr>
<td class="def-left">
<a name="xpcall2" class="abs"></a><h5 class="def-h5">xpcall2</h5> <span class="def-nbsp"> </span><b>(</b> ... <b>)</b>
</td><td class="def-right">
 Like <b class="def-param">xpcall</b>, but in case of an error shows error message
</td>
</tr><tr>
<td class="def-left">
<a name="cocall" class="abs"></a><h5 class="def-h5">cocall</h5> <span class="def-nbsp"> </span><b>(</b> f, ... <b>)</b>
</td><td class="def-right">
 Same as <span class="def-code"><font color="Brown">coroutine</font>.<font color="Brown">resume</font>(<font color="Brown">coroutine</font>.<font color="Brown">create</font>(f), ...)</span>
</td>
</tr><tr>
<td class="def-left">
<a name="cocall2" class="abs"></a><h5 class="def-h5">cocall2</h5> <span class="def-nbsp"> </span><b>(</b> f, ... <b>)</b>
</td><td class="def-right">
 Like <a href="#cocall">cocall</a>, but in case of an error shows error message
</td>
</tr><tr>
<td class="def-left">
<a name="dofile2" class="abs"></a><h5 class="def-h5">dofile2</h5> <span class="def-nbsp"> </span><b>(</b> path, ... <b>)</b>
</td><td class="def-right">
 Loads file in protected mode, in case of an error shows error message. Return format is the same as that of <b class="def-param">pcall</b>
</td>
</tr><tr>
<td class="def-left">
<a name="coroutine.resume2" class="abs"></a><h5 class="def-h5">coroutine.resume2</h5> <span class="def-nbsp"> </span><b>(</b> ... <b>)</b>
</td><td class="def-right">
 Like <b class="def-param">coroutine.resume</b>, but in case of an error shows error message
</td>
</tr><tr>
<td class="def-left">
<a name="os.GetErrorText" class="abs"></a><h5 class="def-h5">os.GetErrorText</h5> <span class="def-nbsp"> </span><b>(</b> code <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="path.find" class="abs"></a><h5 class="def-h5">path.find</h5> <span class="def-nbsp"> </span><b>(</b> filter, dir <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="path.FindFirst" class="abs"></a><h5 class="def-h5">path.FindFirst</h5> <span class="def-nbsp"> </span><b>(</b> filter, dir <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="path.findfirst" class="abs"></a><h5 class="def-h5">path.findfirst</h5> <span class="def-nbsp"> </span><b>(</b> filter, dir <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="os.chdir" class="abs"></a><h5 class="def-h5">os.chdir</h5> <span class="def-nbsp"> </span><b>(</b> [dir] <b>)</b>
</td><td class="def-right">
 Returns previous current directory. Call without parameters to look up current dirrectory
</td>
</tr><tr>
<td class="def-left">
<a name="os.mkdir" class="abs"></a><h5 class="def-h5">os.mkdir</h5> <span class="def-nbsp"> </span><b>(</b> dir <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="os.copy" class="abs"></a><h5 class="def-h5">os.copy</h5> <span class="def-nbsp"> </span><b>(</b> old, new, FailIfExists <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="path.GetRelativePath" class="abs"></a><h5 class="def-h5">path.GetRelativePath</h5> <span class="def-nbsp"> </span><b>(</b> from, to, isDir <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="debug.FunctionFile" class="abs"></a><h5 class="def-h5">debug.FunctionFile</h5> <span class="def-nbsp"> </span><b>(</b> f <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-Debug.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>Debug.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="debug.HideConsole" class="abs"></a><h5 class="def-h5">debug.HideConsole</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-ErrorFunction.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>ErrorFunction.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="errorinfo" class="abs"></a><h5 class="def-h5">errorinfo</h5> <span class="def-nbsp"> </span><b>(</b> s <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="tostring2" class="abs"></a><h5 class="def-h5">tostring2</h5> <span class="def-nbsp"> </span><b>(</b> v, lim <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-RSFunctions.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>RSFunctions.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="table.swap" class="abs"></a><h5 class="def-h5">table.swap</h5> <span class="def-nbsp"> </span><b>(</b> t, min, max <b>)</b>
</td><td class="def-right">
 Swaps order of the array. <b class="def-param">min</b> and <b class="def-param">max</b> default to 1 and <b class="def-param">#t</b> respectively
</td>
</tr><tr>
<td class="def-left">
<a name="table.move" class="abs"></a><h5 class="def-h5">table.move</h5> <span class="def-nbsp"> </span><b>(</b> t, from, to <b>)</b>
</td><td class="def-right">
 Moves an element from one index to another
</td>
</tr><tr>
<td class="def-left">
<a name="table.copy" class="abs"></a><h5 class="def-h5">table.copy</h5> <span class="def-nbsp"> </span><b>(</b> src, dest, overwrite <b>)</b>
</td><td class="def-right">
 Performs shallow copy. If <b class="def-param">dest</b> = <b class="def-param">nil</b>, a new table is created
</td>
</tr><tr>
<td class="def-left">
<a name="table.find" class="abs"></a><h5 class="def-h5">table.find</h5> <span class="def-nbsp"> </span><b>(</b> t, v <b>)</b>
</td><td class="def-right">
 Finds value <b class="def-param">v</b>, returns corresponding key
</td>
</tr><tr>
<td class="def-left">
<a name="table.ifind" class="abs"></a><h5 class="def-h5">table.ifind</h5> <span class="def-nbsp"> </span><b>(</b> t, v, start <b>)</b>
</td><td class="def-right">
 Finds value <b class="def-param">v</b> in array part of the table, returns first match. Uses raw access (<b class="def-param">rawget</b>)
</td>
</tr><tr>
<td class="def-left">
<a name="table.invert" class="abs"></a><h5 class="def-h5">table.invert</h5> <span class="def-nbsp"> </span><b>(</b> t, out <b>)</b>
</td><td class="def-right">
 Swaps keys and values
</td>
</tr><tr>
<td class="def-left">
<a name="coroutine.yieldN" class="abs"></a><h5 class="def-h5">coroutine.yieldN</h5> <span class="def-nbsp"> </span><b>(</b> n, ... <b>)</b>
</td><td class="def-right">
 <b class="def-param">n</b> times in a raw calls <span class="def-code"><font color="Brown">coroutine</font>.<font color="Brown">yield</font>(...)</span>. Returns the result of last call
</td>
</tr><tr>
<td class="def-left">
<a name="path.ext" class="abs"></a><h5 class="def-h5">path.ext</h5> <span class="def-nbsp"> </span><b>(</b> s <b>)</b>
</td><td class="def-right">
 Extracts extension (e.g. returns <span class="def-code"><font color="#90A">&quot;.txt&quot;</font></span> etc.)
</td>
</tr><tr>
<td class="def-left">
<a name="path.setext" class="abs"></a><h5 class="def-h5">path.setext</h5> <span class="def-nbsp"> </span><b>(</b> s, ext <b>)</b>
</td><td class="def-right">
 Changes extension (e.g. <span class="def-code">path.setext(<font color="#90A">&quot;my.txt&quot;</font>, <font color="#90A">&quot;_2.txt&quot;</font>) <B><font color="#333">==</font></B> <font color="#90A">&quot;my_2.txt&quot;</font></span>)
</td>
</tr><tr>
<td class="def-left">
<a name="path.name" class="abs"></a><h5 class="def-h5">path.name</h5> <span class="def-nbsp"> </span><b>(</b> s <b>)</b>
</td><td class="def-right">
 Extracts file name
</td>
</tr><tr>
<td class="def-left">
<a name="path.dir" class="abs"></a><h5 class="def-h5">path.dir</h5> <span class="def-nbsp"> </span><b>(</b> s <b>)</b>
</td><td class="def-right">
 Extracts file path including trailing slash
</td>
</tr><tr>
<td class="def-left">
<a name="path.addslash" class="abs"></a><h5 class="def-h5">path.addslash</h5> <span class="def-nbsp"> </span><b>(</b> s <b>)</b>
</td><td class="def-right">
 Adds trailing slash
</td>
</tr><tr>
<td class="def-left">
<a name="path.noslash" class="abs"></a><h5 class="def-h5">path.noslash</h5> <span class="def-nbsp"> </span><b>(</b> s <b>)</b>
</td><td class="def-right">
 Removes trailing slash
</td>
</tr><tr>
<td class="def-left">
<a name="io.save" class="abs"></a><h5 class="def-h5">io.save</h5> <span class="def-nbsp"> </span><b>(</b> path, s, translate <b>)</b>
</td><td class="def-right">
 Saves a string into a file (overwrites it)
</td>
</tr><tr>
<td class="def-left">
<a name="io.load" class="abs"></a><h5 class="def-h5">io.load</h5> <span class="def-nbsp"> </span><b>(</b> path, translate <b>)</b>
</td><td class="def-right">
 Loads a file as a string
</td>
</tr><tr>
<td class="def-left">
<a name="string.split" class="abs"></a><h5 class="def-h5">string.split</h5> <span class="def-nbsp"> </span><b>(</b> str, delim, plain <b>)</b>
</td><td class="def-right">
 Returns a table of strings. <b class="def-param">delim</b> can be a plain string (<b class="def-param">plain</b> = <b class="def-param">true</b>) or a pattern
</td>
</tr><tr>
<td class="def-left">
<a name="string.csplit" class="abs"></a><h5 class="def-h5">string.csplit</h5> <span class="def-nbsp"> </span><b>(</b> str, charlist <b>)</b>
</td><td class="def-right">
 Any character from <b class="def-param">charlist</b> string is a delimiter
</td>
</tr><tr>
<td class="def-left">
<a name="string.replace" class="abs"></a><h5 class="def-h5">string.replace</h5> <span class="def-nbsp"> </span><b>(</b> str, old, new <b>)</b>
</td><td class="def-right">
 Parameters are treated as plain strings, not patterns
</td>
</tr><tr>
<td class="def-left">
<a name="sortpairs" class="abs"></a><h5 class="def-h5">sortpairs</h5> <span class="def-nbsp"> </span><b>(</b> t <b>)</b>
</td><td class="def-right">
 Returns <b class="def-param">pairs</b> in ascending order with the following comparison rule: <span class="def-nbsp"> </span>number &lt; boolean &lt; string &lt; userdata &lt; table &lt; function &lt; thread
</td>
</tr><tr>
<td class="def-left">
<a name="debug.findupvalue" class="abs"></a><h5 class="def-h5">debug.findupvalue</h5> <span class="def-nbsp"> </span><b>(</b> f, name <b>)</b>
</td><td class="def-right">
 Returns <b class="def-param">index</b>, <b class="def-param">value</b> of an upvalue with the given name, or <b class="def-param">nil</b> if it doesn't exist
</td>
</tr><tr>
<td class="def-left">
<a name="debug.findlocal" class="abs"></a><h5 class="def-h5">debug.findlocal</h5> <span class="def-nbsp"> </span><b>(</b> thread, lev, name <b>)</b>
</td><td class="def-right">
 Returns <b class="def-param">index</b>, <b class="def-param">value</b> of a local variable with the given name, or <b class="def-param">nil</b> if it doesn't exist
</td>
</tr><tr>
<td class="def-left">
<a name="debug.upvalues" class="abs"></a><h5 class="def-h5">debug.upvalues</h5> <span class="def-nbsp"> </span><b>(</b> f, cache <b>)</b>
</td><td class="def-right">
 If <b class="def-param">cache</b> = <b class="def-param">true</b>, upvalue indexes are cached.<br>Usage:<br>1) <span class="def-code">v <B><font color="#00D">=</font></B> <font color="Brown">debug</font>.upvalues(f).upvalue_name</span><br>2) <span class="def-code"><font color="Brown">debug</font>.upvalues(f).upvalue_name <B><font color="#00D">=</font></B> v</span><br>3) <span class="def-code"><B><font color="Black">for</font></B> k, v <B><font color="Black">in</font></B> <font color="Brown">debug</font>.upvalues(f) <B><font color="Black">do</font></B> <span> </span><font color="Brown">print</font>(k, v) <span> </span><B><font color="Black">end</font></B></span>
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-RSMem.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>RSMem.lua</h3><a name="&#8230;"></a><h5 class="def-hidden">&#8230;</h5>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="mem.call" class="abs"></a>mem.call <span class="def-nbsp"> </span><b>(</b> t, ... <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.IgnoreProtection" class="abs"></a>mem.IgnoreProtection <span class="def-nbsp"> </span><b>(</b> on <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.malloc" class="abs"></a>mem.malloc <span class="def-nbsp"> </span><b>(</b> size <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.alloc" class="abs"></a>mem.alloc <span class="def-nbsp"> </span><b>(</b> size <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.free" class="abs"></a>mem.free <span class="def-nbsp"> </span><b>(</b> p <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.realloc" class="abs"></a>mem.realloc <span class="def-nbsp"> </span><b>(</b> p, size <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.new" class="abs"></a>mem.new <span class="def-nbsp"> </span><b>(</b> size, f, ... <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.StaticAlloc" class="abs"></a>mem.StaticAlloc <span class="def-nbsp"> </span><b>(</b> size <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.copy" class="abs"></a>mem.copy <span class="def-nbsp"> </span><b>(</b> dest, src, count <b>)</b>
</td><td class="def-right">
 <b class="def-param">count</b> can be omitted if <b class="def-param">src</b> is a string or a structure
</td>
</tr><tr>
<td class="def-left">
<a name="mem.fill" class="abs"></a>mem.fill <span class="def-nbsp"> </span><b>(</b> ptr, n, c = 0 <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.LuaAlloc" class="abs"></a>mem.LuaAlloc <span class="def-nbsp"> </span><b>(</b> size <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.func" class="abs"></a>mem.func <span class="def-nbsp"> </span><b>(</b> ... <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.LoadDll" class="abs"></a>mem.LoadDll <span class="def-nbsp"> </span><b>(</b> name, cc <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.UnloadDll" class="abs"></a>mem.UnloadDll <span class="def-nbsp"> </span><b>(</b> t <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.GetProcAddress" class="abs"></a>mem.GetProcAddress <span class="def-nbsp"> </span><b>(</b> p, proc <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.structs.getdefine" class="abs"></a>mem.structs.getdefine <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.structs.getunions" class="abs"></a>mem.structs.getunions <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.structs.CustomType" class="abs"></a>mem.structs.CustomType <span class="def-nbsp"> </span><b>(</b> name, size, f <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.struct" class="abs"></a>mem.struct <span class="def-nbsp"> </span><b>(</b> f, class, p <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.GetHookSize" class="abs"></a>mem.GetHookSize <span class="def-nbsp"> </span><b>(</b> p <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.GetInstructionSize" class="abs"></a>mem.GetInstructionSize <span class="def-nbsp"> </span><b>(</b> p <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.hook" class="abs"></a>mem.hook <span class="def-nbsp"> </span><b>(</b> p, f, size <b>)</b>
</td><td class="def-right">
 Primitive call hook: 5-byte call instruction that calls into Lua code
</td>
</tr><tr>
<td class="def-left">
<a name="mem.hookjmp" class="abs"></a>mem.hookjmp <span class="def-nbsp"> </span><b>(</b> p, f, size <b>)</b>
</td><td class="def-right">
 Primitive jump hook
</td>
</tr><tr>
<td class="def-left">
<a name="mem.hookalloc" class="abs"></a>mem.hookalloc <span class="def-nbsp"> </span><b>(</b> size <b>)</b>
</td><td class="def-right">
 Allocate memory for code
</td>
</tr><tr>
<td class="def-left">
<a name="mem.hookfree" class="abs"></a>mem.hookfree <span class="def-nbsp"> </span><b>(</b> p <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="mem.copycode" class="abs"></a>mem.copycode <span class="def-nbsp"> </span><b>(</b> ptr, size, MemPtr, NoJumpBack <b>)</b>
</td><td class="def-right">
 Copies standard code into a memory block and then writes a jump back into the function<br>(the copied code must not contain jumps or calls, except within the copied block)<br><b class="def-param">MemPtr</b> can optionally specify a pre-allocated memory address.
</td>
</tr><tr>
<td class="def-left">
<a name="mem.autohook" class="abs"></a>mem.autohook <span class="def-nbsp"> </span><b>(</b> p, f, size <b>)</b>
</td><td class="def-right">
 <a href="#mem.hookjmp">hookjmp</a> with automatic calling of overwritten code (see <a href="#mem.copycode">copycode</a> note)<br>If the function returns <b class="def-param">true</b>, the jump to original code isn't performed
</td>
</tr><tr>
<td class="def-left">
<a name="mem.autohook2" class="abs"></a>mem.autohook2 <span class="def-nbsp"> </span><b>(</b> p, f, size <b>)</b>
</td><td class="def-right">
 <a href="#mem.hookjmp">hookjmp</a> with automatic calling of overwritten code (see <a href="#mem.copycode">copycode</a> note)<br>The function is called after the overwritten code<br>If the function returns <b class="def-param">true</b>, the jump to original code isn't performed
</td>
</tr><tr>
<td class="def-left">
<a name="mem.bytecodehook" class="abs"></a>mem.bytecodehook <span class="def-nbsp"> </span><b>(</b> p, code, size <b>)</b>
</td><td class="def-right">
 Like <a href="#mem.autohook">autohook</a>, but takes a compiled Asm code string as parameter<br><b class="def-param">code</b> can also be a function <span class="def-code">f(ptr)</span>. <b class="def-param">ptr</b> is the address of memory allocated for hook code or <b class="def-param">nil</b> (to calculate size)
</td>
</tr><tr>
<td class="def-left">
<a name="mem.bytecodehook2" class="abs"></a>mem.bytecodehook2 <span class="def-nbsp"> </span><b>(</b> p, code, size <b>)</b>
</td><td class="def-right">
 Like <a href="#mem.autohook2">autohook2</a>, but takes a compiled Asm code string as parameter<br>See note of <a href="#mem.bytecodehook">bytecodehook</a> about <b class="def-param">code</b>
</td>
</tr><tr>
<td class="def-left">
<a name="mem.bytecodepatch" class="abs"></a>mem.bytecodepatch <span class="def-nbsp"> </span><b>(</b> p, code, size <b>)</b>
</td><td class="def-right">
 Replaces original instructions with new ones, jumping out if needed<br>See note of <a href="#mem.bytecodehook">bytecodehook</a> about <b class="def-param">code</b>
</td>
</tr><tr>
<td class="def-left">
<a name="mem.asmhook" class="abs"></a>mem.asmhook <span class="def-nbsp"> </span><b>(</b> p, code, size <b>)</b>
</td><td class="def-right">
 Like <a href="#mem.autohook">autohook</a>, but takes an Asm code string as parameter
</td>
</tr><tr>
<td class="def-left">
<a name="mem.asmhook2" class="abs"></a>mem.asmhook2 <span class="def-nbsp"> </span><b>(</b> p, code, size <b>)</b>
</td><td class="def-right">
 Like <a href="#mem.autohook2">autohook2</a>, but takes an Asm code string as parameter
</td>
</tr><tr>
<td class="def-left">
<a name="mem.asmpatch" class="abs"></a>mem.asmpatch <span class="def-nbsp"> </span><b>(</b> p, code, size <b>)</b>
</td><td class="def-right">
 Replaces original instructions with new ones, jumping out if needed
</td>
</tr><tr>
<td class="def-left">
<a name="mem.asmproc" class="abs"></a>mem.asmproc <span class="def-nbsp"> </span><b>(</b> code <b>)</b>
</td><td class="def-right">
 Creates an Asm function
</td>
</tr><tr>
<td class="def-left">
<a name="mem.hookfunction" class="abs"></a>mem.hookfunction <span class="def-nbsp"> </span><b>(</b> p, nreg, nstack, f, size <b>)</b>
</td><td class="def-right">
 Set hook at the beginning of a function, allows calling the original function (see <a href="#mem.copycode">copycode</a> note)
</td>
</tr><tr>
<td class="def-left">
<a name="mem.hookcall" class="abs"></a>mem.hookcall <span class="def-nbsp"> </span><b>(</b> p, nreg, nstack, f <b>)</b>
</td><td class="def-right">
 Replaces an existing CALL instruction and uses the same protocol as <a href="#mem.hookfunction">hookfunction</a>
</td>
</tr><tr>
<td class="def-left">
<a name="mem.nop" class="abs"></a>mem.nop <span class="def-nbsp"> </span><b>(</b> p, n <b>)</b>
</td><td class="def-right">
 Writes <b class="def-param">n</b> NOPs
</td>
</tr><tr>
<td class="def-left">
<a name="mem.nop2" class="abs"></a>mem.nop2 <span class="def-nbsp"> </span><b>(</b> p, p2 <b>)</b>
</td><td class="def-right">
 Writes NOPs from <b class="def-param">p</b> to <b class="def-param">p2</b> - 1
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-RSPersist.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>RSPersist.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="persist" class="abs"></a><h5 class="def-h5">persist</h5> <span class="def-nbsp"> </span><b>(</b> t, perm <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="unpersist" class="abs"></a><h5 class="def-h5">unpersist</h5> <span class="def-nbsp"> </span><b>(</b> buf, perm, data <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-dump.lua"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>dump.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="dump" class="abs"></a><h5 class="def-h5">dump</h5> <span class="def-nbsp"> </span><b>(</b> t, depth, exact <b>)</b>
</td><td class="def-right">
 Useful for debugging and experiments. Shows <b class="def-param">t</b>, expanding all tables in it up to the <b class="def-param">depth</b> level. In <b class="def-param">exact</b> = <b class="def-param">true</b> mode outputs proper Lua code.
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-events.lua-"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>events.lua</h3>
 
&nbsp;<i class="def-ib">Variables:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="VFlipUnfixed" class="abs"></a><h5 class="def-h5">VFlipUnfixed</h5>
</td><td class="def-right">
 <span class="def-ver">[MM6]</span> <span class="def-nbsp"> </span>Textures on horizontal outdoor surfaces are flipped vertically. This is default to preserve look of standard maps.
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="HookManager" class="abs"></a><h5 class="def-h5">HookManager</h5> <span class="def-nbsp"> </span><b>(</b> ref <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="GetCurrentNPC" class="abs"></a><h5 class="def-h5">GetCurrentNPC</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="FixVFlip" class="abs"></a><h5 class="def-h5">FixVFlip</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 <span class="def-ver">[MM6]</span> <span class="def-nbsp"> </span>Turns off texture flip on horizontal outdoor surfaces. Note that the editor accounts for vertical flip, so you probably shouldn't call this function.
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-evt.lua-"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>evt.lua</h3>
 
&nbsp;<i class="def-ib">Variables:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="vars" class="abs"></a><h5 class="def-h5">vars</h5>
</td><td class="def-right">
 Variables that are stored in saved game
</td>
</tr><tr>
<td class="def-left">
<a name="mapvars" class="abs"></a><h5 class="def-h5">mapvars</h5>
</td><td class="def-right">
 Variables stored in a saved game that belong to current map. On map refill <b class="def-param">mapvars</b> are cleared, but old table is stored in <a href="#structs.GameMap.Refilled">Map.Refilled</a>.
</td>
</tr><tr>
<td class="def-left">
<a name="evt.CanShowTopic" class="abs"></a><h5 class="def-h5">evt.CanShowTopic</h5>[]
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span> <span class="def-nbsp"> </span>Functions that can return <b class="def-param">true</b> or <b class="def-param">false</b> to change topic visibility
</td>
</tr><tr>
<td class="def-left">
<a name="evt.map" class="abs"></a><h5 class="def-h5">evt.map</h5>[]
</td><td class="def-right">
 Event handlers<br><br>Event indexes convention:<br>Indexes 20000 &ndash; 22999 are for sprite events, so that event (20000 + i) corresponds to <a href="#structs.GameMap.Sprites">Map.Sprites</a>[i].
</td>
</tr><tr>
<td class="def-left">
<a name="evt.hint" class="abs"></a><h5 class="def-h5">evt.hint</h5>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.MazeInfo" class="abs"></a><h5 class="def-h5">evt.MazeInfo</h5>
</td><td class="def-right">
 <span class="def-ver">[MM6]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="evt.str" class="abs"></a><h5 class="def-h5">evt.str</h5>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.house" class="abs"></a><h5 class="def-h5">evt.house</h5>[]
</td><td class="def-right">
 House name used for hint
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Player" class="abs"></a><h5 class="def-h5">evt.Player</h5>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.CurrentPlayer" class="abs"></a><h5 class="def-h5">evt.CurrentPlayer</h5>
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="evt.InGlobal" class="abs"></a><h5 class="def-h5">evt.InGlobal</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.ForPlayer-" class="abs"></a><h5 class="def-h5">evt.ForPlayer</h5> <span class="def-nbsp"> </span><b>(</b> n <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.HouseDoor" class="abs"></a><h5 class="def-h5">evt.HouseDoor</h5> <span class="def-nbsp"> </span><b>(</b> evtId, houseId <b>)</b>
</td><td class="def-right">
 Here's what it does:<div class="def-codeblock">evt.house[evtId] <B><font color="#00D">=</font></B> houseId<br>evt.map[evtId] <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>()<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.EnterHouse(houseId)<br><B><font color="Black">end</font></B></div><br>
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-main.lua-"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>main.lua</h3>
 
&nbsp;<i class="def-ib">Functions:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="MessageBox" class="abs"></a><h5 class="def-h5">MessageBox</h5> <span class="def-nbsp"> </span><b>(</b> text, caption, typ <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="debug.Message" class="abs"></a><h5 class="def-h5">debug.Message</h5> <span class="def-nbsp"> </span><b>(</b> ... <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="debug.ErrorMessage" class="abs"></a><h5 class="def-h5">debug.ErrorMessage</h5> <span class="def-nbsp"> </span><b>(</b> msg <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="ErrorMessage" class="abs"></a><h5 class="def-h5">ErrorMessage</h5> <span class="def-nbsp"> </span><b>(</b> msg <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="ReloadLocalization" class="abs"></a><h5 class="def-h5">ReloadLocalization</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br>
<a name="Core-timers.lua-"></a><table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3><span class="def-shadow">Core\ </span>timers.lua</h3>
 &nbsp;<i class="def-ib">Examples:</i><br><br>Damage selected player every minute:<div class="def-codeblock">Timer(<B><font color="Black">function</font></B>()<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.DamagePlayer<B><font color="Black">{</font></B>Damage <B><font color="#00D">=</font></B> <B><font color="#079">1</font></B><B><font color="Black">}</font></B><br><B><font color="Black">end</font></B>, const.Minute)</div><br><br>Check some condition (e.g. that you killed all monsters) every 5 minutes, including the moment you enter the map:<div class="def-codeblock">Timer(CheckCondition, <B><font color="#079">5</font></B><B><font color="#333">*</font></B>const.Minute, <B><font color="#079">true</font></B>)</div><br><br>Refill a well every week on Tuesday at 3 AM:<div class="def-codeblock">RefillTimer(RefillWell, const.Week, const.Day <B><font color="#333">+</font></B> <B><font color="#079">3</font></B><B><font color="#333">*</font></B>const.Hour)</div><br><br>Make "eat" sound at 3 AM every day:<div class="def-codeblock">Timer(<B><font color="Black">function</font></B>()<br><span style="display: inline-block; width: 2ch;">&#9;</span>evt.PlaySound(Game.Version <B><font color="#333">==</font></B> <B><font color="#079">8</font></B> <B><font color="Black">and</font></B> <B><font color="#079">144</font></B> <B><font color="Black">or</font></B> <B><font color="#079">211</font></B>)<br><B><font color="Black">end</font></B>, const.Day, <B><font color="#079">3</font></B><B><font color="#333">*</font></B>const.Hour, <B><font color="#079">false</font></B>)</div><br><br>
&nbsp;<i class="def-ib">Variables:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="Keys" class="abs"></a><h5 class="def-h5">Keys</h5>[<a href="#const.Keys">key</a>]
</td><td class="def-right">
 Example:<div class="def-codeblock">Keys[const.Keys.F2] <B><font color="#00D">=</font></B> <B><font color="Black">function</font></B>()<br><span> </span><span> </span>Message(<font color="#90A">&quot;F2 pressed&quot;</font>)<br><B><font color="Black">end</font></B></div><br>However, using <a href="#events.KeyDown">events.KeyDown</a> is recommended instead.
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="timeGetTime" class="abs"></a><h5 class="def-h5">timeGetTime</h5> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="Timer" class="abs"></a><h5 class="def-h5">Timer</h5> <span class="def-nbsp"> </span><b>(</b> f, Period = const.Minute, [Start,] [PastAware,] [Exact] <b>)</b>
</td><td class="def-right">
 <b class="def-param">f</b> = <span class="def-code"><B><font color="Black">function</font></B>(TriggerTime, Period, LastTick, Tick)</span>:<br><span class="def-nbsp">  </span>Function to call when the timer is triggered.<br><b class="def-param">Start</b> is <span class="def-code">Game.Time <B><font color="#333">+</font></B> Period</span> if not specified (or <span class="def-code">Game.Time</span> if <b class="def-param">PastAware</b> = <b class="def-param">true</b>).<br><b class="def-param">PastAware</b> = remember last visit time and fire right away if timer condition was met in the period of your absence.<br><span class="def-nbsp">  </span>If not specified, it's <b class="def-param">true</b> if <b class="def-param">Start</b> is specified, <b class="def-param">false</b> otherwise.<br>Possible <b class="def-param">Exact</b> values:<br><span class="def-nbsp">  </span>false: <span class="def-nbsp"> </span>re-fires after <b class="def-param">Period</b> passes since last invocation (this is the default if <b class="def-param">Start</b> is not specified).<br><span class="def-nbsp">  </span>true: <span class="def-nbsp"> </span>fires whenever (start + period*N) line is crossed (this is the default if <b class="def-param">Start</b> is specified).<br><span class="def-nbsp">  </span><span class="def-code"><B><font color="Black">function</font></B>(TriggerTime, Period, LastTick, IsInit)</span>: <span class="def-nbsp"> </span>returns next trigger time when called.<br><span class="def-nbsp">    </span><b class="def-param">IsInit</b> = <b class="def-param">true</b> if it's called by Timer function itself which happens if <b class="def-param">Start</b> has already passed.<br>Note that the timer remembers last time you were in the location, so for example,<br>an exact weekly timer would fire right away if you haven't visited the map for a week.
</td>
</tr><tr>
<td class="def-left">
<a name="RefillTimer" class="abs"></a><h5 class="def-h5">RefillTimer</h5> <span class="def-nbsp"> </span><b>(</b> f, Period = const.Day, Start = 0 <b>)</b>
</td><td class="def-right">
 <b class="def-param">f</b> = <span class="def-code"><B><font color="Black">function</font></B>(TriggerTime, Period, LastTick, Tick)</span>:<br><span class="def-nbsp">  </span>Called when the timer is triggered.<br>Acts like exact Timer, but also fires at map refills.<br>If <b class="def-param">Start</b> = <b class="def-param">true</b>, triggers when <b class="def-param">Period</b> passes since last time it was triggered, and on map refill.
</td>
</tr><tr>
<td class="def-left">
<a name="Sleep" class="abs"></a><h5 class="def-h5">Sleep</h5> <span class="def-nbsp"> </span><b>(</b> time, realtime, screens <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="Sleep2" class="abs"></a><h5 class="def-h5">Sleep2</h5> <span class="def-nbsp"> </span><b>(</b> f, time, realtime, screens <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="RemoveTimer" class="abs"></a><h5 class="def-h5">RemoveTimer</h5> <span class="def-nbsp"> </span><b>(</b> f <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="Keys.IsPressed" class="abs"></a><h5 class="def-h5">Keys.IsPressed</h5> <span class="def-nbsp"> </span><b>(</b> <a href="#const.Keys">key</a> <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="Keys.IsToggled" class="abs"></a><h5 class="def-h5">Keys.IsToggled</h5> <span class="def-nbsp"> </span><b>(</b> <a href="#const.Keys">key</a> <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>


<br>
<hr>
<a name="Structures"></a><h2>Structures</h2>



<br><a name="structs.GameStructure"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>Game</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameStructure.Version" class="abs"></a>Version
</td><td class="def-right">
 (6 &ndash; 8)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Races" class="abs"></a><a href="#structs.GameRaces">Races</a>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Classes" class="abs"></a><a href="#structs.GameClasses">Classes</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ClassKinds" class="abs"></a><a href="#structs.GameClassKinds">ClassKinds</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Party" class="abs"></a><a href="#structs.GameParty">Party</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Map" class="abs"></a><a href="#structs.GameMap">Map</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Mouse" class="abs"></a><a href="#structs.GameMouse">Mouse</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Weather" class="abs"></a><a href="#structs.Weather">Weather</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.PatchOptions" class="abs"></a><a href="#structs.PatchOptions">PatchOptions</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.CustomLods" class="abs"></a><a href="#structs.CustomLods">CustomLods</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.WindowHandle" class="abs"></a>WindowHandle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Windowed" class="abs"></a>Windowed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.CurrentPlayer" class="abs"></a>CurrentPlayer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SkillRecoveryTimes" class="abs"></a>SkillRecoveryTimes[<a href="#const.Skills">skill</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.CurrentScreen" class="abs"></a>CurrentScreen
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.CurrentCharScreen" class="abs"></a>CurrentCharScreen
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.StatsNames" class="abs"></a>StatsNames[<a href="#const.Stats">stat</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.StatsDescriptions" class="abs"></a>StatsDescriptions[<a href="#const.Stats">stat</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SkillNames" class="abs"></a>SkillNames[<a href="#const.Skills">skill</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SkillDescriptions" class="abs"></a>SkillDescriptions[<a href="#const.Skills">skill</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ClassNames" class="abs"></a>ClassNames[<a href="#const.Class">class</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ClassDescriptions" class="abs"></a>ClassDescriptions[<a href="#const.Class">class</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Actions" class="abs"></a><a href="#structs.ActionItem">Actions</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NeedRedraw" class="abs"></a>NeedRedraw
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.StatusMessage" class="abs"></a>StatusMessage
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MouseOverStatusMessage" class="abs"></a>MouseOverStatusMessage
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.StatusDisappearTime" class="abs"></a>StatusDisappearTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ItemsTxt" class="abs"></a><a href="#structs.ItemsTxtItem">ItemsTxt</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.StdItemsTxt" class="abs"></a><a href="#structs.StdItemsTxtItem">StdItemsTxt</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SpcItemsTxt" class="abs"></a><a href="#structs.SpcItemsTxtItem">SpcItemsTxt</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MonstersTxt" class="abs"></a><a href="#structs.MonstersTxtItem">MonstersTxt</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.PlaceMonTxt" class="abs"></a>PlaceMonTxt[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MapStats" class="abs"></a><a href="#structs.MapStatsItem">MapStats</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MapDoorSound" class="abs"></a>MapDoorSound[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MapFogChances" class="abs"></a><a href="#structs.FogChances">MapFogChances</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MoveToMap.Pos" class="abs"></a>MoveToMap.Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MoveToMap.X" class="abs"></a>MoveToMap.X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MoveToMap.Y" class="abs"></a>MoveToMap.Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MoveToMap.Z" class="abs"></a>MoveToMap.Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MoveToMap.Direction" class="abs"></a>MoveToMap.Direction
</td><td class="def-right">
 0 &ndash; 2047. 0 is East.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MoveToMap.LookAngle" class="abs"></a>MoveToMap.LookAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MoveToMap.SpeedZ" class="abs"></a>MoveToMap.SpeedZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MoveToMap.Defined" class="abs"></a>MoveToMap.Defined
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Lucida_fnt" class="abs"></a>Lucida_fnt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Smallnum_fnt" class="abs"></a>Smallnum_fnt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Arrus_fnt" class="abs"></a>Arrus_fnt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Create_fnt" class="abs"></a>Create_fnt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Comic_fnt" class="abs"></a>Comic_fnt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Book_fnt" class="abs"></a>Book_fnt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Book2_fnt" class="abs"></a>Book2_fnt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Cchar_fnt" class="abs"></a>Cchar_fnt
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Autonote_fnt" class="abs"></a>Autonote_fnt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Spell_fnt" class="abs"></a>Spell_fnt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TextBuffer" class="abs"></a>TextBuffer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TextBuffer2" class="abs"></a>TextBuffer2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.KeyCodes" class="abs"></a>KeyCodes[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.KeyTypes" class="abs"></a>KeyTypes[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Time" class="abs"></a>Time
</td><td class="def-right">
 Since 00 AM, January 1st, 1165/1168/1172
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Year" class="abs"></a>Year
</td><td class="def-right">
 Actual value, like 1172
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Month" class="abs"></a>Month
</td><td class="def-right">
 (0 &ndash; 11)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.WeekOfMonth" class="abs"></a>WeekOfMonth
</td><td class="def-right">
 (0 &ndash; 3)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.DayOfMonth" class="abs"></a>DayOfMonth
</td><td class="def-right">
 (0 &ndash; 27)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Hour" class="abs"></a>Hour
</td><td class="def-right">
 (0 &ndash; 23)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Minute" class="abs"></a>Minute
</td><td class="def-right">
 (0 &ndash; 59)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Second" class="abs"></a>Second
</td><td class="def-right">
 (0 &ndash; 59)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.BaseYear" class="abs"></a>BaseYear
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NeedRender" class="abs"></a>NeedRender
</td><td class="def-right">
 Same as Party.NeedRender
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TurnBased" class="abs"></a>TurnBased
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TurnBasedPhase" class="abs"></a>TurnBasedPhase
</td><td class="def-right">
 1 = monsters move, 2 = combat, 3 = party walking
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.PlaySoundStruct" class="abs"></a>PlaySoundStruct
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.RedbookHandle" class="abs"></a>RedbookHandle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MSSHandle" class="abs"></a>MSSHandle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.BinkVideo" class="abs"></a>BinkVideo
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SmackVideo" class="abs"></a>SmackVideo
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.EquipStat2ItemSlot" class="abs"></a>EquipStat2ItemSlot[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MonsterClassSex" class="abs"></a>MonsterClassSex[]
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  <span class="def-code">MonClass <B><font color="#00D">=</font></B> (Id <B><font color="#333">+</font></B> <B><font color="#079">2</font></B>):div(<B><font color="#079">3</font></B>)</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MonsterClassRace" class="abs"></a>MonsterClassRace[]
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  <span class="def-code">MonClass <B><font color="#00D">=</font></B> (Id <B><font color="#333">+</font></B> <B><font color="#079">2</font></B>):div(<B><font color="#079">3</font></B>)</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MonsterSex" class="abs"></a>MonsterSex[]
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Paused" class="abs"></a>Paused
</td><td class="def-right">
 checked by event timers
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Paused2" class="abs"></a>Paused2
</td><td class="def-right">
 checked by water damage
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ShopItems" class="abs"></a><a href="#structs.Item">ShopItems</a>[house][slot]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ShopSpecialItems" class="abs"></a><a href="#structs.Item">ShopSpecialItems</a>[house][slot]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.GuildItems" class="abs"></a><a href="#structs.Item">GuildItems</a>[house][school][slot]
</td><td class="def-right">
 In MM8 in each guild items for all 12 schools of magic are generated. In MM6 and MM7 <b class="def-param">school</b> can only be 0.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ScanlineOffset" class="abs"></a>ScanlineOffset[]
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ShopNextRefill" class="abs"></a>ShopNextRefill[house]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ObjectByPixel" class="abs"></a><a href="#structs.ObjectRef">ObjectByPixel</a>[y][x]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ArmageddonTimeLeft" class="abs"></a>ArmageddonTimeLeft
</td><td class="def-right">
 maximum is 417
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ArmageddonSkill" class="abs"></a>ArmageddonSkill
</td><td class="def-right">
 damage is 50 + skill
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.GlobalTxt" class="abs"></a>GlobalTxt[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Houses" class="abs"></a><a href="#structs.Events2DItem">Houses</a>[]
</td><td class="def-right">
 2DEvents.txt
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.HouseMovies" class="abs"></a><a href="#structs.HouseMovie">HouseMovies</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TransTxt" class="abs"></a>TransTxt[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SpecialEnterX" class="abs"></a>SpecialEnterX[]
</td><td class="def-right">
 Used for Free Haven Sewer entrances in MM6. Negative Questbit Restrictions field in <b class="def-param">2DEvents.txt</b> corresponds to array index
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SpecialEnterY" class="abs"></a>SpecialEnterY[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SpecialEnterZ" class="abs"></a>SpecialEnterZ[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SpecialEnterDirection" class="abs"></a>SpecialEnterDirection[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NPCTopic" class="abs"></a>NPCTopic[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NPCText" class="abs"></a>NPCText[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NPCGreet" class="abs"></a>NPCGreet[][]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NPCGroup" class="abs"></a>NPCGroup[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NPCNews" class="abs"></a><a href="#structs.NPCNewsItem">NPCNews</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.HistoryTxt" class="abs"></a><a href="#structs.HistoryTxtItem">HistoryTxt</a>[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NPCNewsCountByMap" class="abs"></a>NPCNewsCountByMap[]
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NPCDataTxt" class="abs"></a><a href="#structs.NPC">NPCDataTxt</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NPC" class="abs"></a><a href="#structs.NPC">NPC</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Spells" class="abs"></a><a href="#structs.SpellInfo">Spells</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SpellsTxt" class="abs"></a><a href="#structs.SpellsTxtItem">SpellsTxt</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.QuestsTxt" class="abs"></a>QuestsTxt[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.AwardsTxt" class="abs"></a>AwardsTxt[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.AwardsSort" class="abs"></a>AwardsSort[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.AutonoteTxt" class="abs"></a>AutonoteTxt[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.AutonoteCategory" class="abs"></a>AutonoteCategory[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  0 = potion<br>1 = stat<br>2 = obelisk<br>3 = seer<br>4 = misc<br>5 = teacher
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MerchantTxt" class="abs"></a>MerchantTxt[][]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.CtrlPressed" class="abs"></a>CtrlPressed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TownPortalInfo" class="abs"></a><a href="#structs.TownPortalTownInfo">TownPortalInfo</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TownPortalX" class="abs"></a>TownPortalX[]
</td><td class="def-right">
 Town portal picture: townport
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TownPortalY" class="abs"></a>TownPortalY[]
</td><td class="def-right">
 Town portal icons <span class="def-ver">[MM7+]</span>: tpharmndy, tpelf, tpwarlock, tpisland, tpheaven, tphell
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TownPortalHeight" class="abs"></a>TownPortalHeight[]
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TownPortalWidth" class="abs"></a>TownPortalWidth[]
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TransportLocations" class="abs"></a><a href="#structs.TravelInfo">TransportLocations</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TransportIndex" class="abs"></a>TransportIndex[][]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.HostileTxt" class="abs"></a>HostileTxt[mon1][mon2]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  0 &ndash; 4. Attitude of <b class="def-param">mon1</b> towards <b class="def-param">mon2</b>. <b class="def-param">mon2</b> = 0 is party. <b class="def-param">mon1</b> and <b class="def-param">mon2</b> are monster classes: <span class="def-code">mon1 <B><font color="#00D">=</font></B> (Id1 <B><font color="#333">+</font></B> <B><font color="#079">2</font></B>):div(<B><font color="#079">3</font></B>)</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.NewGameMap" class="abs"></a>NewGameMap
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.GlobalEvtLines" class="abs"></a><a href="#structs.EventLine">GlobalEvtLines</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MapEvtLines" class="abs"></a><a href="#structs.EventLine">MapEvtLines</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SFTBin" class="abs"></a><a href="#structs.SFT">SFTBin</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.DecListBin" class="abs"></a><a href="#structs.DecListItem">DecListBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.PFTBin" class="abs"></a><a href="#structs.PFTItem">PFTBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.IFTBin" class="abs"></a><a href="#structs.IFTItem">IFTBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TFTBin" class="abs"></a><a href="#structs.TFTItem">TFTBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ChestBin" class="abs"></a><a href="#structs.DChestItem">ChestBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.OverlayBin" class="abs"></a><a href="#structs.OverlayItem">OverlayBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ObjListBin" class="abs"></a><a href="#structs.ObjListItem">ObjListBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MonListBin" class="abs"></a><a href="#structs.MonListItem">MonListBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SoundsBin" class="abs"></a><a href="#structs.SoundsItem">SoundsBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.TileBin" class="abs"></a><a href="#structs.TileItem">TileBin</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Tile2Bin" class="abs"></a><a href="#structs.TileItem">Tile2Bin</a>[]
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.Tile3Bin" class="abs"></a><a href="#structs.TileItem">Tile3Bin</a>[]
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.CurrentTileBin" class="abs"></a><a href="#structs.CurrentTileBin">CurrentTileBin</a>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MainMenuCode" class="abs"></a>MainMenuCode
</td><td class="def-right">
 -1 = in game, 1 = show new game, 6 = in new game, 3 = load menu, 4 = exit, 2 = show credits, 8 = in credits, 9 = load game
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ExitLevelCode" class="abs"></a>ExitLevelCode
</td><td class="def-right">
 0 = in game, 2 = load other map, 8 = death
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.GamesLod" class="abs"></a><a href="#structs.Lod">GamesLod</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.IconsLod" class="abs"></a><a href="#structs.BitmapsLod">IconsLod</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.BitmapsLod" class="abs"></a><a href="#structs.BitmapsLod">BitmapsLod</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SpritesLod" class="abs"></a><a href="#structs.SpritesLod">SpritesLod</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SaveGameLod" class="abs"></a><a href="#structs.Lod">SaveGameLod</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.EventsLod" class="abs"></a><a href="#structs.Lod">EventsLod</a>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.RendererD3D" class="abs"></a>RendererD3D
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.IsD3D" class="abs"></a>IsD3D
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.RandSeed" class="abs"></a>RandSeed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.MonsterKinds" class="abs"></a><a href="#structs.MonsterKind">MonsterKinds</a>[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameStructure.Rand" class="abs"></a>Rand <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SetInterfaceColor" class="abs"></a>SetInterfaceColor <span class="def-nbsp"> </span><b>(</b> Color, Unk = 1 <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  0 = good, 1 = neutral, 2 = evil
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.DoShowMovie" class="abs"></a>DoShowMovie <span class="def-nbsp"> </span><b>(</b> Name, Y, DoubleSize, ExitCurrentScreen <b>)</b>
</td><td class="def-right">
 Only call from <a href="#events.ShowMovie">events.ShowMovie</a>, use <a href="#evt.ShowMovie">evt.ShowMovie</a> otherwise.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.CalcSpellDamage" class="abs"></a>CalcSpellDamage <span class="def-nbsp"> </span><b>(</b> Spell, Skill, Mastery, MonsterHP <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.GetSpellDamageType" class="abs"></a>GetSpellDamageType <span class="def-nbsp"> </span><b>(</b> Spell <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.GetStatisticEffect" class="abs"></a>GetStatisticEffect <span class="def-nbsp"> </span><b>(</b> Stat <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.EscMessage" class="abs"></a>EscMessage <span class="def-nbsp"> </span><b>(</b> Text, Unk = 0 <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.SummonMonster" class="abs"></a>SummonMonster <span class="def-nbsp"> </span><b>(</b> Id, X, Y, Z <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.IsMonsterOfKind" class="abs"></a>IsMonsterOfKind <span class="def-nbsp"> </span><b>(</b> Id, <a href="#const.MonsterKind">Kind</a> <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.LoadSound" class="abs"></a>LoadSound <span class="def-nbsp"> </span><b>(</b> SoundId, Unk = 0 <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.PlaySound" class="abs"></a>PlaySound <span class="def-nbsp"> </span><b>(</b> SoundId, Object = -1, Loops = 0, X = -1, Y = 0, Unk = 0, Volume = 0, PlaybackRate = 0 <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.LoadDecSprite" class="abs"></a>LoadDecSprite <span class="def-nbsp"> </span><b>(</b> Name <b>)</b>
</td><td class="def-right">
 Loads a sprite and returns its ID.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.LoadBitmap" class="abs"></a>LoadBitmap <span class="def-nbsp"> </span><b>(</b> Name <b>)</b>
</td><td class="def-right">
 Loads a texture and returns its ID.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.UpdateDialogTopics" class="abs"></a>UpdateDialogTopics <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.ShowStatusText" class="abs"></a>ShowStatusText <span class="def-nbsp"> </span><b>(</b> Text, Seconds = 2 <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.LoadPalette" class="abs"></a>LoadPalette <span class="def-nbsp"> </span><b>(</b> PalNum <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.LoadDataFileFromLod" class="abs"></a>LoadDataFileFromLod <span class="def-nbsp"> </span><b>(</b> Name, UseMalloc <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameStructure.LoadTextFileFromLod" class="abs"></a>LoadTextFileFromLod <span class="def-nbsp"> </span><b>(</b> Name <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.GameParty"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>Party</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameParty.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Direction" class="abs"></a>Direction
</td><td class="def-right">
 0 &ndash; 2047. 0 is East.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.LookAngle" class="abs"></a>LookAngle
</td><td class="def-right">
 -512 &ndash; 512. Values allowed with mouse look: -200 &ndash; 200. Without mouse look: -128 &ndash; 128
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.LastX" class="abs"></a>LastX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.LastY" class="abs"></a>LastY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.LastZ" class="abs"></a>LastZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.LastDirection" class="abs"></a>LastDirection
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.LastLookAngle" class="abs"></a>LastLookAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.LastEyeLevel" class="abs"></a>LastEyeLevel
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.SpeedX" class="abs"></a>SpeedX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.SpeedY" class="abs"></a>SpeedY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.SpeedZ" class="abs"></a>SpeedZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.StableZ" class="abs"></a>StableZ
</td><td class="def-right">
 <b class="def-param">Z</b> changes up and down while flying, <b class="def-param">StableZ</b> stays the same
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.LastStandFacet" class="abs"></a>LastStandFacet
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.FallStartZ" class="abs"></a>FallStartZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Flying" class="abs"></a>Flying
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.PlayersArray" class="abs"></a><a href="#structs.Player">PlayersArray</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.PlayersIndexes" class="abs"></a>PlayersIndexes[]
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Players" class="abs"></a><a href="#structs.Player">Players</a>[]
</td><td class="def-right">
<b class="def-default">(Default)</b> 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.HiredNPC" class="abs"></a><a href="#structs.NPC">HiredNPC</a>[]
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.LastRegenerationTime" class="abs"></a>LastRegenerationTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.SpellBuffs" class="abs"></a><a href="#structs.SpellBuff">SpellBuffs</a>[<a href="#const.PartyBuff">buff</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Gold" class="abs"></a>Gold
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.BankGold" class="abs"></a>BankGold
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Food" class="abs"></a>Food
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Deaths" class="abs"></a>Deaths
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.PritsonTerms" class="abs"></a>PritsonTerms
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Fine" class="abs"></a>Fine
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.MontersHunted" class="abs"></a>MontersHunted
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.MonsHuntTarget" class="abs"></a>MonsHuntTarget[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.MonsHuntKilled" class="abs"></a>MonsHuntKilled[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.QBits" class="abs"></a>QBits[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.AutonotesBits" class="abs"></a>AutonotesBits[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.InArenaQuest" class="abs"></a>InArenaQuest
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.ArenaWinsPage" class="abs"></a>ArenaWinsPage
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.ArenaWinsSquire" class="abs"></a>ArenaWinsSquire
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.ArenaWinsKnight" class="abs"></a>ArenaWinsKnight
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.ArenaWinsLord" class="abs"></a>ArenaWinsLord
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.ArcomageWins" class="abs"></a>ArcomageWins[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.ArtifactsFound" class="abs"></a>ArtifactsFound[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Alignment" class="abs"></a>Alignment
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  0 = good, 1 = neutral, 2 = evil
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Reputation" class="abs"></a>Reputation
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.History" class="abs"></a>History[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.CurrentPlayer" class="abs"></a>CurrentPlayer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.StateBits" class="abs"></a>StateBits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.NeedRender" class="abs"></a>NeedRender
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Drowning" class="abs"></a>Drowning
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.InAir" class="abs"></a>InAir
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.EnemyDetectorRed" class="abs"></a>EnemyDetectorRed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.EnemyDetectorYellow" class="abs"></a>EnemyDetectorYellow
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.FlyingBit" class="abs"></a>FlyingBit
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.WaterWalkingBit" class="abs"></a>WaterWalkingBit
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.InJumpSpell" class="abs"></a>InJumpSpell
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.InLava" class="abs"></a>InLava
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameParty.RestAndHeal" class="abs"></a>RestAndHeal <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.Wait" class="abs"></a>Wait <span class="def-nbsp"> </span><b>(</b> Minutes <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.FindActivePlayer" class="abs"></a>FindActivePlayer <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.GetFame" class="abs"></a>GetFame <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.GetRepuatation" class="abs"></a>GetRepuatation <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.AddGold" class="abs"></a>AddGold <span class="def-nbsp"> </span><b>(</b> Gold, Kind = 0 <b>)</b>
</td><td class="def-right">
 <b class="def-param">Kind</b> values:<br>0 = increase by Banker, give some part to followers<br>1 = take exect amount, ignore followers<br>2 = <span class="def-ver">[MM7+]</span> take all and don't show message, just clear status message<br>3 = <span class="def-ver">[MM7+]</span> take all and don't change status message
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.AddKillExp" class="abs"></a>AddKillExp <span class="def-nbsp"> </span><b>(</b> Experience <b>)</b>
</td><td class="def-right">
 <b class="def-param">Experience</b> is shared among conscious players and effected by Learning skill
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.HasNPCProfession" class="abs"></a>HasNPCProfession <span class="def-nbsp"> </span><b>(</b> arg1 <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameParty.CountItems" class="abs"></a>CountItems <span class="def-nbsp"> </span><b>(</b> {item1, item2, ...} <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.GameMap"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>Map</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameMap.Refilled" class="abs"></a>Refilled
</td><td class="def-right">
 If the map has been refilled this visit, contains the last <a href="#mapvars">mapvars</a> table.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IndoorOrOutdoor" class="abs"></a>IndoorOrOutdoor
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Monsters" class="abs"></a><a href="#structs.MapMonster">Monsters</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Vars" class="abs"></a>Vars[]
</td><td class="def-right">
 Variables for barrels/contests/etc events start at 75
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Objects" class="abs"></a><a href="#structs.MapObject">Objects</a>[]
</td><td class="def-right">
 Items, spells effects
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Sprites" class="abs"></a><a href="#structs.MapSprite">Sprites</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.SoundSprites" class="abs"></a>SoundSprites[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Chests" class="abs"></a><a href="#structs.MapChest">Chests</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.MapStatsIndex" class="abs"></a>MapStatsIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.NoNPC" class="abs"></a>NoNPC
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.OutdoorHeader" class="abs"></a><a href="#structs.OdmHeader">OutdoorHeader</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Tilesets" class="abs"></a><a href="#structs.TilesetDef">Tilesets</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.HeightMap" class="abs"></a>HeightMap[y][x]
</td><td class="def-right">
 <span class="def-code">[(<B><font color="#079">64</font></B> <B><font color="#333">-</font></B> Party.Y <B><font color="#333">/</font></B> <B><font color="#079">0x200</font></B>):round()] [(<B><font color="#079">64</font></B> <B><font color="#333">+</font></B> Party.X <B><font color="#333">/</font></B> <B><font color="#079">0x200</font></B>):round()] <B><font color="#00D">=</font></B> (Party.Z <B><font color="#333">/</font></B> <B><font color="#079">32</font></B>):<font color="Brown">floor</font>()</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.TileMap" class="abs"></a>TileMap[y][x]
</td><td class="def-right">
 <span class="def-code">[(<B><font color="#079">64</font></B> <B><font color="#333">-</font></B> Party.Y <B><font color="#333">/</font></B> <B><font color="#079">0x200</font></B>):<font color="Brown">floor</font>()] [(<B><font color="#079">64</font></B> <B><font color="#333">+</font></B> Party.X <B><font color="#333">/</font></B> <B><font color="#079">0x200</font></B>):<font color="Brown">floor</font>()]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.UnknownMap" class="abs"></a>UnknownMap[][]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Models" class="abs"></a><a href="#structs.MapModel">Models</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IDList" class="abs"></a><a href="#structs.ObjectRef">IDList</a>[]
</td><td class="def-right">
 IDs of sprites on map (in <a href="#structs.ObjectRef">ObjectRef</a> form)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IDOffsets" class="abs"></a>IDOffsets[y][x]
</td><td class="def-right">
 OMAP &ndash; offsets in IDList
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.LoadedSkyBitmap" class="abs"></a>LoadedSkyBitmap
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.OutdoorSpawns" class="abs"></a><a href="#structs.SpawnPoint">OutdoorSpawns</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.OutdoorRefillCount" class="abs"></a>OutdoorRefillCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.OutdoorLastRefillDay" class="abs"></a>OutdoorLastRefillDay
</td><td class="def-right">
 First visit day
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.OutdoorExtra" class="abs"></a><a href="#structs.OutdoorExtra">OutdoorExtra</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.OutdoorLastVisitTime" class="abs"></a>OutdoorLastVisitTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.VisibleMap1" class="abs"></a>VisibleMap1[][]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.VisibleMap2" class="abs"></a>VisibleMap2[][]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.OutdoorReputation" class="abs"></a>OutdoorReputation
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.TilesetsFile" class="abs"></a>TilesetsFile
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  0 = dtile.bin, 1 = dtile2.bin, 2 = dtile3.bin
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.UnknownMap2" class="abs"></a>UnknownMap2[][]
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Notes" class="abs"></a><a href="#structs.MapNote">Notes</a>[]
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.TerNormDist" class="abs"></a>TerNormDist[][][]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.TerNormId" class="abs"></a>TerNormId[][][]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.TerNorm" class="abs"></a><a href="#structs.FloatVector">TerNorm</a>[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IndoorHeader" class="abs"></a><a href="#structs.BlvHeader">IndoorHeader</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Vertexes" class="abs"></a><a href="#structs.MapVertex">Vertexes</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Facets" class="abs"></a><a href="#structs.MapFacet">Facets</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.FacetData" class="abs"></a><a href="#structs.FacetData">FacetData</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Rooms" class="abs"></a><a href="#structs.MapRoom">Rooms</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Lights" class="abs"></a><a href="#structs.MapLight">Lights</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Doors" class="abs"></a><a href="#structs.MapDoor">Doors</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.BSPNodes" class="abs"></a><a href="#structs.BSPNode">BSPNodes</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Outlines" class="abs"></a><a href="#structs.MapOutlines">Outlines</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IndoorSpawns" class="abs"></a><a href="#structs.SpawnPoint">IndoorSpawns</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IndoorRefillCount" class="abs"></a>IndoorRefillCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IndoorLastRefillDay" class="abs"></a>IndoorLastRefillDay
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IndoorLastVisitTime" class="abs"></a>IndoorLastVisitTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.VisibileOutlines" class="abs"></a>VisibileOutlines[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IndoorReputation" class="abs"></a>IndoorReputation
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Spawns" class="abs"></a>Spawns
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.RefillCount" class="abs"></a>RefillCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.LastRefillDay" class="abs"></a>LastRefillDay
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.LastVisitTime" class="abs"></a>LastVisitTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.Reputation" class="abs"></a>Reputation
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.SpriteLights" class="abs"></a><a href="#structs.BaseLight">SpriteLights</a>[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameMap.Render" class="abs"></a>Render <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IsIndoor" class="abs"></a>IsIndoor <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.IsOutdoor" class="abs"></a>IsOutdoor <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.LoadTileset" class="abs"></a>LoadTileset <span class="def-nbsp"> </span><b>(</b> Id <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.RoomFromPoint" class="abs"></a>RoomFromPoint <span class="def-nbsp"> </span><b>(</b> x, y, z <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.GetFloorLevel" class="abs"></a>GetFloorLevel <span class="def-nbsp"> </span><b>(</b> x, y, z, room <b>)</b>
</td><td class="def-right">
 Returns <b class="def-param">FloorZ</b>, <b class="def-param">FacetId</b>.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.GetGroundLevel" class="abs"></a>GetGroundLevel <span class="def-nbsp"> </span><b>(</b> x, y <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMap.GetFacet" class="abs"></a>GetFacet <span class="def-nbsp"> </span><b>(</b> Id <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.GameMouse"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>Mouse</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameMouse.Target" class="abs"></a><a href="#structs.ObjectRef">Target</a>
</td><td class="def-right">
 Use <a href="#structs.GameMouse.GetTarget">Mouse.GetTarget</a> instead.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMouse.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMouse.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMouse.Item" class="abs"></a><a href="#structs.Item">Item</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameMouse.GetTarget" class="abs"></a>GetTarget <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameMouse.SetIcon" class="abs"></a>SetIcon <span class="def-nbsp"> </span><b>(</b> Icon = "MICON1" <b>)</b>
</td><td class="def-right">
 There are 3 special values:<br>"MICON1" = arrow cursor<br>"MICON2" = crosshair cursor for spells<br>"MICON3" = this cursor doesn't exist, don't use it<br>Other values change the picture of item carried by mouse.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMouse.RemoveItem" class="abs"></a>RemoveItem <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 Deletes item carried by the mouse and restores arrow cursor.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMouse.AddItem" class="abs"></a>AddItem <span class="def-nbsp"> </span><b>(</b> <a href="#structs.Item">Item</a> <b>)</b>
</td><td class="def-right">
 If there already was an item carried by the mouse, it will be taken into inventory or dropped.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameMouse.ReleaseItem" class="abs"></a>ReleaseItem <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 If there is an item carried by the mouse, it will be taken into inventory or dropped.
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.ActionItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.ActionItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.ActionItem.Type" class="abs"></a>Type
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ActionItem.Info1" class="abs"></a>Info1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ActionItem.Info2" class="abs"></a>Info2
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.BSPNode"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.BSPNode</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.BSPNode.FrontNode" class="abs"></a>FrontNode
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BSPNode.BackNode" class="abs"></a>BackNode
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BSPNode.CoplanarOffset" class="abs"></a>CoplanarOffset
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BSPNode.CoplanarSize" class="abs"></a>CoplanarSize
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.BaseBonus"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.BaseBonus</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.BaseBonus.Base" class="abs"></a>Base
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BaseBonus.Bonus" class="abs"></a>Bonus
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.BaseLight"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.BaseLight</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.BaseLight.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BaseLight.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BaseLight.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BaseLight.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BaseLight.Radius" class="abs"></a>Radius
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BaseLight.R" class="abs"></a>R
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BaseLight.G" class="abs"></a>G
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BaseLight.B" class="abs"></a>B
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BaseLight.Type" class="abs"></a>Type
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.BitmapsLod"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.BitmapsLod</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.BitmapsLod.File" class="abs"></a>File
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.FileName" class="abs"></a>FileName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.Loaded" class="abs"></a>Loaded
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.IOBuffer" class="abs"></a>IOBuffer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.IOBufferSize" class="abs"></a>IOBufferSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.LodHeaderSignature" class="abs"></a>LodHeaderSignature
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.Description" class="abs"></a>Description
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.ArchivesCount" class="abs"></a>ArchivesCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.ArchivesCArray" class="abs"></a>ArchivesCArray
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.Type" class="abs"></a>Type
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.ChapterHandle" class="abs"></a>ChapterHandle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.ChapterSize" class="abs"></a>ChapterSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.Files" class="abs"></a><a href="#structs.LodFile">Files</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.FilesOffset" class="abs"></a>FilesOffset
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.Bitmaps" class="abs"></a><a href="#structs.LodBitmap">Bitmaps</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.KeepCompressed" class="abs"></a>KeepCompressed
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.IsHardware" class="abs"></a>IsHardware
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.D3D_Surfaces" class="abs"></a>D3D_Surfaces[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.D3D_Textures" class="abs"></a>D3D_Textures[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.BitmapsLod.LoadBitmap" class="abs"></a>LoadBitmap <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BitmapsLod.LoadTFTBitmap" class="abs"></a>LoadTFTBitmap <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.BlvHeader"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.BlvHeader</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.BlvHeader.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BlvHeader.FacetDataSize" class="abs"></a>FacetDataSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BlvHeader.RoomDataSize" class="abs"></a>RoomDataSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BlvHeader.RoomLightDataSize" class="abs"></a>RoomLightDataSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.BlvHeader.DoorDataSize" class="abs"></a>DoorDataSize
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.CurrentTileBin"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.CurrentTileBin</h3>
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.CurrentTileBin.Items" class="abs"></a><a href="#structs.TileItem">Items</a>[]
</td><td class="def-right">
<b class="def-default">(Default)</b> 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.CustomLods"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.CustomLods</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.CustomLods.RecordIndex" class="abs"></a>RecordIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.CustomLods.Records" class="abs"></a><a href="#structs.LodRecord">Records</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.CustomLods.LoadCustomLod" class="abs"></a>LoadCustomLod <span class="def-nbsp"> </span><b>(</b> StdLod, Name <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.CustomLods.FreeCustomLod" class="abs"></a>FreeCustomLod <span class="def-nbsp"> </span><b>(</b> Ptr <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.DChestItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.DChestItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.DChestItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DChestItem.Width" class="abs"></a>Width
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DChestItem.Height" class="abs"></a>Height
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DChestItem.ImageIndex" class="abs"></a>ImageIndex
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.DecListItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.DecListItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.DecListItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.GameName" class="abs"></a>GameName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.Type" class="abs"></a>Type
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.Height" class="abs"></a>Height
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.Radius" class="abs"></a>Radius
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.LightRadius" class="abs"></a>LightRadius
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.SFTIndex" class="abs"></a>SFTIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.SFTGroup" class="abs"></a>SFTGroup
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.NoBlockMovement" class="abs"></a>NoBlockMovement
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.NoDraw" class="abs"></a>NoDraw
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.FlickerSlow" class="abs"></a>FlickerSlow
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.FlickerMedium" class="abs"></a>FlickerMedium
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.FlickerFast" class="abs"></a>FlickerFast
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.Marker" class="abs"></a>Marker
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.SlowLoop" class="abs"></a>SlowLoop
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.EmitFire" class="abs"></a>EmitFire
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.SoundOnDawn" class="abs"></a>SoundOnDawn
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.SoundOnDusk" class="abs"></a>SoundOnDusk
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.EmitSmoke" class="abs"></a>EmitSmoke
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.SoundId" class="abs"></a>SoundId
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.Red" class="abs"></a>Red
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.Green" class="abs"></a>Green
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.DecListItem.Blue" class="abs"></a>Blue
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.EventLine"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.EventLine</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.EventLine.Event" class="abs"></a>Event
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.EventLine.Line" class="abs"></a>Line
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.EventLine.Offset" class="abs"></a>Offset
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.EventLine.RemoveEvent" class="abs"></a>RemoveEvent <span class="def-nbsp"> </span><b>(</b> id <b>)</b>
</td><td class="def-right">
 It's a method of arrays of EventLine rather than EventLine itself.<br>E.g. <span class="def-code">Game.MapEvtLines:RemoveEvent(<B><font color="#079">100</font></B>)</span> would remove standard map event number <b class="def-param">100</b>, while <span class="def-code">Game.GlobalEvtLines:RemoveEvent(<B><font color="#079">100</font></B>)</span> would remove standard global event number <b class="def-param">100</b>.<br>To know exactly what would be disabled by <b class="def-param">RemoveEvent</b> method, you can look into text representations of decompiled events. For example, if you disable event <b class="def-param">226</b> in <b class="def-param">OUTE3</b> in MM6, it will disable both standard <b class="def-param">evt.map[226]</b> handler and <b class="def-param">events.LoadMap</b> event handler you see after it in the decompiled Lua script. When you see an event handler not associated with a script number in decompiled scripts, it usually belongs to the event right before it.<br>
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.Events2DItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.Events2DItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.Events2DItem.Type" class="abs"></a>Type
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.Picture" class="abs"></a>Picture
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.OwnerName" class="abs"></a>OwnerName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.EnterText" class="abs"></a>EnterText
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.OwnerTitle" class="abs"></a>OwnerTitle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.PictureUnk" class="abs"></a>PictureUnk
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.State" class="abs"></a>State
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.Rep" class="abs"></a>Rep
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.Per" class="abs"></a>Per
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.C" class="abs"></a>C
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.Val" class="abs"></a>Val
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.A" class="abs"></a>A
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.OpenHour" class="abs"></a>OpenHour
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.CloseHour" class="abs"></a>CloseHour
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.ExitPic" class="abs"></a>ExitPic
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.ExitMap" class="abs"></a>ExitMap
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Events2DItem.QuestBitRestriction" class="abs"></a>QuestBitRestriction
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.FacetData"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.FacetData</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.FacetData.FacetIndex" class="abs"></a>FacetIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FacetData.BitmapIndex" class="abs"></a>BitmapIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FacetData.TFTIndex" class="abs"></a>TFTIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FacetData.BitmapU" class="abs"></a>BitmapU
</td><td class="def-right">
 Bitmap U Offset
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FacetData.BitmapV" class="abs"></a>BitmapV
</td><td class="def-right">
 Bitmap V Offset
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FacetData.Id" class="abs"></a>Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FacetData.Event" class="abs"></a>Event
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.FloatVector"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.FloatVector</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.FloatVector.1" class="abs"></a>1
</td><td class="def-right">
 same as <b class="def-param">X</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FloatVector.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FloatVector.2" class="abs"></a>2
</td><td class="def-right">
 same as <b class="def-param">Y</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FloatVector.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FloatVector.3" class="abs"></a>3
</td><td class="def-right">
 same as <b class="def-param">Z</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FloatVector.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.FogChances"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.FogChances</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.FogChances.Thick" class="abs"></a>Thick
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FogChances.Medium" class="abs"></a>Medium
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.FogChances.Light" class="abs"></a>Light
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.GameClassKinds"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.GameClassKinds</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameClassKinds.HPBase" class="abs"></a>HPBase[]
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameClassKinds.SPBase" class="abs"></a>SPBase[]
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameClassKinds.StartingStats" class="abs"></a>StartingStats[][<a href="#const.Stats">stat</a>]
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameClassKinds.StartingSkills" class="abs"></a>StartingSkills[][<a href="#const.Skills">skill</a>]
</td><td class="def-right">
 <span class="def-ver">[MM6]</span> <span class="def-nbsp"> </span>0 = not available, <span class="def-nbsp"> </span>1 = given on start, <span class="def-nbsp"> </span>2 = can choose on start, <span class="def-nbsp"> </span>3 = can learn<br><span class="def-ver">[MM7+]</span> <span class="def-nbsp"> </span>0 = can't choose, <span class="def-nbsp"> </span>1 = can choose on start, <span class="def-nbsp"> </span>2 = given on start
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.GameClasses"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.GameClasses</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameClasses.HPFactor" class="abs"></a>HPFactor[<a href="#const.Class">class</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameClasses.SPFactor" class="abs"></a>SPFactor[<a href="#const.Class">class</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameClasses.HPBase" class="abs"></a>HPBase[<a href="#const.Class">class</a>]
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameClasses.SPBase" class="abs"></a>SPBase[<a href="#const.Class">class</a>]
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameClasses.Skills" class="abs"></a>Skills[<a href="#const.Class">class</a>][<a href="#const.Skills">skill</a>]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  0 = not available, <span class="def-nbsp"> </span>1 = Basic, <span class="def-nbsp"> </span>2 = Expert, <span class="def-nbsp"> </span>3 = Master, <span class="def-nbsp"> </span>4 = GM
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameClasses.StartingStats" class="abs"></a><a href="#structs.StartStat">StartingStats</a>[<a href="#const.Class">class</a>]
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.GameClasses.SPStats" class="abs"></a>SPStats[<a href="#const.Class">class</a>]
</td><td class="def-right">
 0 = no SP, 1 = Intellect, 2 = Personality, 3 = both
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.GameRaces"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.GameRaces</h3>
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.GameRaces.StartingStats" class="abs"></a><a href="#structs.StartStat">StartingStats</a>[<a href="#const.Race">race</a>][<a href="#const.Stats">stat</a>]
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.HistoryTxtItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.HistoryTxtItem</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.HistoryTxtItem.Text" class="abs"></a>Text
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.HistoryTxtItem.Title" class="abs"></a>Title
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.HistoryTxtItem.Time" class="abs"></a>Time
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.HouseMovie"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.HouseMovie</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.HouseMovie.FileName" class="abs"></a>FileName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.HouseMovie.Background" class="abs"></a>Background
</td><td class="def-right">
 EVTPAR*, used only in MM6
</td>
</tr><tr>
<td class="def-left">
<a name="structs.HouseMovie.NPCPic" class="abs"></a>NPCPic
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.HouseMovie.HouseType" class="abs"></a>HouseType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.HouseMovie.Sounds" class="abs"></a>Sounds
</td><td class="def-right">
 30000 + Sounds*100 is the Id in Sounds.txt
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.IFTItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.IFTItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.IFTItem.GroupName" class="abs"></a>GroupName
</td><td class="def-right">
 animation name
</td>
</tr><tr>
<td class="def-left">
<a name="structs.IFTItem.IconName" class="abs"></a>IconName
</td><td class="def-right">
 image name in icons.lod
</td>
</tr><tr>
<td class="def-left">
<a name="structs.IFTItem.Time" class="abs"></a>Time
</td><td class="def-right">
 time for this frame, units in 1/16 of a second
</td>
</tr><tr>
<td class="def-left">
<a name="structs.IFTItem.TotalTime" class="abs"></a>TotalTime
</td><td class="def-right">
 total time for this group
</td>
</tr><tr>
<td class="def-left">
<a name="structs.IFTItem.NotGroupEnd" class="abs"></a>NotGroupEnd
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.IFTItem.GroupStart" class="abs"></a>GroupStart
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.IFTItem.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.IFTItem.IconIndex" class="abs"></a>IconIndex
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.Item"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.Item</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.Item.Number" class="abs"></a>Number
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Bonus" class="abs"></a>Bonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.BonusStrength" class="abs"></a>BonusStrength
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Bonus2" class="abs"></a>Bonus2
</td><td class="def-right">
 Value in case of gold
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Charges" class="abs"></a>Charges
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Identified" class="abs"></a>Identified
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Broken" class="abs"></a>Broken
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.TemporaryBonus" class="abs"></a>TemporaryBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Stolen" class="abs"></a>Stolen
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Hardened" class="abs"></a>Hardened
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Condition" class="abs"></a>Condition
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.BodyLocation" class="abs"></a>BodyLocation
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.MaxCharges" class="abs"></a>MaxCharges
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Owner" class="abs"></a>Owner
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.BonusExpireTime" class="abs"></a>BonusExpireTime
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.Item.GetValue" class="abs"></a>GetValue <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.GetName" class="abs"></a>GetName <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.GetIdentifiedName" class="abs"></a>GetIdentifiedName <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.GenerateArtifact" class="abs"></a>GenerateArtifact <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Item.Randomize" class="abs"></a>Randomize <span class="def-nbsp"> </span><b>(</b> Strenght, <a href="#const.ItemType">Type</a> <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.ItemsTxtItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.ItemsTxtItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Picture" class="abs"></a>Picture
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.NotIdentifiedName" class="abs"></a>NotIdentifiedName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Notes" class="abs"></a>Notes
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Value" class="abs"></a>Value
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.EquipStat" class="abs"></a><a href="#const.ItemType">EquipStat</a>
</td><td class="def-right">
 Subtract 1 from <a href="#const.ItemType">const.ItemType</a> value
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Skill" class="abs"></a>Skill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Mod1DiceCount" class="abs"></a>Mod1DiceCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Mod1DiceSides" class="abs"></a>Mod1DiceSides
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Mod2" class="abs"></a>Mod2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Material" class="abs"></a>Material
</td><td class="def-right">
 0 = normal, <span class="def-nbsp"> </span>1 = artifact, <span class="def-nbsp"> </span>2 = relic, <span class="def-nbsp"> </span>3 = special
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.ChanceByLevel" class="abs"></a>ChanceByLevel[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.IdRepSt" class="abs"></a>IdRepSt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.SpriteIndex" class="abs"></a>SpriteIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.EquipX" class="abs"></a>EquipX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.EquipY" class="abs"></a>EquipY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Bonus2" class="abs"></a>Bonus2
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  VarA
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.Bonus" class="abs"></a>Bonus
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  VarA
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ItemsTxtItem.BonusStrength" class="abs"></a>BonusStrength
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  VarB
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.LloydBeaconSlot"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.LloydBeaconSlot</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.ExpireTime" class="abs"></a>ExpireTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.Direction" class="abs"></a>Direction
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.LookAngle" class="abs"></a>LookAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.Active" class="abs"></a>Active
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.MapIndex" class="abs"></a>MapIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LloydBeaconSlot.Map" class="abs"></a>Map
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.Lod"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.Lod</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.Lod.File" class="abs"></a>File
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.FileName" class="abs"></a>FileName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.Loaded" class="abs"></a>Loaded
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.IOBuffer" class="abs"></a>IOBuffer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.IOBufferSize" class="abs"></a>IOBufferSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.LodHeaderSignature" class="abs"></a>LodHeaderSignature
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.Description" class="abs"></a>Description
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.ArchivesCount" class="abs"></a>ArchivesCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.ArchivesCArray" class="abs"></a>ArchivesCArray
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.Type" class="abs"></a>Type
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.ChapterHandle" class="abs"></a>ChapterHandle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.ChapterSize" class="abs"></a>ChapterSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.Files" class="abs"></a><a href="#structs.LodFile">Files</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Lod.FilesOffset" class="abs"></a>FilesOffset
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.LodBitmap"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.LodBitmap</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.LodBitmap.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.BmpSize" class="abs"></a>BmpSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.DataSize" class="abs"></a>DataSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.Width" class="abs"></a>Width
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.Height" class="abs"></a>Height
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.WidthLn2" class="abs"></a>WidthLn2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.HeightLn2" class="abs"></a>HeightLn2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.WidthMinus1" class="abs"></a>WidthMinus1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.HeightMinus1" class="abs"></a>HeightMinus1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.Palette" class="abs"></a>Palette
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.LoadedPalette" class="abs"></a>LoadedPalette
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.UnpackedSize" class="abs"></a>UnpackedSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.Image" class="abs"></a>Image
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.ImageDiv2" class="abs"></a>ImageDiv2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.ImageDiv4" class="abs"></a>ImageDiv4
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.ImageDiv8" class="abs"></a>ImageDiv8
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.Palette16" class="abs"></a>Palette16
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodBitmap.Palette24" class="abs"></a>Palette24
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.LodBitmap.LoadBitmapPalette" class="abs"></a>LoadBitmapPalette <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.LodFile"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.LodFile</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.LodFile.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodFile.Offset" class="abs"></a>Offset
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodFile.Size" class="abs"></a>Size
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.LodRecord"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.LodRecord</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.LodRecord.LodPtr" class="abs"></a>LodPtr
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodRecord.NamePtr" class="abs"></a>NamePtr
</td><td class="def-right">
 Pointer passed to Load* function
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodRecord.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.LodSprite"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.LodSprite</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.LodSprite.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSprite.DataSize" class="abs"></a>DataSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSprite.Width" class="abs"></a>Width
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSprite.Height" class="abs"></a>Height
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSprite.Palette" class="abs"></a>Palette
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSprite.YSkip" class="abs"></a>YSkip
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSprite.UnpackedSize" class="abs"></a>UnpackedSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSprite.Lines" class="abs"></a><a href="#structs.LodSpriteLine">Lines</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSprite.Buffer" class="abs"></a>Buffer
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.LodSpriteD3D"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.LodSpriteD3D</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.Palette" class="abs"></a>Palette
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.Surface" class="abs"></a>Surface
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.Texture" class="abs"></a>Texture
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.AreaX" class="abs"></a>AreaX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.AreaY" class="abs"></a>AreaY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.BufferWidth" class="abs"></a>BufferWidth
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.BufferHeight" class="abs"></a>BufferHeight
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.AreaWidth" class="abs"></a>AreaWidth
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteD3D.AreaHeight" class="abs"></a>AreaHeight
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.LodSpriteLine"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.LodSpriteLine</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.LodSpriteLine.L" class="abs"></a>L
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteLine.R" class="abs"></a>R
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.LodSpriteLine.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapChest"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapChest</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapChest.ChestPicture" class="abs"></a>ChestPicture
</td><td class="def-right">
 0..7 <span class="def-nbsp"> </span>chest id
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapChest.Trapped" class="abs"></a>Trapped
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapChest.ItemsPlaced" class="abs"></a>ItemsPlaced
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapChest.Identified" class="abs"></a>Identified
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapChest.Bits" class="abs"></a><a href="#const.ChestBits">Bits</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapChest.Items" class="abs"></a><a href="#structs.Item">Items</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapChest.Inventory" class="abs"></a>Inventory[]
</td><td class="def-right">
 (<b class="def-param">Items</b> index) for main item cell, <span class="def-nbsp"> </span>-(1 + main <b class="def-param">Inventory</b> cell index) for other cells
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapDoor"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapDoor</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapDoor.StartState2" class="abs"></a>StartState2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.SilentMove" class="abs"></a>SilentMove
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.NoSound" class="abs"></a>NoSound
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.Stopped" class="abs"></a>Stopped
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.Id" class="abs"></a>Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.TimeStep" class="abs"></a>TimeStep
</td><td class="def-right">
 time since triggered
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.Direction" class="abs"></a>Direction[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.DirectionX" class="abs"></a>DirectionX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.DirectionY" class="abs"></a>DirectionY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.DirectionZ" class="abs"></a>DirectionZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.MoveLength" class="abs"></a>MoveLength
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.Speed2" class="abs"></a>Speed2
</td><td class="def-right">
 State 3 velocity (speed*time/128 = position)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.OpenSpeed" class="abs"></a>OpenSpeed
</td><td class="def-right">
 State 3 velocity (speed*time/128 = position)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.Speed1" class="abs"></a>Speed1
</td><td class="def-right">
 State 1 velocity (speed*time/128 = position)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.CloseSpeed" class="abs"></a>CloseSpeed
</td><td class="def-right">
 State 1 velocity
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.VertexIds" class="abs"></a>VertexIds[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.FacetIds" class="abs"></a>FacetIds[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.RoomIds" class="abs"></a>RoomIds[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.FacetStartU" class="abs"></a>FacetStartU[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.FacetStartV" class="abs"></a>FacetStartV[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.VertexStartX" class="abs"></a>VertexStartX[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.VertexStartY" class="abs"></a>VertexStartY[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.VertexStartZ" class="abs"></a>VertexStartZ[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapDoor.State" class="abs"></a>State
</td><td class="def-right">
 <b class="def-param">State</b> compared with evt.SetDoorState:<br>0 = state (0)<br>1 = move to (1)<br>2 = state (1)<br>3 = move to (0)
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapFacet"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapFacet</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapFacet.NormalF" class="abs"></a>NormalF[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  normal float
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.NormalFX" class="abs"></a>NormalFX
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  normal X float
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.NormalFY" class="abs"></a>NormalFY
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  normal Y float
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.NormalFZ" class="abs"></a>NormalFZ
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  normal Z float
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.NormalFDistance" class="abs"></a>NormalFDistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  normal distance float
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.Normal" class="abs"></a>Normal[]
</td><td class="def-right">
 normal fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.NormalX" class="abs"></a>NormalX
</td><td class="def-right">
 normal X fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.NormalY" class="abs"></a>NormalY
</td><td class="def-right">
 normal Y fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.NormalZ" class="abs"></a>NormalZ
</td><td class="def-right">
 normal Z fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.NormalDistance" class="abs"></a>NormalDistance
</td><td class="def-right">
 normal distance fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.ZCalc1" class="abs"></a>ZCalc1
</td><td class="def-right">
  <span class="def-nbsp"> </span><span class="def-code"><B><font color="#00D">=</font></B> <B><font color="#333">-</font></B>(NormalX <B><font color="#333">*</font></B> <B><font color="#079">2</font></B><B><font color="#333">^</font></B><B><font color="#079">16</font></B>) <B><font color="#333">/</font></B> NormalZ <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></span>(or 0 if <b class="def-param">NormalZ</b> is 0)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.ZCalc2" class="abs"></a>ZCalc2
</td><td class="def-right">
  <span class="def-nbsp"> </span><span class="def-code"><B><font color="#00D">=</font></B> <B><font color="#333">-</font></B>(NormalY <B><font color="#333">*</font></B> <B><font color="#079">2</font></B><B><font color="#333">^</font></B><B><font color="#079">16</font></B>) <B><font color="#333">/</font></B> NormalZ <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></span>(or 0 if <b class="def-param">NormalZ</b> is 0)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.ZCalc3" class="abs"></a>ZCalc3
</td><td class="def-right">
  <span class="def-nbsp"> </span><span class="def-code"><B><font color="#00D">=</font></B> <B><font color="#333">-</font></B>(NormalDistance <B><font color="#333">*</font></B> <B><font color="#079">2</font></B><B><font color="#333">^</font></B><B><font color="#079">16</font></B>) <B><font color="#333">/</font></B> NormalZ <span> </span></span>(or 0 if <b class="def-param">NormalZ</b> is 0)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.ScrollUp" class="abs"></a>ScrollUp
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.TriggerByObject" class="abs"></a>TriggerByObject
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  happens even if there's no event assigned
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.IsLava" class="abs"></a>IsLava
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.ScrollLeft" class="abs"></a>ScrollLeft
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.HasData" class="abs"></a>HasData
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.FlipV" class="abs"></a>FlipV
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.AnimatedTFT" class="abs"></a>AnimatedTFT
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.Invisible" class="abs"></a>Invisible
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.TriggerByStep" class="abs"></a>TriggerByStep
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.IsSecret" class="abs"></a>IsSecret
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  show in red with Perception
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.AlignLeft" class="abs"></a>AlignLeft
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.TriggerByClick" class="abs"></a>TriggerByClick
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.AlternativeSound" class="abs"></a>AlternativeSound
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.TriggerByMonster" class="abs"></a>TriggerByMonster
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  happens even if there's no event assigned
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.MoveByDoor" class="abs"></a>MoveByDoor
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.EventDisabledByCtrlClick" class="abs"></a>EventDisabledByCtrlClick
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.DisableEventByCtrlClick" class="abs"></a>DisableEventByCtrlClick
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  indoor only: click event gets disabled by Ctrl+Click
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.IsPortal" class="abs"></a>IsPortal
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.IsWater" class="abs"></a>IsWater
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.IsEventJustHint" class="abs"></a>IsEventJustHint
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.ScrollDown" class="abs"></a>ScrollDown
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.IsSky" class="abs"></a>IsSky
</td><td class="def-right">
 outdoor in software mode: horizontal flow
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.Untouchable" class="abs"></a>Untouchable
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.FlipU" class="abs"></a>FlipU
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.AlignRight" class="abs"></a>AlignRight
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.AlignTop" class="abs"></a>AlignTop
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.ScrollRight" class="abs"></a>ScrollRight
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.AlignBottom" class="abs"></a>AlignBottom
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.Bits" class="abs"></a><a href="#const.FacetBits">Bits</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.VertexIds" class="abs"></a>VertexIds[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.XInterceptDisplacement" class="abs"></a>XInterceptDisplacement[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.YInterceptDisplacement" class="abs"></a>YInterceptDisplacement[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.ZInterceptDisplacement" class="abs"></a>ZInterceptDisplacement[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.UList" class="abs"></a>UList[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.VList" class="abs"></a>VList[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.DataIndex" class="abs"></a>DataIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.BitmapId" class="abs"></a>BitmapId
</td><td class="def-right">
 Bitmap Index
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.Room" class="abs"></a>Room
</td><td class="def-right">
 Room #
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.RoomBehind" class="abs"></a>RoomBehind
</td><td class="def-right">
 Room # Behind facet
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.MinX" class="abs"></a>MinX
</td><td class="def-right">
 Bounding Box Min X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.MaxX" class="abs"></a>MaxX
</td><td class="def-right">
 Bounding Box Max X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.MinY" class="abs"></a>MinY
</td><td class="def-right">
 Bounding Box Min Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.MaxY" class="abs"></a>MaxY
</td><td class="def-right">
 Bounding Box Max Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.MinZ" class="abs"></a>MinZ
</td><td class="def-right">
 Bounding Box Min Z
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.MaxZ" class="abs"></a>MaxZ
</td><td class="def-right">
 Bounding Box Max Z
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.PolygonType" class="abs"></a>PolygonType
</td><td class="def-right">
 Polygon type:<br>0 = empty<br>1 = wall<br>2 = unused<br>3 = horizontal floor<br>4 = irregular floor (non-horizontal)<br>5 = horizontal ceiling<br>6 = irregular ceiling (non-horizontal)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapFacet.VertexesCount" class="abs"></a>VertexesCount
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapLight"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapLight</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapLight.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.Off" class="abs"></a>Off
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.Radius" class="abs"></a>Radius
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.R" class="abs"></a>R
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.G" class="abs"></a>G
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.B" class="abs"></a>B
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.Type" class="abs"></a>Type
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.Brightness" class="abs"></a>Brightness
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapLight.Id" class="abs"></a>Id
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapModel"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapModel</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapModel.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.Name2" class="abs"></a>Name2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.ShowOnMap" class="abs"></a>ShowOnMap
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.Vertexes" class="abs"></a><a href="#structs.ModelVertex">Vertexes</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.ConvexFacetsCount" class="abs"></a>ConvexFacetsCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.Facets" class="abs"></a><a href="#structs.ModelFacet">Facets</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.Ordering" class="abs"></a>Ordering[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BSPNodes" class="abs"></a><a href="#structs.BSPNode">BSPNodes</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.GridX" class="abs"></a>GridX
</td><td class="def-right">
 center X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.GridY" class="abs"></a>GridY
</td><td class="def-right">
 center Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.MinX" class="abs"></a>MinX
</td><td class="def-right">
 Bounding MIN X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.MinY" class="abs"></a>MinY
</td><td class="def-right">
 Bounding MIN Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.MinZ" class="abs"></a>MinZ
</td><td class="def-right">
 Bounding MIN Z
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.MaxX" class="abs"></a>MaxX
</td><td class="def-right">
 Bounding MAX X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.MaxY" class="abs"></a>MaxY
</td><td class="def-right">
 Bounding MAX Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.MaxZ" class="abs"></a>MaxZ
</td><td class="def-right">
 Bounding MAX Z
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BFMinX" class="abs"></a>BFMinX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BFMinY" class="abs"></a>BFMinY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BFMinZ" class="abs"></a>BFMinZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BFMaxX" class="abs"></a>BFMaxX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BFMaxY" class="abs"></a>BFMaxY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BFMaxZ" class="abs"></a>BFMaxZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BoxCenterX" class="abs"></a>BoxCenterX
</td><td class="def-right">
 Bounding center X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BoxCenterY" class="abs"></a>BoxCenterY
</td><td class="def-right">
 Bounding center Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BoxCenterZ" class="abs"></a>BoxCenterZ
</td><td class="def-right">
 Bounding center Z
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapModel.BoundingRadius" class="abs"></a>BoundingRadius
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapMonster"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapMonster</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapMonster.Name" class="abs"></a>Name
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.NPC_ID" class="abs"></a>NPC_ID
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.ShowOnMap" class="abs"></a>ShowOnMap
</td><td class="def-right">
 monster was once seen by party
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.OnAlertMap" class="abs"></a>OnAlertMap
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Active" class="abs"></a>Active
</td><td class="def-right">
 ?inside the active radius?
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.ShowAsHostile" class="abs"></a>ShowAsHostile
</td><td class="def-right">
 show as hostile on map
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Hostile" class="abs"></a>Hostile
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.TreasureGenerated" class="abs"></a>TreasureGenerated
</td><td class="def-right">
 treasure is in <b class="def-param">Items</b>[0] and <b class="def-param">Items</b>[1], gold is in <b class="def-param">Items</b>[3]
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Invisible" class="abs"></a>Invisible
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.IsObeliskChest" class="abs"></a>IsObeliskChest
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.NoFlee" class="abs"></a>NoFlee
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Bits" class="abs"></a><a href="#const.MonsterBits">Bits</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.HP" class="abs"></a>HP
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.HitPoints" class="abs"></a>HitPoints
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Id" class="abs"></a>Id
</td><td class="def-right">
 Changing may cause random crashes after loading the game! Be careful.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Level" class="abs"></a>Level
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.TreasureItemPercent" class="abs"></a>TreasureItemPercent
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.TreasureDiceCount" class="abs"></a>TreasureDiceCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.TreasureDiceSides" class="abs"></a>TreasureDiceSides
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.TreasureItemLevel" class="abs"></a>TreasureItemLevel
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.TreasureItemType" class="abs"></a>TreasureItemType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Fly" class="abs"></a>Fly
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.MoveType" class="abs"></a>MoveType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.AIType" class="abs"></a>AIType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.HostileType" class="abs"></a>HostileType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Vampire" class="abs"></a>Prefers.Vampire
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Troll" class="abs"></a>Prefers.Troll
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Monk" class="abs"></a>Prefers.Monk
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Thief" class="abs"></a>Prefers.Thief
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Cleric" class="abs"></a>Prefers.Cleric
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Male" class="abs"></a>Prefers.Male
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Sorcerer" class="abs"></a>Prefers.Sorcerer
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Female" class="abs"></a>Prefers.Female
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Dragon" class="abs"></a>Prefers.Dragon
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Minotaur" class="abs"></a>Prefers.Minotaur
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.DarkElf" class="abs"></a>Prefers.DarkElf
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Necro" class="abs"></a>Prefers.Necro
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Goblin" class="abs"></a>Prefers.Goblin
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Archer" class="abs"></a>Prefers.Archer
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Paladin" class="abs"></a>Prefers.Paladin
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Druid" class="abs"></a>Prefers.Druid
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Dwarf" class="abs"></a>Prefers.Dwarf
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Ranger" class="abs"></a>Prefers.Ranger
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Elf" class="abs"></a>Prefers.Elf
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Human" class="abs"></a>Prefers.Human
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Prefers.Knight" class="abs"></a>Prefers.Knight
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.PrefClass" class="abs"></a>PrefClass
</td><td class="def-right">
 Preferred target
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Bonus" class="abs"></a>Bonus
</td><td class="def-right">
 (steal, curse, ...)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.BonusMul" class="abs"></a>BonusMul
</td><td class="def-right">
 (Disease1x5 etc. <span class="def-nbsp"> </span>I wish I knew what it means)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Attack1" class="abs"></a><a href="#structs.MonsterAttackInfo">Attack1</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Attack2Chance" class="abs"></a>Attack2Chance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Attack2" class="abs"></a><a href="#structs.MonsterAttackInfo">Attack2</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SpellChance" class="abs"></a>SpellChance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Spell" class="abs"></a>Spell
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Spell2Chance" class="abs"></a>Spell2Chance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Spell2" class="abs"></a>Spell2
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SpellSkill" class="abs"></a>SpellSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Resistances" class="abs"></a>Resistances[<a href="#const.Damage">kind</a>]
</td><td class="def-right">
 For immunity use <a href="#const.MonsterImmune">const.MonsterImmune</a>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FireResistance" class="abs"></a>FireResistance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.AirResistance" class="abs"></a>AirResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.WaterResistance" class="abs"></a>WaterResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.EarthResistance" class="abs"></a>EarthResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.MindResistance" class="abs"></a>MindResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SpiritResistance" class="abs"></a>SpiritResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.BodyResistance" class="abs"></a>BodyResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.LightResistance" class="abs"></a>LightResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.DarkResistance" class="abs"></a>DarkResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.ColdResistance" class="abs"></a>ColdResistance
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.ElecResistance" class="abs"></a>ElecResistance
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.PoisonResistance" class="abs"></a>PoisonResistance
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.PhysResistance" class="abs"></a>PhysResistance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Special" class="abs"></a>Special
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  {shot, summon, explode}
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SpecialA" class="abs"></a>SpecialA
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  shot: C = count<br>summon: A = {RandomLevel = 0, fixed = 1} &ndash; monster level (0 means A, B or C is chosen randomly, monster index should be that of A variation. Values of 2 and 3 are the same as 1, but in MM7 before GrayFace Patch v2.1 it was causing a bug), B = {ground = 0, air = 1}, C = already summoned count (up to 3), D = monster index<br>explode: AdB + C, D = attack type
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SpecialB" class="abs"></a>SpecialB
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SpecialC" class="abs"></a>SpecialC
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.MagicResistance" class="abs"></a>MagicResistance
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.PrefNum" class="abs"></a>PrefNum
</td><td class="def-right">
 Number of party members to hit using Attack1 &amp; Attack2
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.BloodSplat" class="abs"></a>BloodSplat
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Spell2Skill" class="abs"></a>Spell2Skill
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SpecialD" class="abs"></a>SpecialD
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  (summoned monster or damage type in case of explosive attack)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.QuestItem" class="abs"></a>QuestItem
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FullHP" class="abs"></a>FullHP
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FullHitPoints" class="abs"></a>FullHitPoints
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.ArmorClass" class="abs"></a>ArmorClass
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Exp" class="abs"></a>Exp
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Experience" class="abs"></a>Experience
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.MoveSpeed" class="abs"></a>MoveSpeed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.AttackRecovery" class="abs"></a>AttackRecovery
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.RangeAttack" class="abs"></a>RangeAttack
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Id2" class="abs"></a>Id2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.BodyRadius" class="abs"></a>BodyRadius
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.BodyHeight" class="abs"></a>BodyHeight
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Velocity" class="abs"></a>Velocity
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.VelocityX" class="abs"></a>VelocityX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.VelocityY" class="abs"></a>VelocityY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.VelocityZ" class="abs"></a>VelocityZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Direction" class="abs"></a>Direction
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.LookAngle" class="abs"></a>LookAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Room" class="abs"></a>Room
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.CurrentActionLength" class="abs"></a>CurrentActionLength
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.StartX" class="abs"></a>StartX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.StartY" class="abs"></a>StartY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.StartZ" class="abs"></a>StartZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.GuardX" class="abs"></a>GuardX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.GuardY" class="abs"></a>GuardY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.GuardZ" class="abs"></a>GuardZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.GuardRadius" class="abs"></a>GuardRadius
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.AIState" class="abs"></a><a href="#const.AIState">AIState</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.GraphicState" class="abs"></a>GraphicState
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Item" class="abs"></a>Item
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.CurrentActionStep" class="abs"></a>CurrentActionStep
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Frames" class="abs"></a>Frames[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FramesStand" class="abs"></a>FramesStand
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FramesWalk" class="abs"></a>FramesWalk
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FramesAttack" class="abs"></a>FramesAttack
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FramesShoot" class="abs"></a>FramesShoot
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FramesStun" class="abs"></a>FramesStun
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FramesDie" class="abs"></a>FramesDie
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FramesDead" class="abs"></a>FramesDead
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.FramesFidget" class="abs"></a>FramesFidget
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Sounds" class="abs"></a>Sounds[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SoundAttack" class="abs"></a>SoundAttack
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SoundDie" class="abs"></a>SoundDie
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SoundGetHit" class="abs"></a>SoundGetHit
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SoundFidget" class="abs"></a>SoundFidget
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SpellBuffs" class="abs"></a><a href="#structs.SpellBuff">SpellBuffs</a>[<a href="#const.MonsterBuff">buff</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Items" class="abs"></a><a href="#structs.Item">Items</a>[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Group" class="abs"></a>Group
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Ally" class="abs"></a>Ally
</td><td class="def-right">
 Monster class that guards or is guraded by this one. That is, <span class="def-code">(Id <B><font color="#333">+</font></B> <B><font color="#079">2</font></B>):div(<B><font color="#079">3</font></B>)</span>, like in Hostile.txt.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Schedules" class="abs"></a><a href="#structs.MonsterSchedule">Schedules</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.Summoner" class="abs"></a>Summoner
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.LastAttacker" class="abs"></a>LastAttacker
</td><td class="def-right">
 last one who hit the monster
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.NameId" class="abs"></a>NameId
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapMonster.LoadFrames" class="abs"></a>LoadFrames <span class="def-nbsp"> </span><b>(</b> SoundLoaded = false <b>)</b>
</td><td class="def-right">
 If <b class="def-param">SoundLoaded</b> = <b class="def-param">false</b>, sound indexes would be loaded for the monster as well.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.LoadFramesAndSounds" class="abs"></a>LoadFramesAndSounds <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.ChangeLook" class="abs"></a>ChangeLook <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.GetPropertiesFromId" class="abs"></a>GetPropertiesFromId <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SetId" class="abs"></a>SetId <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapMonster.SetCustomFrames" class="abs"></a>SetCustomFrames <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapNote"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapNote</h3>
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapNote.Active" class="abs"></a>Active
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapNote.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapNote.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapNote.Text" class="abs"></a>Text
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapNote.Id" class="abs"></a>Id
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapObject"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapObject</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapObject.Type" class="abs"></a>Type
</td><td class="def-right">
 look type <span class="def-nbsp"> </span>(see Id in dobjlist.bin)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.TypeIndex" class="abs"></a>TypeIndex
</td><td class="def-right">
 line in dobjlist.bin
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Velocity" class="abs"></a>Velocity[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.VelocityX" class="abs"></a>VelocityX
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.VelocityY" class="abs"></a>VelocityY
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.VelocityZ" class="abs"></a>VelocityZ
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Direction" class="abs"></a>Direction
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.LookAngle" class="abs"></a>LookAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Visible" class="abs"></a>Visible
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Temporary" class="abs"></a>Temporary
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.HaltTurnBased" class="abs"></a>HaltTurnBased
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.DroppedByPlayer" class="abs"></a>DroppedByPlayer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.IgnoreRange" class="abs"></a>IgnoreRange
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.NoZBuffer" class="abs"></a>NoZBuffer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.SkipAFrame" class="abs"></a>SkipAFrame
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.AttachToHead" class="abs"></a>AttachToHead
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Missile" class="abs"></a>Missile
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Removed" class="abs"></a>Removed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Room" class="abs"></a>Room
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Age" class="abs"></a>Age
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.MaxAge" class="abs"></a>MaxAge
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.LightMultiplier" class="abs"></a>LightMultiplier
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Item" class="abs"></a><a href="#structs.Item">Item</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.SpellType" class="abs"></a>SpellType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.SpellSkill" class="abs"></a>SpellSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.SpellLevel" class="abs"></a>SpellLevel
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.SpellEffect" class="abs"></a><a href="#structs.SpellEffect">SpellEffect</a>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Owner" class="abs"></a>Owner
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Target" class="abs"></a>Target
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.Range" class="abs"></a>Range
</td><td class="def-right">
 Distance to target: 0 &ndash; less than 307.2, 1 &ndash; less than 1024, 2 &ndash; less then 2560, 3 &ndash; 2560 or more
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.AttackType" class="abs"></a>AttackType
</td><td class="def-right">
 0 &ndash; Attack1, 1 &ndash; Attack2, 2 &ndash; Spell, 3 &ndash; Spell2
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.StartPos" class="abs"></a>StartPos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.StartX" class="abs"></a>StartX
</td><td class="def-right">
 starting x
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.StartY" class="abs"></a>StartY
</td><td class="def-right">
 starting y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapObject.StartZ" class="abs"></a>StartZ
</td><td class="def-right">
 starting z
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapOutline"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapOutline</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapOutline.Vertex1" class="abs"></a>Vertex1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapOutline.Vertex2" class="abs"></a>Vertex2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapOutline.Facet1" class="abs"></a>Facet1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapOutline.Facet2" class="abs"></a>Facet2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapOutline.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapOutline.Visible" class="abs"></a>Visible
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapOutline.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapOutlines"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapOutlines</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapOutlines.Items" class="abs"></a><a href="#structs.MapOutline">Items</a>[]
</td><td class="def-right">
<b class="def-default">(Default)</b> 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapRoom"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapRoom</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapRoom.HasBSP" class="abs"></a>HasBSP
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.EaxEnvironment" class="abs"></a>EaxEnvironment
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Floors" class="abs"></a>Floors[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Walls" class="abs"></a>Walls[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Ceils" class="abs"></a>Ceils[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Fluids" class="abs"></a>Fluids[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Portals" class="abs"></a>Portals[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.NonBSPDrawFacetsCount" class="abs"></a>NonBSPDrawFacetsCount
</td><td class="def-right">
 # of non-BSP Node facets to draw
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.DrawFacets" class="abs"></a>DrawFacets[]
</td><td class="def-right">
 drawing order
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Cogs" class="abs"></a>Cogs[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Sprites" class="abs"></a>Sprites[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Markers" class="abs"></a>Markers[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Lights" class="abs"></a>Lights[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.Darkness" class="abs"></a>Darkness
</td><td class="def-right">
 Min Ambient Light Level
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.FirstBSPNode" class="abs"></a>FirstBSPNode
</td><td class="def-right">
 First BSP Node Index
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.ExitTag" class="abs"></a>ExitTag
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.MinX" class="abs"></a>MinX
</td><td class="def-right">
 Bounding Box Min X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.MaxX" class="abs"></a>MaxX
</td><td class="def-right">
 Bounding Box Max X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.MinY" class="abs"></a>MinY
</td><td class="def-right">
 Bounding Box Min Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.MaxY" class="abs"></a>MaxY
</td><td class="def-right">
 Bounding Box Max Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.MinZ" class="abs"></a>MinZ
</td><td class="def-right">
 Bounding Box Min Z
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapRoom.MaxZ" class="abs"></a>MaxZ
</td><td class="def-right">
 Bounding Box Max Z
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapSprite"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapSprite</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapSprite.DecListId" class="abs"></a>DecListId
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.DecName" class="abs"></a>DecName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.ShowOnMap" class="abs"></a>ShowOnMap
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.TriggerByMonster" class="abs"></a>TriggerByMonster
</td><td class="def-right">
 triggered when a monster comes into <b class="def-param">TriggerRadius</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.Invisible" class="abs"></a>Invisible
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.IsObeliskChest" class="abs"></a>IsObeliskChest
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.TriggerByObject" class="abs"></a>TriggerByObject
</td><td class="def-right">
 triggered when an object gets into <b class="def-param">TriggerRadius</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.TriggerByTouch" class="abs"></a>TriggerByTouch
</td><td class="def-right">
 triggered when a player comes into <b class="def-param">TriggerRadius</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.IsChest" class="abs"></a>IsChest
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.Bits" class="abs"></a><a href="#const.SpriteBits">Bits</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.Direction" class="abs"></a>Direction
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.Id" class="abs"></a>Id
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.EventVariable" class="abs"></a>EventVariable
</td><td class="def-right">
 event variable for barrels etc.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.Event" class="abs"></a>Event
</td><td class="def-right">
 normal event
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapSprite.TriggerRadius" class="abs"></a>TriggerRadius
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapStatsItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapStatsItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapStatsItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.FileName" class="abs"></a>FileName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Monster1Pic" class="abs"></a>Monster1Pic
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Monster2Pic" class="abs"></a>Monster2Pic
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Monster3Pic" class="abs"></a>Monster3Pic
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.ResetCount" class="abs"></a>ResetCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.FirstVisitDay" class="abs"></a>FirstVisitDay
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.RefillDays" class="abs"></a>RefillDays
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.AlertDays" class="abs"></a>AlertDays
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.StealPerm" class="abs"></a>StealPerm
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Per" class="abs"></a>Per
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Lock" class="abs"></a>Lock
</td><td class="def-right">
 x5Lock
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Trap" class="abs"></a>Trap
</td><td class="def-right">
 D20sTrap
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Tres" class="abs"></a>Tres
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.EncounterChance" class="abs"></a>EncounterChance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.EncounterChanceM1" class="abs"></a>EncounterChanceM1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.EncounterChanceM2" class="abs"></a>EncounterChanceM2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.EncounterChanceM3" class="abs"></a>EncounterChanceM3
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Mon1Dif" class="abs"></a>Mon1Dif
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Mon1Low" class="abs"></a>Mon1Low
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Mon1Hi" class="abs"></a>Mon1Hi
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Mon2Dif" class="abs"></a>Mon2Dif
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Mon2Low" class="abs"></a>Mon2Low
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Mon2Hi" class="abs"></a>Mon2Hi
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Mon3Dif" class="abs"></a>Mon3Dif
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Mon3Low" class="abs"></a>Mon3Low
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.Mon3Hi" class="abs"></a>Mon3Hi
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.RedbookTrack" class="abs"></a>RedbookTrack
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapStatsItem.EaxEnvironments" class="abs"></a>EaxEnvironments
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MapVertex"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MapVertex</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MapVertex.1" class="abs"></a>1
</td><td class="def-right">
 same as <b class="def-param">X</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapVertex.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapVertex.2" class="abs"></a>2
</td><td class="def-right">
 same as <b class="def-param">Y</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapVertex.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapVertex.3" class="abs"></a>3
</td><td class="def-right">
 same as <b class="def-param">Z</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MapVertex.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.ModelFacet"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.ModelFacet</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.ModelFacet.Normal" class="abs"></a>Normal[]
</td><td class="def-right">
 normal fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.NormalX" class="abs"></a>NormalX
</td><td class="def-right">
 normal X fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.NormalY" class="abs"></a>NormalY
</td><td class="def-right">
 normal Y fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.NormalZ" class="abs"></a>NormalZ
</td><td class="def-right">
 normal Z fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.NormalDistance" class="abs"></a>NormalDistance
</td><td class="def-right">
 normal distance fixed pt (0..0x10000)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.ZCalc1" class="abs"></a>ZCalc1
</td><td class="def-right">
  <span class="def-nbsp"> </span><span class="def-code"><B><font color="#00D">=</font></B> <B><font color="#333">-</font></B>(NormalX <B><font color="#333">*</font></B> <B><font color="#079">2</font></B><B><font color="#333">^</font></B><B><font color="#079">16</font></B>) <B><font color="#333">/</font></B> NormalZ <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></span>(or 0 if <b class="def-param">NormalZ</b> is 0)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.ZCalc2" class="abs"></a>ZCalc2
</td><td class="def-right">
  <span class="def-nbsp"> </span><span class="def-code"><B><font color="#00D">=</font></B> <B><font color="#333">-</font></B>(NormalY <B><font color="#333">*</font></B> <B><font color="#079">2</font></B><B><font color="#333">^</font></B><B><font color="#079">16</font></B>) <B><font color="#333">/</font></B> NormalZ <span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span><span> </span></span>(or 0 if <b class="def-param">NormalZ</b> is 0)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.ZCalc3" class="abs"></a>ZCalc3
</td><td class="def-right">
  <span class="def-nbsp"> </span><span class="def-code"><B><font color="#00D">=</font></B> <B><font color="#333">-</font></B>(NormalDistance <B><font color="#333">*</font></B> <B><font color="#079">2</font></B><B><font color="#333">^</font></B><B><font color="#079">16</font></B>) <B><font color="#333">/</font></B> NormalZ <span> </span></span>(or 0 if <b class="def-param">NormalZ</b> is 0)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.ScrollUp" class="abs"></a>ScrollUp
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.TriggerByObject" class="abs"></a>TriggerByObject
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  happens even if there's no event assigned
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.IsLava" class="abs"></a>IsLava
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.ScrollLeft" class="abs"></a>ScrollLeft
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.HasData" class="abs"></a>HasData
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.FlipV" class="abs"></a>FlipV
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.AnimatedTFT" class="abs"></a>AnimatedTFT
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.Invisible" class="abs"></a>Invisible
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.TriggerByStep" class="abs"></a>TriggerByStep
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.IsSecret" class="abs"></a>IsSecret
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  show in red with Perception
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.AlignLeft" class="abs"></a>AlignLeft
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.TriggerByClick" class="abs"></a>TriggerByClick
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.AlternativeSound" class="abs"></a>AlternativeSound
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.TriggerByMonster" class="abs"></a>TriggerByMonster
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  happens even if there's no event assigned
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.MoveByDoor" class="abs"></a>MoveByDoor
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.EventDisabledByCtrlClick" class="abs"></a>EventDisabledByCtrlClick
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.DisableEventByCtrlClick" class="abs"></a>DisableEventByCtrlClick
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  indoor only: click event gets disabled by Ctrl+Click
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.IsPortal" class="abs"></a>IsPortal
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.IsWater" class="abs"></a>IsWater
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.IsEventJustHint" class="abs"></a>IsEventJustHint
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.ScrollDown" class="abs"></a>ScrollDown
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.IsSky" class="abs"></a>IsSky
</td><td class="def-right">
 outdoor in software mode: horizontal flow
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.Untouchable" class="abs"></a>Untouchable
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.FlipU" class="abs"></a>FlipU
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.AlignRight" class="abs"></a>AlignRight
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.AlignTop" class="abs"></a>AlignTop
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.ScrollRight" class="abs"></a>ScrollRight
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.AlignBottom" class="abs"></a>AlignBottom
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.Bits" class="abs"></a><a href="#const.FacetBits">Bits</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.VertexIds" class="abs"></a>VertexIds[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.UList" class="abs"></a>UList[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.VList" class="abs"></a>VList[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.XInterceptDisplacement" class="abs"></a>XInterceptDisplacement[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.YInterceptDisplacement" class="abs"></a>YInterceptDisplacement[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.ZInterceptDisplacement" class="abs"></a>ZInterceptDisplacement[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.BitmapId" class="abs"></a>BitmapId
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.BitmapU" class="abs"></a>BitmapU
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.BitmapV" class="abs"></a>BitmapV
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.MinX" class="abs"></a>MinX
</td><td class="def-right">
 Bounding Box Min X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.MaxX" class="abs"></a>MaxX
</td><td class="def-right">
 Bounding Box Max X
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.MinY" class="abs"></a>MinY
</td><td class="def-right">
 Bounding Box Min Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.MaxY" class="abs"></a>MaxY
</td><td class="def-right">
 Bounding Box Max Y
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.MinZ" class="abs"></a>MinZ
</td><td class="def-right">
 Bounding Box Min Z
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.MaxZ" class="abs"></a>MaxZ
</td><td class="def-right">
 Bounding Box Max Z
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.Id" class="abs"></a>Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.Event" class="abs"></a>Event
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.GradientVertexes" class="abs"></a>GradientVertexes[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.VertexesCount" class="abs"></a>VertexesCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelFacet.PolygonType" class="abs"></a>PolygonType
</td><td class="def-right">
 Polygon type:<br>0 = empty<br>1 = wall<br>2 = unused<br>3 = horizontal floor<br>4 = irregular floor (non-horizontal)<br>5 = horizontal ceiling<br>6 = irregular ceiling (non-horizontal)
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.ModelVertex"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.ModelVertex</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.ModelVertex.1" class="abs"></a>1
</td><td class="def-right">
 same as <b class="def-param">X</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelVertex.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelVertex.2" class="abs"></a>2
</td><td class="def-right">
 same as <b class="def-param">Y</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelVertex.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelVertex.3" class="abs"></a>3
</td><td class="def-right">
 same as <b class="def-param">Z</b>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ModelVertex.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MonListItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MonListItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MonListItem.Height" class="abs"></a>Height
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.Radius" class="abs"></a>Radius
</td><td class="def-right">
 overall monster radius
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.Velocity" class="abs"></a>Velocity
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.Radius2" class="abs"></a>Radius2
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  monster radius for "to-hit" purposes
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.Tint" class="abs"></a>Tint
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  tint color for graphic
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.TintB" class="abs"></a>TintB
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.TintG" class="abs"></a>TintG
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.TintR" class="abs"></a>TintR
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.TintA" class="abs"></a>TintA
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.Sounds" class="abs"></a>Sounds[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.SoundAttack" class="abs"></a>SoundAttack
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.SoundDie" class="abs"></a>SoundDie
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.SoundGetHit" class="abs"></a>SoundGetHit
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.SoundFidget" class="abs"></a>SoundFidget
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.FrameNames" class="abs"></a>FrameNames[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.FramesStand" class="abs"></a>FramesStand
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.FramesWalk" class="abs"></a>FramesWalk
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.FramesAttack" class="abs"></a>FramesAttack
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.FramesShoot" class="abs"></a>FramesShoot
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.FramesStun" class="abs"></a>FramesStun
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.FramesDie" class="abs"></a>FramesDie
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.FramesDead" class="abs"></a>FramesDead
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonListItem.FramesFidget" class="abs"></a>FramesFidget
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MonsterAttackInfo"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MonsterAttackInfo</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MonsterAttackInfo.Type" class="abs"></a>Type
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterAttackInfo.DamageDiceCount" class="abs"></a>DamageDiceCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterAttackInfo.DamageDiceSides" class="abs"></a>DamageDiceSides
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterAttackInfo.DamageAdd" class="abs"></a>DamageAdd
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterAttackInfo.Missile" class="abs"></a>Missile
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MonsterKind"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MonsterKind</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MonsterKind.Undead" class="abs"></a>Undead
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.Demon" class="abs"></a>Demon
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.Dragon" class="abs"></a>Dragon
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.Elf" class="abs"></a>Elf
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.Swimmer" class="abs"></a>Swimmer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.Immobile" class="abs"></a>Immobile
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.Peasant" class="abs"></a>Peasant
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.Titan" class="abs"></a>Titan
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.NoArena" class="abs"></a>NoArena
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.Ogre" class="abs"></a>Ogre
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterKind.Elemental" class="abs"></a>Elemental
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MonsterSchedule"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MonsterSchedule</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MonsterSchedule.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterSchedule.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterSchedule.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterSchedule.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterSchedule.Bits" class="abs"></a>Bits
</td><td class="def-right">
 (1 &ndash; on)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterSchedule.Action" class="abs"></a>Action
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterSchedule.Hour" class="abs"></a>Hour
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterSchedule.Day" class="abs"></a>Day
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonsterSchedule.Month" class="abs"></a>Month
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.MonstersTxtItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.MonstersTxtItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Picture" class="abs"></a>Picture
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Id" class="abs"></a>Id
</td><td class="def-right">
 Changing may cause random crashes after loading the game! Be careful.
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Level" class="abs"></a>Level
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.TreasureItemPercent" class="abs"></a>TreasureItemPercent
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.TreasureDiceCount" class="abs"></a>TreasureDiceCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.TreasureDiceSides" class="abs"></a>TreasureDiceSides
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.TreasureItemLevel" class="abs"></a>TreasureItemLevel
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.TreasureItemType" class="abs"></a>TreasureItemType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Fly" class="abs"></a>Fly
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.MoveType" class="abs"></a>MoveType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.AIType" class="abs"></a>AIType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.HostileType" class="abs"></a>HostileType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Vampire" class="abs"></a>Prefers.Vampire
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Troll" class="abs"></a>Prefers.Troll
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Monk" class="abs"></a>Prefers.Monk
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Thief" class="abs"></a>Prefers.Thief
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Cleric" class="abs"></a>Prefers.Cleric
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Male" class="abs"></a>Prefers.Male
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Sorcerer" class="abs"></a>Prefers.Sorcerer
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Female" class="abs"></a>Prefers.Female
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Dragon" class="abs"></a>Prefers.Dragon
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Minotaur" class="abs"></a>Prefers.Minotaur
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.DarkElf" class="abs"></a>Prefers.DarkElf
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Necro" class="abs"></a>Prefers.Necro
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Goblin" class="abs"></a>Prefers.Goblin
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Archer" class="abs"></a>Prefers.Archer
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Paladin" class="abs"></a>Prefers.Paladin
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Druid" class="abs"></a>Prefers.Druid
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Dwarf" class="abs"></a>Prefers.Dwarf
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Ranger" class="abs"></a>Prefers.Ranger
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Elf" class="abs"></a>Prefers.Elf
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Human" class="abs"></a>Prefers.Human
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Prefers.Knight" class="abs"></a>Prefers.Knight
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.PrefClass" class="abs"></a>PrefClass
</td><td class="def-right">
 Preferred target
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Bonus" class="abs"></a>Bonus
</td><td class="def-right">
 (steal, curse, ...)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.BonusMul" class="abs"></a>BonusMul
</td><td class="def-right">
 (Disease1x5 etc. <span class="def-nbsp"> </span>I wish I knew what it means)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Attack1" class="abs"></a><a href="#structs.MonsterAttackInfo">Attack1</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Attack2Chance" class="abs"></a>Attack2Chance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Attack2" class="abs"></a><a href="#structs.MonsterAttackInfo">Attack2</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.SpellChance" class="abs"></a>SpellChance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Spell" class="abs"></a>Spell
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Spell2Chance" class="abs"></a>Spell2Chance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Spell2" class="abs"></a>Spell2
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.SpellSkill" class="abs"></a>SpellSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Resistances" class="abs"></a>Resistances[<a href="#const.Damage">kind</a>]
</td><td class="def-right">
 For immunity use <a href="#const.MonsterImmune">const.MonsterImmune</a>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.FireResistance" class="abs"></a>FireResistance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.AirResistance" class="abs"></a>AirResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.WaterResistance" class="abs"></a>WaterResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.EarthResistance" class="abs"></a>EarthResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.MindResistance" class="abs"></a>MindResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.SpiritResistance" class="abs"></a>SpiritResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.BodyResistance" class="abs"></a>BodyResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.LightResistance" class="abs"></a>LightResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.DarkResistance" class="abs"></a>DarkResistance
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.ColdResistance" class="abs"></a>ColdResistance
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.ElecResistance" class="abs"></a>ElecResistance
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.PoisonResistance" class="abs"></a>PoisonResistance
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.PhysResistance" class="abs"></a>PhysResistance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Special" class="abs"></a>Special
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  {shot, summon, explode}
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.SpecialA" class="abs"></a>SpecialA
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  shot: C = count<br>summon: A = {RandomLevel = 0, fixed = 1} &ndash; monster level (0 means A, B or C is chosen randomly, monster index should be that of A variation. Values of 2 and 3 are the same as 1, but in MM7 before GrayFace Patch v2.1 it was causing a bug), B = {ground = 0, air = 1}, C = already summoned count (up to 3), D = monster index<br>explode: AdB + C, D = attack type
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.SpecialB" class="abs"></a>SpecialB
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.SpecialC" class="abs"></a>SpecialC
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.MagicResistance" class="abs"></a>MagicResistance
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.PrefNum" class="abs"></a>PrefNum
</td><td class="def-right">
 Number of party members to hit using Attack1 &amp; Attack2
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.BloodSplat" class="abs"></a>BloodSplat
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Spell2Skill" class="abs"></a>Spell2Skill
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.SpecialD" class="abs"></a>SpecialD
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  (summoned monster or damage type in case of explosive attack)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.QuestItem" class="abs"></a>QuestItem
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.FullHP" class="abs"></a>FullHP
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.FullHitPoints" class="abs"></a>FullHitPoints
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.ArmorClass" class="abs"></a>ArmorClass
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Exp" class="abs"></a>Exp
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.Experience" class="abs"></a>Experience
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.MoveSpeed" class="abs"></a>MoveSpeed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.MonstersTxtItem.AttackRecovery" class="abs"></a>AttackRecovery
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.NPC"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.NPC</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.NPC.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Pic" class="abs"></a>Pic
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Hired" class="abs"></a>Hired
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Fame" class="abs"></a>Fame
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Rep" class="abs"></a>Rep
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.House" class="abs"></a>House
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Profession" class="abs"></a>Profession
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Greet" class="abs"></a>Greet
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Joins" class="abs"></a>Joins
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.TellsNews" class="abs"></a>TellsNews
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Events" class="abs"></a>Events[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.EventA" class="abs"></a>EventA
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.EventB" class="abs"></a>EventB
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.EventC" class="abs"></a>EventC
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.EventD" class="abs"></a>EventD
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.EventE" class="abs"></a>EventE
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.EventF" class="abs"></a>EventF
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.Sex" class="abs"></a>Sex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.UsedSpell" class="abs"></a>UsedSpell
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPC.NewsTopic" class="abs"></a>NewsTopic
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.NPCNewsItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.NPCNewsItem</h3>
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.NPCNewsItem.Topic" class="abs"></a>Topic
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPCNewsItem.Text" class="abs"></a>Text
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.NPCNewsItem.Map" class="abs"></a>Map
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.ObjListItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.ObjListItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.ObjListItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.Id" class="abs"></a>Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.Radius" class="abs"></a>Radius
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.Height" class="abs"></a>Height
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.Invisible" class="abs"></a>Invisible
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.Untouchable" class="abs"></a>Untouchable
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.Temporary" class="abs"></a>Temporary
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.LifetimeInSFT" class="abs"></a>LifetimeInSFT
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.NoPickup" class="abs"></a>NoPickup
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.NoGravity" class="abs"></a>NoGravity
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.InterceptAction" class="abs"></a>InterceptAction
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.Bounce" class="abs"></a>Bounce
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.TrailParticles" class="abs"></a>TrailParticles
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.TrailFire" class="abs"></a>TrailFire
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.TrailLine" class="abs"></a>TrailLine
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.SFTIndex" class="abs"></a>SFTIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.SFTGroup" class="abs"></a>SFTGroup
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.LifeTime" class="abs"></a>LifeTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.LoadedParticlesColor" class="abs"></a>LoadedParticlesColor
</td><td class="def-right">
 munged 16-bit color
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.Speed" class="abs"></a>Speed
</td><td class="def-right">
 default speed of object
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.ParticlesColor" class="abs"></a>ParticlesColor[]
</td><td class="def-right">
 color for particles
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.ParticleR" class="abs"></a>ParticleR
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.ParticleG" class="abs"></a>ParticleG
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.ParticleB" class="abs"></a>ParticleB
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjListItem.ParticleA" class="abs"></a>ParticleA
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.ObjectRef"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.ObjectRef</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.ObjectRef.ZBuf" class="abs"></a>ZBuf
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjectRef.Value" class="abs"></a>Value
</td><td class="def-right">
 raw value, in inventory screen this is item index
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjectRef.Kind" class="abs"></a><a href="#const.ObjectRefKind">Kind</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.ObjectRef.Index" class="abs"></a>Index
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.ObjectRef.Get" class="abs"></a>Get <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.OdmHeader"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.OdmHeader</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.OdmHeader.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OdmHeader.FileName" class="abs"></a>FileName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OdmHeader.VersionStr" class="abs"></a>VersionStr
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OdmHeader.TilesetsFile" class="abs"></a>TilesetsFile
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  0 = dtile.bin, 1 = dtile2.bin, 2 = dtile3.bin
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OdmHeader.Tilesets" class="abs"></a><a href="#structs.TilesetDef">Tilesets</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OdmHeader.Bits" class="abs"></a>Bits
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.OutdoorExtra"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.OutdoorExtra</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.OutdoorExtra.LastVisitTime" class="abs"></a>LastVisitTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.SkyBitmap" class="abs"></a>SkyBitmap
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.Foggy" class="abs"></a>Foggy
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.DayBits" class="abs"></a>DayBits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.FogRange1" class="abs"></a>FogRange1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.FogRange2" class="abs"></a>FogRange2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.Raining" class="abs"></a>Raining
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.Snowing" class="abs"></a>Snowing
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.Underwater" class="abs"></a>Underwater
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  elemw.odm
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.NoTerrain" class="abs"></a>NoTerrain
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  elema.odm
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.AlwaysDark" class="abs"></a>AlwaysDark
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.AlwaysLight" class="abs"></a>AlwaysLight
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  elema.odm
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.AlwaysFoggy" class="abs"></a>AlwaysFoggy
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  elemf.odm, elemw.odm
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.RedFog" class="abs"></a>RedFog
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  elemf.odm
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.Bits" class="abs"></a>Bits
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OutdoorExtra.Ceiling" class="abs"></a>Ceiling
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.OverlayItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.OverlayItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.OverlayItem.Id" class="abs"></a>Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OverlayItem.Type" class="abs"></a>Type
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OverlayItem.SFTIndex" class="abs"></a>SFTIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.OverlayItem.SFTGroup" class="abs"></a>SFTGroup
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.PFTItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.PFTItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.PFTItem.GroupId" class="abs"></a>GroupId
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PFTItem.FrameIndex" class="abs"></a>FrameIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PFTItem.Time" class="abs"></a>Time
</td><td class="def-right">
 time for this frame in 1/32 of a second
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PFTItem.TotalTime" class="abs"></a>TotalTime
</td><td class="def-right">
 total time for this group
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PFTItem.NotGroupEnd" class="abs"></a>NotGroupEnd
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PFTItem.GroupStart" class="abs"></a>GroupStart
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PFTItem.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.PatchOptions"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.PatchOptions</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.PatchOptions.Size" class="abs"></a>Size
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.MaxMLookAngle" class="abs"></a>MaxMLookAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.MouseLook" class="abs"></a>MouseLook
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.MouseLookUseAltMode" class="abs"></a>MouseLookUseAltMode
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.CapsLockToggleMouseLook" class="abs"></a>CapsLockToggleMouseLook
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.MouseFly" class="abs"></a>MouseFly
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.MouseWheelFly" class="abs"></a>MouseWheelFly
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.MouseLookTempKey" class="abs"></a>MouseLookTempKey
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.MouseLookChangeKey" class="abs"></a>MouseLookChangeKey
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.InventoryKey" class="abs"></a>InventoryKey
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.CharScreenKey" class="abs"></a>CharScreenKey
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.DoubleSpeedKey" class="abs"></a>DoubleSpeedKey
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.QuickLoadKey" class="abs"></a>QuickLoadKey
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.AutorunKey" class="abs"></a>AutorunKey
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.HDWTRCount" class="abs"></a>HDWTRCount
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.HDWTRDelay" class="abs"></a>HDWTRDelay
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.HorsemanSpeakTime" class="abs"></a>HorsemanSpeakTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.BoatmanSpeakTime" class="abs"></a>BoatmanSpeakTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.PaletteSMul" class="abs"></a>PaletteSMul
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.PaletteVMul" class="abs"></a>PaletteVMul
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.NoBitmapsHwl" class="abs"></a>NoBitmapsHwl
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.PlayMP3" class="abs"></a>PlayMP3
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.MusicLoopsCount" class="abs"></a>MusicLoopsCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.HardenArtifacts" class="abs"></a>HardenArtifacts
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.ProgressiveDaggerTrippleDamage" class="abs"></a>ProgressiveDaggerTrippleDamage
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.FixChests" class="abs"></a>FixChests
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.DataFiles" class="abs"></a>DataFiles
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.FixDualWeaponsRecovery" class="abs"></a>FixDualWeaponsRecovery
</td><td class="def-right">
 <span class="def-ver">[MM6]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.IncreaseRecoveryRateStrength" class="abs"></a>IncreaseRecoveryRateStrength
</td><td class="def-right">
 <span class="def-ver">[MM6]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.BlasterRecovery" class="abs"></a>BlasterRecovery
</td><td class="def-right">
 <span class="def-ver">[MM6, MM7]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.FixSkyBitmap" class="abs"></a>FixSkyBitmap
</td><td class="def-right">
 <span class="def-ver">[MM8]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.NoCD" class="abs"></a>NoCD
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.FixChestsByReorder" class="abs"></a>FixChestsByReorder
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.LastLoadedFileSize" class="abs"></a>LastLoadedFileSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.FixTimers" class="abs"></a>FixTimers
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.FixMovement" class="abs"></a>FixMovement
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.MonsterJumpDownLimit" class="abs"></a>MonsterJumpDownLimit
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.FixHeroismPedestal" class="abs"></a>FixHeroismPedestal
</td><td class="def-right">
 <span class="def-ver">[MM8]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.SkipUnsellableItemCheck" class="abs"></a>SkipUnsellableItemCheck
</td><td class="def-right">
 <span class="def-ver">[MM7]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.FixGMStaff" class="abs"></a>FixGMStaff
</td><td class="def-right">
 <span class="def-ver">[MM7]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.FixObelisks" class="abs"></a>FixObelisks
</td><td class="def-right">
 <span class="def-ver">[MM8]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.BorderlessWindowed" class="abs"></a>BorderlessWindowed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.CompatibleMovieRender" class="abs"></a>CompatibleMovieRender
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.SmoothMovieScaling" class="abs"></a>SmoothMovieScaling
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.PatchOptions.SupportTrueColor" class="abs"></a>SupportTrueColor
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.PatchOptions.Present" class="abs"></a>Present <span class="def-nbsp"> </span><b>(</b> name <b>)</b>
</td><td class="def-right">
 Returns <b class="def-param">true</b> if the option is supported by patch version being used
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.Player"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.Player</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.Player.Biography" class="abs"></a>Biography
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Sex" class="abs"></a>Sex
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Conditions" class="abs"></a>Conditions[<a href="#const.Condition">cond</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Exp" class="abs"></a>Exp
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Experience" class="abs"></a>Experience
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Class" class="abs"></a>Class
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Face" class="abs"></a>Face
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Stats" class="abs"></a><a href="#structs.BaseBonus">Stats</a>[<a href="#const.Stats">stat</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.MightBase" class="abs"></a>MightBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.MightBonus" class="abs"></a>MightBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.IntellectBase" class="abs"></a>IntellectBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.IntellectBonus" class="abs"></a>IntellectBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.PersonalityBase" class="abs"></a>PersonalityBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.PersonalityBonus" class="abs"></a>PersonalityBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.EnduranceBase" class="abs"></a>EnduranceBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.EnduranceBonus" class="abs"></a>EnduranceBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SpeedBase" class="abs"></a>SpeedBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SpeedBonus" class="abs"></a>SpeedBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.AccuracyBase" class="abs"></a>AccuracyBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.AccuracyBonus" class="abs"></a>AccuracyBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.LuckBase" class="abs"></a>LuckBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.LuckBonus" class="abs"></a>LuckBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ArmorClassBonus" class="abs"></a>ArmorClassBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.LevelBase" class="abs"></a>LevelBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.LevelBonus" class="abs"></a>LevelBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.AgeBonus" class="abs"></a>AgeBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Skills" class="abs"></a>Skills[<a href="#const.Skills">skill</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Awards" class="abs"></a>Awards[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Spells" class="abs"></a>Spells[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.UsedBlackPotions" class="abs"></a>UsedBlackPotions[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Items" class="abs"></a><a href="#structs.Item">Items</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Inventory" class="abs"></a>Inventory[]
</td><td class="def-right">
 (<b class="def-param">Items</b> index) for main item cell, <span class="def-nbsp"> </span>-(1 + main <b class="def-param">Inventory</b> cell index) for other cells
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Resistances" class="abs"></a><a href="#structs.BaseBonus">Resistances</a>[<a href="#const.Damage">kind</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.FireResistanceBase" class="abs"></a>FireResistanceBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.AirResistanceBase" class="abs"></a>AirResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.WaterResistanceBase" class="abs"></a>WaterResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.EarthResistanceBase" class="abs"></a>EarthResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SpiritResistanceBase" class="abs"></a>SpiritResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.MindResistanceBase" class="abs"></a>MindResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.BodyResistanceBase" class="abs"></a>BodyResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.FireResistanceBonus" class="abs"></a>FireResistanceBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.AirResistanceBonus" class="abs"></a>AirResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.WaterResistanceBonus" class="abs"></a>WaterResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.EarthResistanceBonus" class="abs"></a>EarthResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SpiritResistanceBonus" class="abs"></a>SpiritResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.MindResistanceBonus" class="abs"></a>MindResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.BodyResistanceBonus" class="abs"></a>BodyResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Voice" class="abs"></a>Voice
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ColdResistanceBase" class="abs"></a>ColdResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ColdResistanceBonus" class="abs"></a>ColdResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ElecResistanceBase" class="abs"></a>ElecResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ElecResistanceBonus" class="abs"></a>ElecResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.PoisonResistanceBase" class="abs"></a>PoisonResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.PoisonResistanceBonus" class="abs"></a>PoisonResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.MagicResistanceBase" class="abs"></a>MagicResistanceBase
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.MagicResistanceBonus" class="abs"></a>MagicResistanceBonus
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SpellBuffs" class="abs"></a><a href="#structs.SpellBuff">SpellBuffs</a>[<a href="#const.PlayerBuff">buff</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.RecoveryDelay" class="abs"></a>RecoveryDelay
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SkillPoints" class="abs"></a>SkillPoints
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.HP" class="abs"></a>HP
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.HitPoints" class="abs"></a>HitPoints
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SP" class="abs"></a>SP
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SpellPoints" class="abs"></a>SpellPoints
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.BirthYear" class="abs"></a>BirthYear
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.EquippedItems" class="abs"></a>EquippedItems[<a href="#const.ItemSlot">slot</a>]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemExtraHand" class="abs"></a>ItemExtraHand
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemMainHand" class="abs"></a>ItemMainHand
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemBow" class="abs"></a>ItemBow
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemArmor" class="abs"></a>ItemArmor
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemHelm" class="abs"></a>ItemHelm
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemBelt" class="abs"></a>ItemBelt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemCloak" class="abs"></a>ItemCloak
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemGountlets" class="abs"></a>ItemGountlets
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemBoots" class="abs"></a>ItemBoots
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemAmulet" class="abs"></a>ItemAmulet
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemRing1" class="abs"></a>ItemRing1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemRing2" class="abs"></a>ItemRing2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemRing3" class="abs"></a>ItemRing3
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemRing4" class="abs"></a>ItemRing4
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemRing5" class="abs"></a>ItemRing5
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ItemRing6" class="abs"></a>ItemRing6
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SpellBookPage" class="abs"></a>SpellBookPage
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.QuickSpell" class="abs"></a>QuickSpell
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.PlayerBits" class="abs"></a>PlayerBits[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.RosterBitIndex" class="abs"></a>RosterBitIndex
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.MeleeAttackBonus" class="abs"></a>MeleeAttackBonus
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.MeleeDamageBonus" class="abs"></a>MeleeDamageBonus
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.RangedAttackBonus" class="abs"></a>RangedAttackBonus
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.RangedDamageBonus" class="abs"></a>RangedDamageBonus
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.FullHPBonus" class="abs"></a>FullHPBonus
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.FullHitPointsBonus" class="abs"></a>FullHitPointsBonus
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.FullSPBonus" class="abs"></a>FullSPBonus
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.FullSpellPointsBonus" class="abs"></a>FullSpellPointsBonus
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Expression" class="abs"></a>Expression
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ExpressionTimePassed" class="abs"></a>ExpressionTimePassed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ExpressionLength" class="abs"></a>ExpressionLength
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Beacons" class="abs"></a><a href="#structs.LloydBeaconSlot">Beacons</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.DevineInterventionCasts" class="abs"></a>DevineInterventionCasts
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ArmageddonCasts" class="abs"></a>ArmageddonCasts
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.FireSpikeCasts" class="abs"></a>FireSpikeCasts
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.Player.GetSex" class="abs"></a>GetSex <span class="def-nbsp"> </span><b>(</b> BasedOnVoice = false <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  Determines sex based on Face or Voice
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseMight" class="abs"></a>GetBaseMight <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseIntellect" class="abs"></a>GetBaseIntellect <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBasePersonality" class="abs"></a>GetBasePersonality <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseEndurance" class="abs"></a>GetBaseEndurance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseAccuracy" class="abs"></a>GetBaseAccuracy <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseSpeed" class="abs"></a>GetBaseSpeed <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseLuck" class="abs"></a>GetBaseLuck <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseLevel" class="abs"></a>GetBaseLevel <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetLevel" class="abs"></a>GetLevel <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetMight" class="abs"></a>GetMight <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetIntellect" class="abs"></a>GetIntellect <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetPersonality" class="abs"></a>GetPersonality <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetEndurance" class="abs"></a>GetEndurance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetAccuracy" class="abs"></a>GetAccuracy <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetSpeed" class="abs"></a>GetSpeed <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetLuck" class="abs"></a>GetLuck <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetMeleeAttack" class="abs"></a>GetMeleeAttack <span class="def-nbsp"> </span><b>(</b> IgnoreExtraHand <span class="def-ver">[MM7+]</span> = false <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.CalcMeleeDamage" class="abs"></a>CalcMeleeDamage <span class="def-nbsp"> </span><b>(</b> JustWeaponDamage = false, IgnoreExtraHand = false, MonsterId = -1 <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetRangedAttack" class="abs"></a>GetRangedAttack <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.CalcRangedDamage" class="abs"></a>CalcRangedDamage <span class="def-nbsp"> </span><b>(</b> MonsterId = -1 <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetMeleeDamageRangeText" class="abs"></a>GetMeleeDamageRangeText <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetRangedDamageRangeText" class="abs"></a>GetRangedDamageRangeText <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.CanTrain" class="abs"></a>CanTrain <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.AddHP" class="abs"></a>AddHP <span class="def-nbsp"> </span><b>(</b> Amount <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.DoDamage" class="abs"></a>DoDamage <span class="def-nbsp"> </span><b>(</b> Damage, <a href="#const.Damage">DamageKind</a> = const.Damage.Phys <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.DoBadThing" class="abs"></a>DoBadThing <span class="def-nbsp"> </span><b>(</b> <a href="#const.MonsterBonus">Thing</a> <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetAttackDelay" class="abs"></a>GetAttackDelay <span class="def-nbsp"> </span><b>(</b> Shoot = false <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetFullHP" class="abs"></a>GetFullHP <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetFullSP" class="abs"></a>GetFullSP <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetMeleeDamageMin" class="abs"></a>GetMeleeDamageMin <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetMeleeDamageMax" class="abs"></a>GetMeleeDamageMax <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetRangedDamageMin" class="abs"></a>GetRangedDamageMin <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetRangedDamageMax" class="abs"></a>GetRangedDamageMax <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.HasItemBonus" class="abs"></a>HasItemBonus <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.WearsItem" class="abs"></a>WearsItem <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseResistance" class="abs"></a>GetBaseResistance <span class="def-nbsp"> </span><b>(</b> arg1 <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetResistance" class="abs"></a>GetResistance <span class="def-nbsp"> </span><b>(</b> arg1 <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseFireResistance" class="abs"></a>GetBaseFireResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseElectricityResistance" class="abs"></a>GetBaseElectricityResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseColdResistance" class="abs"></a>GetBaseColdResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBasePoisonResistance" class="abs"></a>GetBasePoisonResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseMagicResistance" class="abs"></a>GetBaseMagicResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetFireResistance" class="abs"></a>GetFireResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetElectricityResistance" class="abs"></a>GetElectricityResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetColdResistance" class="abs"></a>GetColdResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetPoisonResistance" class="abs"></a>GetPoisonResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetMagicResistance" class="abs"></a>GetMagicResistance <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseArmorClass" class="abs"></a>GetBaseArmorClass <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetArmorClass" class="abs"></a>GetArmorClass <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetBaseAge" class="abs"></a>GetBaseAge <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetAge" class="abs"></a>GetAge <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.Recover" class="abs"></a>Recover <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.SetRecoveryDelay" class="abs"></a>SetRecoveryDelay <span class="def-nbsp"> </span><b>(</b> Delay <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetMainCondition" class="abs"></a><a href="#const.Condition">GetMainCondition</a> <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.CalcStatBonusByItems" class="abs"></a>CalcStatBonusByItems <span class="def-nbsp"> </span><b>(</b> <a href="#const.Stats">Stat</a>, IgnoreExtraHand <span class="def-ver">[MM7+]</span> = false <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.CalcStatBonusByMagic" class="abs"></a>CalcStatBonusByMagic <span class="def-nbsp"> </span><b>(</b> <a href="#const.Stats">Stat</a> <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.CalcStatBonusBySkills" class="abs"></a>CalcStatBonusBySkills <span class="def-nbsp"> </span><b>(</b> <a href="#const.Stats">Stat</a> <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetMerchantTotalSkill" class="abs"></a>GetMerchantTotalSkill <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetDisarmTrapTotalSkill" class="abs"></a>GetDisarmTrapTotalSkill <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ShowFaceExpression" class="abs"></a>ShowFaceExpression <span class="def-nbsp"> </span><b>(</b> Expression, Time = 0 <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetSkill" class="abs"></a>GetSkill <span class="def-nbsp"> </span><b>(</b> arg1 <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.ShowFaceAnimation" class="abs"></a>ShowFaceAnimation <span class="def-nbsp"> </span><b>(</b> Animation <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetPerceptionTotalSkill" class="abs"></a>GetPerceptionTotalSkill <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetLearningTotalSkill" class="abs"></a>GetLearningTotalSkill <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetRace" class="abs"></a>GetRace <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.GetDiplomacyTotalSkill" class="abs"></a>GetDiplomacyTotalSkill <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.EnumActiveItems" class="abs"></a>EnumActiveItems <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Player.CountItems" class="abs"></a>CountItems <span class="def-nbsp"> </span><b>(</b> {item1, item2, ...} <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.SFT"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SFT</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SFT.MatchIndex" class="abs"></a>MatchIndex
</td><td class="def-right">
 used when searching for a group by name
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFT.Frames" class="abs"></a><a href="#structs.SFTItem">Frames</a>[]
</td><td class="def-right">
<b class="def-default">(Default)</b> 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFT.Groups" class="abs"></a><a href="#structs.SFTItem">Groups</a>[][]
</td><td class="def-right">
 sorted by name
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFT.GroupIndex" class="abs"></a>GroupIndex[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SFT.FindGroup" class="abs"></a>FindGroup <span class="def-nbsp"> </span><b>(</b> arg1 = "" <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFT.LoadGroup" class="abs"></a>LoadGroup <span class="def-nbsp"> </span><b>(</b> arg1 <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.SFTItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SFTItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SFTItem.GroupName" class="abs"></a>GroupName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.SpriteName" class="abs"></a>SpriteName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.SpriteIndex" class="abs"></a>SpriteIndex[]
</td><td class="def-right">
 loaded from sprite list at runtime, chosen based on sprite orientation
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Scale" class="abs"></a>Scale
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.NotGroupEnd" class="abs"></a>NotGroupEnd
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Luminous" class="abs"></a>Luminous
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.GroupStart" class="abs"></a>GroupStart
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Image1" class="abs"></a>Image1
</td><td class="def-right">
 has 1 image (not 8 for different angles)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Center" class="abs"></a>Center
</td><td class="def-right">
 center sprite
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Fidget" class="abs"></a>Fidget
</td><td class="def-right">
 part of monster figet sequence
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Loaded" class="abs"></a>Loaded
</td><td class="def-right">
 group is loaded
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Mirror0" class="abs"></a>Mirror0
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Mirror1" class="abs"></a>Mirror1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Mirror2" class="abs"></a>Mirror2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Mirror3" class="abs"></a>Mirror3
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Mirror4" class="abs"></a>Mirror4
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Mirror5" class="abs"></a>Mirror5
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Mirror6" class="abs"></a>Mirror6
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Mirror7" class="abs"></a>Mirror7
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Images3" class="abs"></a>Images3
</td><td class="def-right">
 only views 0,2,4 exist (mirrored)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Glow" class="abs"></a>Glow
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Transparent" class="abs"></a>Transparent
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.LightRadius" class="abs"></a>LightRadius
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.PaletteId" class="abs"></a>PaletteId
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.PaletteIndex" class="abs"></a>PaletteIndex
</td><td class="def-right">
 palette index (0 if not loaded)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.Time" class="abs"></a>Time
</td><td class="def-right">
 time for this frame in 1/32 of a second
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SFTItem.TotalTime" class="abs"></a>TotalTime
</td><td class="def-right">
 total time for this group
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.SoundsItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SoundsItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SoundsItem.Name" class="abs"></a>Name
</td><td class="def-right">
 name of sound file
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SoundsItem.Id" class="abs"></a>Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SoundsItem.Type" class="abs"></a>Type
</td><td class="def-right">
 type of sound<br>0 = (0) <span class="def-nbsp">     </span>level specific sound, load during level initialization<br>1 = (system) system sound, always loaded<br>2 = (swap) <span class="def-nbsp">  </span>level specific sound, that gets loaded and flushed<br>3 = (?)<br>4 = (lock) <span class="def-nbsp">  </span>delete sound only when game ends
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SoundsItem.Locked" class="abs"></a>Locked
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SoundsItem.Is3D" class="abs"></a>Is3D
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SoundsItem.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SoundsItem.Data" class="abs"></a>Data[]
</td><td class="def-right">
 data pointer
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SoundsItem.Data3D" class="abs"></a>Data3D
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  3d data pointer
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SoundsItem.Decompressed" class="abs"></a>Decompressed
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  true if decompressed and needs to be freed separately
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.SpawnPoint"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SpawnPoint</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SpawnPoint.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpawnPoint.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpawnPoint.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpawnPoint.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpawnPoint.Radius" class="abs"></a>Radius
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpawnPoint.Kind" class="abs"></a><a href="#const.ObjectRefKind">Kind</a>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpawnPoint.Index" class="abs"></a>Index
</td><td class="def-right">
 Index: monster (1-3: M1-M3, <span class="def-nbsp"> </span>4-6: M1a-M1c, <span class="def-nbsp"> </span>7-9: M2a-M2c, <span class="def-nbsp"> </span>10-12: M3a-M3c) or item (1-6)
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpawnPoint.OnAlertMap" class="abs"></a>OnAlertMap
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpawnPoint.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpawnPoint.Group" class="abs"></a>Group
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.SpcItemsTxtItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SpcItemsTxtItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.NameAdd" class="abs"></a>NameAdd
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.BonusStat" class="abs"></a>BonusStat
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.ChanceForSlot" class="abs"></a>ChanceForSlot[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.W1" class="abs"></a>W1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.W2" class="abs"></a>W2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Miss" class="abs"></a>Miss
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Arm" class="abs"></a>Arm
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Shld" class="abs"></a>Shld
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Helm" class="abs"></a>Helm
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Belt" class="abs"></a>Belt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Cape" class="abs"></a>Cape
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Gaunt" class="abs"></a>Gaunt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Boot" class="abs"></a>Boot
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Ring" class="abs"></a>Ring
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Amul" class="abs"></a>Amul
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Value" class="abs"></a>Value
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpcItemsTxtItem.Lvl" class="abs"></a>Lvl
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.SpellBuff"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SpellBuff</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SpellBuff.ExpireTime" class="abs"></a>ExpireTime
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellBuff.Power" class="abs"></a>Power
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellBuff.Skill" class="abs"></a>Skill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellBuff.OverlayId" class="abs"></a>OverlayId
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellBuff.Caster" class="abs"></a>Caster
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellBuff.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.SpellEffect"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SpellEffect</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
</tbody>
</table>
<br>

<br><a name="structs.SpellInfo"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SpellInfo</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SpellInfo.CastByMonster" class="abs"></a>CastByMonster
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.CastByEvent" class="abs"></a>CastByEvent
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.CauseDamage" class="abs"></a>CauseDamage
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.SpecialDamage" class="abs"></a>SpecialDamage
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.Bits" class="abs"></a>Bits
</td><td class="def-right">
 "Stats" from spells.txt
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.SpellPoints" class="abs"></a>SpellPoints[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.SpellPointsNormal" class="abs"></a>SpellPointsNormal
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.SpellPointsExpert" class="abs"></a>SpellPointsExpert
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.SpellPointsMaster" class="abs"></a>SpellPointsMaster
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.SpellPointsGM" class="abs"></a>SpellPointsGM
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.Delay" class="abs"></a>Delay[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.DelayNormal" class="abs"></a>DelayNormal
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.DelayExpert" class="abs"></a>DelayExpert
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.DelayMaster" class="abs"></a>DelayMaster
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.DelayGM" class="abs"></a>DelayGM
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.DamageAdd" class="abs"></a>DamageAdd
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellInfo.DamageDiceSides" class="abs"></a>DamageDiceSides
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.SpellsTxtItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SpellsTxtItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.ShortName" class="abs"></a>ShortName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.Description" class="abs"></a>Description
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.Normal" class="abs"></a>Normal
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.Expert" class="abs"></a>Expert
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.Master" class="abs"></a>Master
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.GM" class="abs"></a>GM
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.GrandMaster" class="abs"></a>GrandMaster
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.DamageType" class="abs"></a>DamageType
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.SpellPoints" class="abs"></a>SpellPoints[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.SpellPointsNormal" class="abs"></a>SpellPointsNormal
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.SpellPointsExpert" class="abs"></a>SpellPointsExpert
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.SpellPointsMaster" class="abs"></a>SpellPointsMaster
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpellsTxtItem.SpellPointsGM" class="abs"></a>SpellPointsGM
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.SpritesLod"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.SpritesLod</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SpritesLod.File" class="abs"></a>File
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.FileName" class="abs"></a>FileName
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.Loaded" class="abs"></a>Loaded
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.IOBuffer" class="abs"></a>IOBuffer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.IOBufferSize" class="abs"></a>IOBufferSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.LodHeaderSignature" class="abs"></a>LodHeaderSignature
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.Description" class="abs"></a>Description
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.ArchivesCount" class="abs"></a>ArchivesCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.ArchivesCArray" class="abs"></a>ArchivesCArray
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.Type" class="abs"></a>Type
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.ChapterHandle" class="abs"></a>ChapterHandle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.ChapterSize" class="abs"></a>ChapterSize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.Files" class="abs"></a><a href="#structs.LodFile">Files</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.FilesOffset" class="abs"></a>FilesOffset
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.SpritesSW" class="abs"></a><a href="#structs.LodSprite">SpritesSW</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.IsHardware" class="abs"></a>IsHardware
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.SpritesLod.SpritesD3D" class="abs"></a><a href="#structs.LodSpriteD3D">SpritesD3D</a>[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Methods:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.SpritesLod.LoadSprite" class="abs"></a>LoadSprite <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.StartStat"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.StartStat</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.StartStat.Base" class="abs"></a>Base
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StartStat.Max" class="abs"></a>Max
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StartStat.Spend" class="abs"></a>Spend
</td><td class="def-right">
 how much you spend on it to add a point
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StartStat.Add" class="abs"></a>Add
</td><td class="def-right">
 how much is added when you spend a point
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.StdItemsTxtItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.StdItemsTxtItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.NameAdd" class="abs"></a>NameAdd
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.BonusStat" class="abs"></a>BonusStat
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.ChanceForSlot" class="abs"></a>ChanceForSlot[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.Arm" class="abs"></a>Arm
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.Shld" class="abs"></a>Shld
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.Helm" class="abs"></a>Helm
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.Belt" class="abs"></a>Belt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.Cape" class="abs"></a>Cape
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.Gaunt" class="abs"></a>Gaunt
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.Boot" class="abs"></a>Boot
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.Ring" class="abs"></a>Ring
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.StdItemsTxtItem.Amul" class="abs"></a>Amul
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.TFTItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.TFTItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.TFTItem.Name" class="abs"></a>Name
</td><td class="def-right">
 texture name
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TFTItem.Index" class="abs"></a>Index
</td><td class="def-right">
 index in bitmaps.lod
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TFTItem.Time" class="abs"></a>Time
</td><td class="def-right">
 time for this frame in 1/32 of a second
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TFTItem.TotalTime" class="abs"></a>TotalTime
</td><td class="def-right">
 total time for this group
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TFTItem.NotGroupEnd" class="abs"></a>NotGroupEnd
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TFTItem.GroupStart" class="abs"></a>GroupStart
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TFTItem.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.TileItem"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.TileItem</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.TileItem.Name" class="abs"></a>Name
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Id" class="abs"></a>Id
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Bitmap" class="abs"></a>Bitmap
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.TileSet" class="abs"></a>TileSet
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Section" class="abs"></a>Section
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Burn" class="abs"></a>Burn
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Water" class="abs"></a>Water
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Block" class="abs"></a>Block
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Repulse" class="abs"></a>Repulse
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Flat" class="abs"></a>Flat
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Wave" class="abs"></a>Wave
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.NoDraw" class="abs"></a>NoDraw
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.WaterTransition" class="abs"></a>WaterTransition
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Transition" class="abs"></a>Transition
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.ScrollDown" class="abs"></a>ScrollDown
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.ScrollUp" class="abs"></a>ScrollUp
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.ScrollLeft" class="abs"></a>ScrollLeft
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.ScrollRight" class="abs"></a>ScrollRight
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TileItem.Bits" class="abs"></a>Bits
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.TilesetDef"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.TilesetDef</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.TilesetDef.Group" class="abs"></a>Group
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TilesetDef.Offset" class="abs"></a>Offset
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.TownPortalTownInfo"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.TownPortalTownInfo</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.TownPortalTownInfo.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TownPortalTownInfo.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TownPortalTownInfo.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TownPortalTownInfo.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TownPortalTownInfo.Direction" class="abs"></a>Direction
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TownPortalTownInfo.LookAngle" class="abs"></a>LookAngle
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TownPortalTownInfo.MapStatsIndex" class="abs"></a>MapStatsIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TownPortalTownInfo.MapIndex" class="abs"></a>MapIndex
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TownPortalTownInfo.Map" class="abs"></a>Map
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.TravelInfo"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.TravelInfo</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.TravelInfo.MapIndex" class="abs"></a>MapIndex
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.DaysAvailable" class="abs"></a>DaysAvailable[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Monday" class="abs"></a>Monday
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Tuesday" class="abs"></a>Tuesday
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Wednesday" class="abs"></a>Wednesday
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Thursday" class="abs"></a>Thursday
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Friday" class="abs"></a>Friday
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Saturday" class="abs"></a>Saturday
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Sunday" class="abs"></a>Sunday
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.DaysCount" class="abs"></a>DaysCount
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Pos" class="abs"></a>Pos[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.X" class="abs"></a>X
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Y" class="abs"></a>Y
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Z" class="abs"></a>Z
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Direction" class="abs"></a>Direction
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.QBit" class="abs"></a>QBit
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.TravelInfo.Map" class="abs"></a>Map
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="structs.Weather"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>structs.Weather</h3>
 
&nbsp;<i class="def-ib">Fields:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.Weather.Snow" class="abs"></a>Snow
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Weather.Shade" class="abs"></a>Shade
</td><td class="def-right">
 0 = sunny, 1 = dark, 2 = misty
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Weather.Fog" class="abs"></a>Fog
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Weather.FogRange1" class="abs"></a>FogRange1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Weather.FogRange2" class="abs"></a>FogRange2
</td><td class="def-right">
 
</td>
</tr><tr>
<td colspan="2" class="def-functions"><br>
  &nbsp;<i class="def-ib">Functions:</i>
</td>
</tr>
<tr>
<td class="def-left">
<a name="structs.Weather.SetFog" class="abs"></a>SetFog <span class="def-nbsp"> </span><b>(</b> Range1, Range2 <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Weather.RandomFog" class="abs"></a>RandomFog <span class="def-nbsp"> </span><b>(</b> LightChance, MiddleChance, ThickChance <b>)</b>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="structs.Weather.New" class="abs"></a>New <span class="def-nbsp"> </span><b>(</b>  <b>)</b>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>


<br>
<hr>
<a name="Constants"></a><h2>Constants</h2>


<br><a name="const"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.*</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Novice" class="abs"></a>Novice <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Expert" class="abs"></a>Expert <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Master" class="abs"></a>Master <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.GM" class="abs"></a>GM <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Minute" class="abs"></a>Minute <i class="def-const">= 256</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Hour" class="abs"></a>Hour <i class="def-const">= 15360</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Day" class="abs"></a>Day <i class="def-const">= 368640</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Week" class="abs"></a>Week <i class="def-const">= 2580480</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Month" class="abs"></a>Month <i class="def-const">= 10321920</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Year" class="abs"></a>Year <i class="def-const">= 123863040</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterImmune" class="abs"></a>MonsterImmune
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MapLimit" class="abs"></a>MapLimit <i class="def-const">= 22528</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.AIState"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.AIState</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.AIState.Stand" class="abs"></a>Stand <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Active" class="abs"></a>Active <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.MeleeAttack" class="abs"></a>MeleeAttack <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.RangedAttack" class="abs"></a>RangedAttack <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Dying" class="abs"></a>Dying <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Dead" class="abs"></a>Dead <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Pursue" class="abs"></a>Pursue <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Flee" class="abs"></a>Flee <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Stunned" class="abs"></a>Stunned <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Fidget" class="abs"></a>Fidget <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Interact" class="abs"></a>Interact <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Removed" class="abs"></a>Removed <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.RangedAttack2" class="abs"></a>RangedAttack2 <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.CastSpell" class="abs"></a>CastSpell <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Stoned" class="abs"></a>Stoned <i class="def-const">= 14</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Paralyzed" class="abs"></a>Paralyzed <i class="def-const">= 15</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Resurrect" class="abs"></a>Resurrect <i class="def-const">= 16</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Summoned" class="abs"></a>Summoned <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.RangedAttack4" class="abs"></a>RangedAttack4 <i class="def-const">= 18</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.AIState.Invisible" class="abs"></a>Invisible <i class="def-const">= 19</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.ChestBits"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.ChestBits</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.ChestBits.Trapped" class="abs"></a>Trapped <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ChestBits.ItemsPlaced" class="abs"></a>ItemsPlaced <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ChestBits.Identified" class="abs"></a>Identified <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.Class"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.Class</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Class.Necromancer" class="abs"></a>Necromancer <i class="def-const">= 0</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Knight" class="abs"></a>Knight
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Cavalier" class="abs"></a>Cavalier <i class="def-const">= 1</i>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Champion" class="abs"></a>Champion
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.BlackKnight" class="abs"></a>BlackKnight <i class="def-const">= 3</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Thief" class="abs"></a>Thief <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Rogue" class="abs"></a>Rogue <i class="def-const">= 5</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Spy" class="abs"></a>Spy <i class="def-const">= 6</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Assassin" class="abs"></a>Assassin <i class="def-const">= 7</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Monk" class="abs"></a>Monk <i class="def-const">= 8</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Initiate" class="abs"></a>Initiate <i class="def-const">= 9</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Master" class="abs"></a>Master <i class="def-const">= 10</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Ninja" class="abs"></a>Ninja <i class="def-const">= 11</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Cleric" class="abs"></a>Cleric
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Priest" class="abs"></a>Priest
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.HighPriest" class="abs"></a>HighPriest <i class="def-const">= 5</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Sorcerer" class="abs"></a>Sorcerer
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Wizard" class="abs"></a>Wizard
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.ArchMage" class="abs"></a>ArchMage
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Paladin" class="abs"></a>Paladin
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Crusader" class="abs"></a>Crusader
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Hero" class="abs"></a>Hero
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Villain" class="abs"></a>Villain <i class="def-const">= 15</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Archer" class="abs"></a>Archer
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.BattleMage" class="abs"></a>BattleMage <i class="def-const">= 13</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.WarriorMage" class="abs"></a>WarriorMage
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.MasterArcher" class="abs"></a>MasterArcher <i class="def-const">= 18</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Sniper" class="abs"></a>Sniper <i class="def-const">= 19</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Ranger" class="abs"></a>Ranger <i class="def-const">= 20</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Hunter" class="abs"></a>Hunter <i class="def-const">= 21</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.RangerLord" class="abs"></a>RangerLord <i class="def-const">= 22</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.BountyHunter" class="abs"></a>BountyHunter <i class="def-const">= 23</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.PriestLight" class="abs"></a>PriestLight
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.PriestDark" class="abs"></a>PriestDark <i class="def-const">= 27</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Druid" class="abs"></a>Druid
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.GreatDruid" class="abs"></a>GreatDruid
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.ArchDruid" class="abs"></a>ArchDruid
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Warlock" class="abs"></a>Warlock <i class="def-const">= 31</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Lich" class="abs"></a>Lich
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Troll" class="abs"></a>Troll <i class="def-const">= 6</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.WarTroll" class="abs"></a>WarTroll <i class="def-const">= 7</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Minotaur" class="abs"></a>Minotaur <i class="def-const">= 8</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.MinotaurLord" class="abs"></a>MinotaurLord <i class="def-const">= 9</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.DarkElf" class="abs"></a>DarkElf <i class="def-const">= 10</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Patriarch" class="abs"></a>Patriarch <i class="def-const">= 11</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Vampire" class="abs"></a>Vampire <i class="def-const">= 12</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Nosferatu" class="abs"></a>Nosferatu <i class="def-const">= 13</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.Dragon" class="abs"></a>Dragon <i class="def-const">= 14</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Class.GreatWyrm" class="abs"></a>GreatWyrm <i class="def-const">= 15</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.Condition"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.Condition</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Condition.Cursed" class="abs"></a>Cursed <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Weak" class="abs"></a>Weak <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Asleep" class="abs"></a>Asleep <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Afraid" class="abs"></a>Afraid <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Drunk" class="abs"></a>Drunk <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Insane" class="abs"></a>Insane <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Poison1" class="abs"></a>Poison1 <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Disease1" class="abs"></a>Disease1 <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Poison2" class="abs"></a>Poison2 <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Disease2" class="abs"></a>Disease2 <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Poison3" class="abs"></a>Poison3 <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Disease3" class="abs"></a>Disease3 <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Paralyzed" class="abs"></a>Paralyzed <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Unconscious" class="abs"></a>Unconscious <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Dead" class="abs"></a>Dead <i class="def-const">= 14</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Stoned" class="abs"></a>Stoned <i class="def-const">= 15</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Eradicated" class="abs"></a>Eradicated <i class="def-const">= 16</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Condition.Zombie" class="abs"></a>Zombie <i class="def-const">= 17</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.Damage"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.Damage</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Damage.Phys" class="abs"></a>Phys
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Magic" class="abs"></a>Magic
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Fire" class="abs"></a>Fire
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Air" class="abs"></a>Air <i class="def-const">= 1</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Water" class="abs"></a>Water <i class="def-const">= 2</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Earth" class="abs"></a>Earth <i class="def-const">= 3</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Spirit" class="abs"></a>Spirit <i class="def-const">= 6</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Mind" class="abs"></a>Mind <i class="def-const">= 7</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Body" class="abs"></a>Body <i class="def-const">= 8</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Light" class="abs"></a>Light <i class="def-const">= 9</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Dark" class="abs"></a>Dark <i class="def-const">= 10</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Dragon" class="abs"></a>Dragon <i class="def-const">= 50</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Elec" class="abs"></a>Elec <i class="def-const">= 3</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Cold" class="abs"></a>Cold <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Poison" class="abs"></a>Poison <i class="def-const">= 5</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Damage.Energy" class="abs"></a>Energy <i class="def-const">= 6</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.FaceAnimation"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.FaceAnimation</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.FaceAnimation.KillSmallEnemy" class="abs"></a>KillSmallEnemy <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.KillBigEnemy" class="abs"></a>KillBigEnemy <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.StoreClosed" class="abs"></a>StoreClosed <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.DisarmTrap" class="abs"></a>DisarmTrap <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.TrapWillBlow" class="abs"></a>TrapWillBlow <i class="def-const">= 5</i>
</td><td class="def-right">
 it's gonna blow!
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.AvoidTrapDamage" class="abs"></a>AvoidTrapDamage <i class="def-const">= 6</i>
</td><td class="def-right">
 sit down
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.IdentifyUseless" class="abs"></a>IdentifyUseless <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.IdentifyGreat" class="abs"></a>IdentifyGreat <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.IdentifyFail" class="abs"></a>IdentifyFail <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.RepairItem" class="abs"></a>RepairItem <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.RepairFail" class="abs"></a>RepairFail <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.SetQuickSpell" class="abs"></a>SetQuickSpell <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.CantRestHere" class="abs"></a>CantRestHere <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.SmileRandom" class="abs"></a>SmileRandom <i class="def-const">= 14</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.CantCarry" class="abs"></a>CantCarry <i class="def-const">= 15</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.MixPotion" class="abs"></a>MixPotion <i class="def-const">= 16</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.PotionExplode" class="abs"></a>PotionExplode <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.DoorLocked" class="abs"></a>DoorLocked <i class="def-const">= 18</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Strain" class="abs"></a>Strain <i class="def-const">= 19</i>
</td><td class="def-right">
 like pulling sword out of stone in MM6
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.CantLearnSpell" class="abs"></a>CantLearnSpell <i class="def-const">= 20</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.LearnSpell" class="abs"></a>LearnSpell <i class="def-const">= 21</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Hello" class="abs"></a>Hello <i class="def-const">= 22</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.HelloNight" class="abs"></a>HelloNight <i class="def-const">= 23</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Damaged" class="abs"></a>Damaged <i class="def-const">= 24</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Weak" class="abs"></a>Weak <i class="def-const">= 25</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Afraid" class="abs"></a>Afraid <i class="def-const">= 26</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Poisoned" class="abs"></a>Poisoned <i class="def-const">= 27</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Deseased" class="abs"></a>Deseased <i class="def-const">= 28</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Insane" class="abs"></a>Insane <i class="def-const">= 29</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Cursed" class="abs"></a>Cursed <i class="def-const">= 30</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Drunk" class="abs"></a>Drunk <i class="def-const">= 31</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Unconsious" class="abs"></a>Unconsious <i class="def-const">= 32</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Death" class="abs"></a>Death <i class="def-const">= 33</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Stoned" class="abs"></a>Stoned <i class="def-const">= 34</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Eradicated" class="abs"></a>Eradicated <i class="def-const">= 35</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Smile" class="abs"></a>Smile <i class="def-const">= 36</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ReadScoll" class="abs"></a>ReadScoll <i class="def-const">= 37</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.NotEnoughGold" class="abs"></a>NotEnoughGold <i class="def-const">= 38</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.CantEquip" class="abs"></a>CantEquip <i class="def-const">= 39</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ItemBrokenStolen" class="abs"></a>ItemBrokenStolen <i class="def-const">= 40</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.SPDrained" class="abs"></a>SPDrained <i class="def-const">= 41</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Aged" class="abs"></a>Aged <i class="def-const">= 42</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.SpellFailed" class="abs"></a>SpellFailed <i class="def-const">= 43</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.DamagedParty" class="abs"></a>DamagedParty <i class="def-const">= 44</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Tired" class="abs"></a>Tired <i class="def-const">= 45</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.EnterDungeon" class="abs"></a>EnterDungeon <i class="def-const">= 46</i>
</td><td class="def-right">
 come on let's go in
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.LeaveDungeon" class="abs"></a>LeaveDungeon <i class="def-const">= 47</i>
</td><td class="def-right">
 let's get out of here
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.AlmostDead" class="abs"></a>AlmostDead <i class="def-const">= 48</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.CastSpell" class="abs"></a>CastSpell <i class="def-const">= 49</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Shoot" class="abs"></a>Shoot <i class="def-const">= 50</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.AttackHit" class="abs"></a>AttackHit <i class="def-const">= 51</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.AttackMiss" class="abs"></a>AttackMiss <i class="def-const">= 52</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Beg" class="abs"></a>Beg <i class="def-const">= 53</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.BegFail" class="abs"></a>BegFail <i class="def-const">= 54</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ThreatFail" class="abs"></a>ThreatFail <i class="def-const">= 56</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.SmileHuge" class="abs"></a>SmileHuge <i class="def-const">= 57</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.BribeFail" class="abs"></a>BribeFail <i class="def-const">= 58</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.NPCDontTalk" class="abs"></a>NPCDontTalk <i class="def-const">= 59</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.SmileRandom2" class="abs"></a>SmileRandom2 <i class="def-const">= 60</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.LookUp" class="abs"></a>LookUp <i class="def-const">= 63</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.LookDown" class="abs"></a>LookDown <i class="def-const">= 64</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Yell" class="abs"></a>Yell <i class="def-const">= 65</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Falling" class="abs"></a>Falling <i class="def-const">= 66</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ShakeHeadNo" class="abs"></a>ShakeHeadNo <i class="def-const">= 67</i>
</td><td class="def-right">
 shakes head
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.TavernGotDrunk" class="abs"></a>TavernGotDrunk <i class="def-const">= 69</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.TavernTip" class="abs"></a>TavernTip <i class="def-const">= 70</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ShakeHeadYes" class="abs"></a>ShakeHeadYes <i class="def-const">= 71</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ShopIdentify" class="abs"></a>ShopIdentify <i class="def-const">= 73</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ShopRepair" class="abs"></a>ShopRepair <i class="def-const">= 74</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ShopAlreadyIdentified" class="abs"></a>ShopAlreadyIdentified <i class="def-const">= 76</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ShopWrongShop" class="abs"></a>ShopWrongShop <i class="def-const">= 79</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ShopRude" class="abs"></a>ShopRude <i class="def-const">= 80</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.BankDeposit" class="abs"></a>BankDeposit <i class="def-const">= 81</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.SmileBig" class="abs"></a>SmileBig <i class="def-const">= 82</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.TempleDonate" class="abs"></a>TempleDonate <i class="def-const">= 83</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.HelloHouse" class="abs"></a>HelloHouse <i class="def-const">= 84</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.AfraidSilent" class="abs"></a>AfraidSilent <i class="def-const">= 98</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.InPrison" class="abs"></a>InPrison <i class="def-const">= 100</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.ChooseMe" class="abs"></a>ChooseMe <i class="def-const">= 102</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Awaken" class="abs"></a>Awaken <i class="def-const">= 103</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.IdMonsterWeak" class="abs"></a>IdMonsterWeak <i class="def-const">= 104</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.IdMonsterBig" class="abs"></a>IdMonsterBig <i class="def-const">= 105</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.IdMonsterFail" class="abs"></a>IdMonsterFail <i class="def-const">= 106</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.LastManStanding" class="abs"></a>LastManStanding <i class="def-const">= 107</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FaceAnimation.Hungry" class="abs"></a>Hungry <i class="def-const">= 108</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.FacetBits"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.FacetBits</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.FacetBits.IsPortal" class="abs"></a>IsPortal <i class="def-const">= 0x1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.IsSecret" class="abs"></a>IsSecret <i class="def-const">= 0x2</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  show in red with Perception
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.ScrollDown" class="abs"></a>ScrollDown <i class="def-const">= 0x4</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.AlignTop" class="abs"></a>AlignTop <i class="def-const">= 0x8</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.IsWater" class="abs"></a>IsWater <i class="def-const">= 0x10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.ScrollUp" class="abs"></a>ScrollUp <i class="def-const">= 0x20</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.ScrollLeft" class="abs"></a>ScrollLeft <i class="def-const">= 0x40</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.ScrollRight" class="abs"></a>ScrollRight <i class="def-const">= 0x800</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  moving texture
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.AlignLeft" class="abs"></a>AlignLeft <i class="def-const">= 0x1000</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.Invisible" class="abs"></a>Invisible <i class="def-const">= 0x2000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.AnimatedTFT" class="abs"></a>AnimatedTFT <i class="def-const">= 0x4000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.AlignRight" class="abs"></a>AlignRight <i class="def-const">= 0x8000</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.AlignBottom" class="abs"></a>AlignBottom <i class="def-const">= 0x20000</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  align door texture in D3D
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.MoveByDoor" class="abs"></a>MoveByDoor <i class="def-const">= 0x40000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.IsEventJustHint" class="abs"></a>IsEventJustHint <i class="def-const">= 0x100000</i>
</td><td class="def-right">
 <span class="def-ver">[MM7+]</span>
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.AlternativeSound" class="abs"></a>AlternativeSound <i class="def-const">= 0x200000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.IsSky" class="abs"></a>IsSky <i class="def-const">= 0x400000</i>
</td><td class="def-right">
 outdoor in software mode: horizontal flow
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.FlipU" class="abs"></a>FlipU <i class="def-const">= 0x800000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.FlipV" class="abs"></a>FlipV <i class="def-const">= 0x1000000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.TriggerByClick" class="abs"></a>TriggerByClick <i class="def-const">= 0x2000000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.TriggerByStep" class="abs"></a>TriggerByStep <i class="def-const">= 0x4000000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.DisableEventByCtrlClick" class="abs"></a>DisableEventByCtrlClick <i class="def-const">= 0x8000000</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  indoor only: click event gets disabled by Ctrl+Click
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.EventDisabledByCtrlClick" class="abs"></a>EventDisabledByCtrlClick <i class="def-const">= 0x10000000</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.TriggerByMonster" class="abs"></a>TriggerByMonster <i class="def-const">= 0x8000000</i>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  happens even if there's no event assigned
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.TriggerByObject" class="abs"></a>TriggerByObject <i class="def-const">= 0x10000000</i>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  happens even if there's no event assigned
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.Untouchable" class="abs"></a>Untouchable <i class="def-const">= 0x20000000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.IsLava" class="abs"></a>IsLava <i class="def-const">= 0x40000000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.FacetBits.HasData" class="abs"></a>HasData <i class="def-const">= 0x80000000</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.GameActions"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.GameActions</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.GameActions.Exit" class="abs"></a>Exit <i class="def-const">= 113</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.HouseType"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.HouseType</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.HouseType.Weapon Shop" class="abs"></a>Weapon Shop <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Armor Shop" class="abs"></a>Armor Shop <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Magic Shop" class="abs"></a>Magic Shop <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Alchemist" class="abs"></a>Alchemist <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.General Store" class="abs"></a>General Store <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Fire Guild" class="abs"></a>Fire Guild <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Air Guild" class="abs"></a>Air Guild <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Water Guild" class="abs"></a>Water Guild <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Earth Guild" class="abs"></a>Earth Guild <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Spirit Guild" class="abs"></a>Spirit Guild <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Mind Guild" class="abs"></a>Mind Guild <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Body Guild" class="abs"></a>Body Guild <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Light Guild" class="abs"></a>Light Guild <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Dark Guild" class="abs"></a>Dark Guild <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Elemental Guild" class="abs"></a>Elemental Guild <i class="def-const">= 14</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Element Guild" class="abs"></a>Element Guild <i class="def-const">= 14</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Self Guild" class="abs"></a>Self Guild <i class="def-const">= 15</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Thieves Guild" class="abs"></a>Thieves Guild <i class="def-const">= 17</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Merc Guild" class="abs"></a>Merc Guild <i class="def-const">= 18</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Town Hall" class="abs"></a>Town Hall
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Throne" class="abs"></a>Throne <i class="def-const">= 20</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Tavern" class="abs"></a>Tavern <i class="def-const">= 21</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Bank" class="abs"></a>Bank <i class="def-const">= 22</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Temple" class="abs"></a>Temple <i class="def-const">= 23</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Castle Entrance" class="abs"></a>Castle Entrance <i class="def-const">= 24</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Dungeon Ent" class="abs"></a>Dungeon Ent <i class="def-const">= 25</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Seer" class="abs"></a>Seer <i class="def-const">= 26</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Stables" class="abs"></a>Stables <i class="def-const">= 27</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Boats" class="abs"></a>Boats <i class="def-const">= 28</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.House" class="abs"></a>House <i class="def-const">= 29</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Training" class="abs"></a>Training <i class="def-const">= 30</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Jail" class="abs"></a>Jail <i class="def-const">= 31</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.Circus" class="abs"></a>Circus <i class="def-const">= 32</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.HouseType.The Adventurer's Inn" class="abs"></a>The Adventurer's Inn <i class="def-const">= 35</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.ItemSlot"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.ItemSlot</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.ItemSlot.ExtraHand" class="abs"></a>ExtraHand <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.MainHand" class="abs"></a>MainHand <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Bow" class="abs"></a>Bow <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Armor" class="abs"></a>Armor <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Helm" class="abs"></a>Helm <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Belt" class="abs"></a>Belt <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Cloak" class="abs"></a>Cloak <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Gountlets" class="abs"></a>Gountlets <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Boots" class="abs"></a>Boots <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Amulet" class="abs"></a>Amulet <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Ring1" class="abs"></a>Ring1 <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Ring2" class="abs"></a>Ring2 <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Ring3" class="abs"></a>Ring3 <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Ring4" class="abs"></a>Ring4 <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Ring5" class="abs"></a>Ring5 <i class="def-const">= 14</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemSlot.Ring6" class="abs"></a>Ring6 <i class="def-const">= 15</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.ItemType"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.ItemType</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.ItemType.Any" class="abs"></a>Any <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Weapon" class="abs"></a>Weapon <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Weapon2H" class="abs"></a>Weapon2H <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Missile" class="abs"></a>Missile <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Armor" class="abs"></a>Armor <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Shield" class="abs"></a>Shield <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Helm" class="abs"></a>Helm <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Belt" class="abs"></a>Belt <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Cloak" class="abs"></a>Cloak <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Gountlets" class="abs"></a>Gountlets <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Boots" class="abs"></a>Boots <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Ring" class="abs"></a>Ring <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Amulet" class="abs"></a>Amulet <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Wand" class="abs"></a>Wand <i class="def-const">= 13</i>
</td><td class="def-right">
 weaponw
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Scroll" class="abs"></a>Scroll <i class="def-const">= 16</i>
</td><td class="def-right">
 sscroll
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Book" class="abs"></a>Book <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.MScroll" class="abs"></a>MScroll <i class="def-const">= 18</i>
</td><td class="def-right">
 always creates item 001
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Weapon_" class="abs"></a>Weapon_ <i class="def-const">= 20</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Armor_" class="abs"></a>Armor_ <i class="def-const">= 21</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Misc" class="abs"></a>Misc <i class="def-const">= 22</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Sword" class="abs"></a>Sword <i class="def-const">= 23</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Dagger" class="abs"></a>Dagger <i class="def-const">= 24</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Axe" class="abs"></a>Axe <i class="def-const">= 25</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Spear" class="abs"></a>Spear <i class="def-const">= 26</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Bow" class="abs"></a>Bow <i class="def-const">= 27</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Mace" class="abs"></a>Mace <i class="def-const">= 28</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Club" class="abs"></a>Club <i class="def-const">= 29</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Staff" class="abs"></a>Staff <i class="def-const">= 30</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Leather" class="abs"></a>Leather <i class="def-const">= 31</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Chain" class="abs"></a>Chain <i class="def-const">= 32</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Plate" class="abs"></a>Plate <i class="def-const">= 33</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Shield_" class="abs"></a>Shield_ <i class="def-const">= 34</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Helm_" class="abs"></a>Helm_ <i class="def-const">= 35</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Belt_" class="abs"></a>Belt_ <i class="def-const">= 36</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Cloak_" class="abs"></a>Cloak_ <i class="def-const">= 37</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Gountlets_" class="abs"></a>Gountlets_ <i class="def-const">= 38</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Boots_" class="abs"></a>Boots_ <i class="def-const">= 39</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Ring_" class="abs"></a>Ring_ <i class="def-const">= 40</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Amulet_" class="abs"></a>Amulet_ <i class="def-const">= 41</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Wand_" class="abs"></a>Wand_ <i class="def-const">= 42</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Scroll_" class="abs"></a>Scroll_ <i class="def-const">= 43</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Potion" class="abs"></a>Potion <i class="def-const">= 44</i>
</td><td class="def-right">
 bottle
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Reagent" class="abs"></a>Reagent <i class="def-const">= 45</i>
</td><td class="def-right">
 herb
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Gems" class="abs"></a>Gems <i class="def-const">= 46</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Gems2" class="abs"></a>Gems2 <i class="def-const">= 47</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ItemType.Gold" class="abs"></a>Gold <i class="def-const">= 50</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.Keys"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.Keys</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Keys.LBUTTON" class="abs"></a>LBUTTON <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.RBUTTON" class="abs"></a>RBUTTON <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.CANCEL" class="abs"></a>CANCEL <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.MBUTTON" class="abs"></a>MBUTTON <i class="def-const">= 4</i>
</td><td class="def-right">
 NOT contiguous with L &amp; RBUTTON
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.XBUTTON1" class="abs"></a>XBUTTON1 <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.XBUTTON2" class="abs"></a>XBUTTON2 <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.BACK" class="abs"></a>BACK <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.BACKSPACE" class="abs"></a>BACKSPACE <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.TAB" class="abs"></a>TAB <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.CLEAR" class="abs"></a>CLEAR <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.RETURN" class="abs"></a>RETURN <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.SHIFT" class="abs"></a>SHIFT <i class="def-const">= 16</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.CONTROL" class="abs"></a>CONTROL <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.CTRL" class="abs"></a>CTRL <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.ALT" class="abs"></a>ALT <i class="def-const">= 18</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.MENU" class="abs"></a>MENU <i class="def-const">= 18</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.PAUSE" class="abs"></a>PAUSE <i class="def-const">= 19</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.CAPITAL" class="abs"></a>CAPITAL <i class="def-const">= 20</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.CAPSLOCK" class="abs"></a>CAPSLOCK <i class="def-const">= 20</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.HANGUL" class="abs"></a>HANGUL <i class="def-const">= 21</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.KANA" class="abs"></a>KANA <i class="def-const">= 21</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.JUNJA" class="abs"></a>JUNJA <i class="def-const">= 23</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.FINAL" class="abs"></a>FINAL <i class="def-const">= 24</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.HANJA" class="abs"></a>HANJA <i class="def-const">= 25</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.KANJI" class="abs"></a>KANJI <i class="def-const">= 25</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.ESCAPE" class="abs"></a>ESCAPE <i class="def-const">= 27</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.CONVERT" class="abs"></a>CONVERT <i class="def-const">= 28</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NONCONVERT" class="abs"></a>NONCONVERT <i class="def-const">= 29</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.ACCEPT" class="abs"></a>ACCEPT <i class="def-const">= 30</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.MODECHANGE" class="abs"></a>MODECHANGE <i class="def-const">= 31</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.SPACE" class="abs"></a>SPACE <i class="def-const">= 32</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.PGUP" class="abs"></a>PGUP <i class="def-const">= 33</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.PRIOR" class="abs"></a>PRIOR <i class="def-const">= 33</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NEXT" class="abs"></a>NEXT <i class="def-const">= 34</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.PGDN" class="abs"></a>PGDN <i class="def-const">= 34</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.END" class="abs"></a>END <i class="def-const">= 35</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.HOME" class="abs"></a>HOME <i class="def-const">= 36</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.LEFT" class="abs"></a>LEFT <i class="def-const">= 37</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.UP" class="abs"></a>UP <i class="def-const">= 38</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.RIGHT" class="abs"></a>RIGHT <i class="def-const">= 39</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.DOWN" class="abs"></a>DOWN <i class="def-const">= 40</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.SELECT" class="abs"></a>SELECT <i class="def-const">= 41</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.PRINT" class="abs"></a>PRINT <i class="def-const">= 42</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.EXECUTE" class="abs"></a>EXECUTE <i class="def-const">= 43</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.SNAPSHOT" class="abs"></a>SNAPSHOT <i class="def-const">= 44</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.INSERT" class="abs"></a>INSERT <i class="def-const">= 45</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.DELETE" class="abs"></a>DELETE <i class="def-const">= 46</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.HELP" class="abs"></a>HELP <i class="def-const">= 47</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.0" class="abs"></a>0 <i class="def-const">= 48</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.1" class="abs"></a>1 <i class="def-const">= 49</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.2" class="abs"></a>2 <i class="def-const">= 50</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.3" class="abs"></a>3 <i class="def-const">= 51</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.4" class="abs"></a>4 <i class="def-const">= 52</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.5" class="abs"></a>5 <i class="def-const">= 53</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.6" class="abs"></a>6 <i class="def-const">= 54</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.7" class="abs"></a>7 <i class="def-const">= 55</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.8" class="abs"></a>8 <i class="def-const">= 56</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.9" class="abs"></a>9 <i class="def-const">= 57</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.A" class="abs"></a>A <i class="def-const">= 65</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.B" class="abs"></a>B <i class="def-const">= 66</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.C" class="abs"></a>C <i class="def-const">= 67</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.D" class="abs"></a>D <i class="def-const">= 68</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.E" class="abs"></a>E <i class="def-const">= 69</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F" class="abs"></a>F <i class="def-const">= 70</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.G" class="abs"></a>G <i class="def-const">= 71</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.H" class="abs"></a>H <i class="def-const">= 72</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.I" class="abs"></a>I <i class="def-const">= 73</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.J" class="abs"></a>J <i class="def-const">= 74</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.K" class="abs"></a>K <i class="def-const">= 75</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.L" class="abs"></a>L <i class="def-const">= 76</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.M" class="abs"></a>M <i class="def-const">= 77</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.N" class="abs"></a>N <i class="def-const">= 78</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.O" class="abs"></a>O <i class="def-const">= 79</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.P" class="abs"></a>P <i class="def-const">= 80</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.Q" class="abs"></a>Q <i class="def-const">= 81</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.R" class="abs"></a>R <i class="def-const">= 82</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.S" class="abs"></a>S <i class="def-const">= 83</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.T" class="abs"></a>T <i class="def-const">= 84</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.U" class="abs"></a>U <i class="def-const">= 85</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.V" class="abs"></a>V <i class="def-const">= 86</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.W" class="abs"></a>W <i class="def-const">= 87</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.X" class="abs"></a>X <i class="def-const">= 88</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.Y" class="abs"></a>Y <i class="def-const">= 89</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.Z" class="abs"></a>Z <i class="def-const">= 90</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.LWIN" class="abs"></a>LWIN <i class="def-const">= 91</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.RWIN" class="abs"></a>RWIN <i class="def-const">= 92</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.APPS" class="abs"></a>APPS <i class="def-const">= 93</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.SLEEP" class="abs"></a>SLEEP <i class="def-const">= 95</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD0" class="abs"></a>NUMPAD0 <i class="def-const">= 96</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD1" class="abs"></a>NUMPAD1 <i class="def-const">= 97</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD2" class="abs"></a>NUMPAD2 <i class="def-const">= 98</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD3" class="abs"></a>NUMPAD3 <i class="def-const">= 99</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD4" class="abs"></a>NUMPAD4 <i class="def-const">= 100</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD5" class="abs"></a>NUMPAD5 <i class="def-const">= 101</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD6" class="abs"></a>NUMPAD6 <i class="def-const">= 102</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD7" class="abs"></a>NUMPAD7 <i class="def-const">= 103</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD8" class="abs"></a>NUMPAD8 <i class="def-const">= 104</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMPAD9" class="abs"></a>NUMPAD9 <i class="def-const">= 105</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.MULTIPLY" class="abs"></a>MULTIPLY <i class="def-const">= 106</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.ADD" class="abs"></a>ADD <i class="def-const">= 107</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.SEPARATOR" class="abs"></a>SEPARATOR <i class="def-const">= 108</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.SUBTRACT" class="abs"></a>SUBTRACT <i class="def-const">= 109</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.DECIMAL" class="abs"></a>DECIMAL <i class="def-const">= 110</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.DIVIDE" class="abs"></a>DIVIDE <i class="def-const">= 111</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F1" class="abs"></a>F1 <i class="def-const">= 112</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F2" class="abs"></a>F2 <i class="def-const">= 113</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F3" class="abs"></a>F3 <i class="def-const">= 114</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F4" class="abs"></a>F4 <i class="def-const">= 115</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F5" class="abs"></a>F5 <i class="def-const">= 116</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F6" class="abs"></a>F6 <i class="def-const">= 117</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F7" class="abs"></a>F7 <i class="def-const">= 118</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F8" class="abs"></a>F8 <i class="def-const">= 119</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F9" class="abs"></a>F9 <i class="def-const">= 120</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F10" class="abs"></a>F10 <i class="def-const">= 121</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F11" class="abs"></a>F11 <i class="def-const">= 122</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F12" class="abs"></a>F12 <i class="def-const">= 123</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F13" class="abs"></a>F13 <i class="def-const">= 124</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F14" class="abs"></a>F14 <i class="def-const">= 125</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F15" class="abs"></a>F15 <i class="def-const">= 126</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F16" class="abs"></a>F16 <i class="def-const">= 127</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F17" class="abs"></a>F17 <i class="def-const">= 128</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F18" class="abs"></a>F18 <i class="def-const">= 129</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F19" class="abs"></a>F19 <i class="def-const">= 130</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F20" class="abs"></a>F20 <i class="def-const">= 131</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F21" class="abs"></a>F21 <i class="def-const">= 132</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F22" class="abs"></a>F22 <i class="def-const">= 133</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F23" class="abs"></a>F23 <i class="def-const">= 134</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.F24" class="abs"></a>F24 <i class="def-const">= 135</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NUMLOCK" class="abs"></a>NUMLOCK <i class="def-const">= 144</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.SCROLL" class="abs"></a>SCROLL <i class="def-const">= 145</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.LSHIFT" class="abs"></a>LSHIFT <i class="def-const">= 160</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.RSHIFT" class="abs"></a>RSHIFT <i class="def-const">= 161</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.LCONTROL" class="abs"></a>LCONTROL <i class="def-const">= 162</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.RCONTROL" class="abs"></a>RCONTROL <i class="def-const">= 163</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.LMENU" class="abs"></a>LMENU <i class="def-const">= 164</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.RMENU" class="abs"></a>RMENU <i class="def-const">= 165</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.BROWSER_BACK" class="abs"></a>BROWSER_BACK <i class="def-const">= 166</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.BROWSER_FORWARD" class="abs"></a>BROWSER_FORWARD <i class="def-const">= 167</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.BROWSER_REFRESH" class="abs"></a>BROWSER_REFRESH <i class="def-const">= 168</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.BROWSER_STOP" class="abs"></a>BROWSER_STOP <i class="def-const">= 169</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.BROWSER_SEARCH" class="abs"></a>BROWSER_SEARCH <i class="def-const">= 170</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.BROWSER_FAVORITES" class="abs"></a>BROWSER_FAVORITES <i class="def-const">= 171</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.BROWSER_HOME" class="abs"></a>BROWSER_HOME <i class="def-const">= 172</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.VOLUME_MUTE" class="abs"></a>VOLUME_MUTE <i class="def-const">= 173</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.VOLUME_DOWN" class="abs"></a>VOLUME_DOWN <i class="def-const">= 174</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.VOLUME_UP" class="abs"></a>VOLUME_UP <i class="def-const">= 175</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.MEDIA_NEXT_TRACK" class="abs"></a>MEDIA_NEXT_TRACK <i class="def-const">= 176</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.MEDIA_PREV_TRACK" class="abs"></a>MEDIA_PREV_TRACK <i class="def-const">= 177</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.MEDIA_STOP" class="abs"></a>MEDIA_STOP <i class="def-const">= 178</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.MEDIA_PLAY_PAUSE" class="abs"></a>MEDIA_PLAY_PAUSE <i class="def-const">= 179</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.LAUNCH_MAIL" class="abs"></a>LAUNCH_MAIL <i class="def-const">= 180</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.LAUNCH_MEDIA_SELECT" class="abs"></a>LAUNCH_MEDIA_SELECT <i class="def-const">= 181</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.LAUNCH_APP1" class="abs"></a>LAUNCH_APP1 <i class="def-const">= 182</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.LAUNCH_APP2" class="abs"></a>LAUNCH_APP2 <i class="def-const">= 183</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_1" class="abs"></a>OEM_1 <i class="def-const">= 186</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_PLUS" class="abs"></a>OEM_PLUS <i class="def-const">= 187</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_COMMA" class="abs"></a>OEM_COMMA <i class="def-const">= 188</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_MINUS" class="abs"></a>OEM_MINUS <i class="def-const">= 189</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_PERIOD" class="abs"></a>OEM_PERIOD <i class="def-const">= 190</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_2" class="abs"></a>OEM_2 <i class="def-const">= 191</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_3" class="abs"></a>OEM_3 <i class="def-const">= 192</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_4" class="abs"></a>OEM_4 <i class="def-const">= 219</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_5" class="abs"></a>OEM_5 <i class="def-const">= 220</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_6" class="abs"></a>OEM_6 <i class="def-const">= 221</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_7" class="abs"></a>OEM_7 <i class="def-const">= 222</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_8" class="abs"></a>OEM_8 <i class="def-const">= 223</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_102" class="abs"></a>OEM_102 <i class="def-const">= 226</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.PROCESSKEY" class="abs"></a>PROCESSKEY <i class="def-const">= 229</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.PACKET" class="abs"></a>PACKET <i class="def-const">= 231</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.ATTN" class="abs"></a>ATTN <i class="def-const">= 246</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.CRSEL" class="abs"></a>CRSEL <i class="def-const">= 247</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.EXSEL" class="abs"></a>EXSEL <i class="def-const">= 248</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.EREOF" class="abs"></a>EREOF <i class="def-const">= 249</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.PLAY" class="abs"></a>PLAY <i class="def-const">= 250</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.ZOOM" class="abs"></a>ZOOM <i class="def-const">= 251</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.NONAME" class="abs"></a>NONAME <i class="def-const">= 252</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.PA1" class="abs"></a>PA1 <i class="def-const">= 253</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Keys.OEM_CLEAR" class="abs"></a>OEM_CLEAR <i class="def-const">= 254</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.MonsterBits"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.MonsterBits</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.MonsterBits.Active" class="abs"></a>Active <i class="def-const">= 0x400</i>
</td><td class="def-right">
 ?inside the active radius?
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBits.ShowOnMap" class="abs"></a>ShowOnMap <i class="def-const">= 0x8000</i>
</td><td class="def-right">
 monster was once seen by party
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBits.Invisible" class="abs"></a>Invisible <i class="def-const">= 0x10000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBits.NoFlee" class="abs"></a>NoFlee <i class="def-const">= 0x20000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBits.Hostile" class="abs"></a>Hostile <i class="def-const">= 0x80000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBits.OnAlertMap" class="abs"></a>OnAlertMap <i class="def-const">= 0x100000</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBits.TreasureGenerated" class="abs"></a>TreasureGenerated <i class="def-const">= 0x800000</i>
</td><td class="def-right">
 treasure is in <b class="def-param">Items</b>[0] and <b class="def-param">Items</b>[1], gold is in <b class="def-param">Items</b>[3]
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBits.ShowAsHostile" class="abs"></a>ShowAsHostile <i class="def-const">= 0x1000000</i>
</td><td class="def-right">
 show as hostile on map
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBits.IsObeliskChest" class="abs"></a>IsObeliskChest <i class="def-const">= 0x2000000</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.MonsterBonus"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.MonsterBonus</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.MonsterBonus.Curse" class="abs"></a>Curse <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Weak" class="abs"></a>Weak <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Asleep" class="abs"></a>Asleep <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Drunk" class="abs"></a>Drunk <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Insane" class="abs"></a>Insane <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Poison1" class="abs"></a>Poison1 <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Poison2" class="abs"></a>Poison2 <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Poison3" class="abs"></a>Poison3 <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Disease1" class="abs"></a>Disease1 <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Disease2" class="abs"></a>Disease2 <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Disease3" class="abs"></a>Disease3 <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Paralyze" class="abs"></a>Paralyze <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Uncon" class="abs"></a>Uncon <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Dead" class="abs"></a>Dead <i class="def-const">= 14</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Stone" class="abs"></a>Stone <i class="def-const">= 15</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Errad" class="abs"></a>Errad <i class="def-const">= 16</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Brkitem" class="abs"></a>Brkitem <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Brkarmor" class="abs"></a>Brkarmor <i class="def-const">= 18</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Brkweapon" class="abs"></a>Brkweapon <i class="def-const">= 19</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Steal" class="abs"></a>Steal <i class="def-const">= 20</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Age" class="abs"></a>Age <i class="def-const">= 21</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Drainsp" class="abs"></a>Drainsp <i class="def-const">= 22</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBonus.Afraid" class="abs"></a>Afraid <i class="def-const">= 23</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.MonsterBuff"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.MonsterBuff</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.MonsterBuff.Null" class="abs"></a>Null <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Charm" class="abs"></a>Charm <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Summoned" class="abs"></a>Summoned <i class="def-const">= 2</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Curse" class="abs"></a>Curse <i class="def-const">= 2</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.ShrinkingRay" class="abs"></a>ShrinkingRay <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Fear" class="abs"></a>Fear <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Stoned" class="abs"></a>Stoned <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Paralyze" class="abs"></a>Paralyze <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Slow" class="abs"></a>Slow <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.ArmorHalved" class="abs"></a>ArmorHalved
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Berserk" class="abs"></a>Berserk
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.MassDistortion" class="abs"></a>MassDistortion
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Fate" class="abs"></a>Fate
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Enslave" class="abs"></a>Enslave
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.DayOfProtection" class="abs"></a>DayOfProtection
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.HourOfPower" class="abs"></a>HourOfPower
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Shield" class="abs"></a>Shield
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.StoneSkin" class="abs"></a>StoneSkin
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Bless" class="abs"></a>Bless
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Heroism" class="abs"></a>Heroism
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Haste" class="abs"></a>Haste
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.PainReflection" class="abs"></a>PainReflection
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Hammerhands" class="abs"></a>Hammerhands
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.MeleeOnly" class="abs"></a>MeleeOnly <i class="def-const">= 22</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  (part of Blind and Dark Grasp)
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.DamageHalved" class="abs"></a>DamageHalved <i class="def-const">= 23</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Wander" class="abs"></a>Wander <i class="def-const">= 24</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  monster wanders aimlessly (part of Blind)
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Mistform" class="abs"></a>Mistform <i class="def-const">= 25</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterBuff.Feeblemind" class="abs"></a>Feeblemind <i class="def-const">= 8</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.MonsterKind"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.MonsterKind</h3>
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.MonsterKind.Undead" class="abs"></a>Undead <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.Demon" class="abs"></a>Demon <i class="def-const">= 2</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.Dragon" class="abs"></a>Dragon
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.Elf" class="abs"></a>Elf <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.Swimmer" class="abs"></a>Swimmer
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.Immobile" class="abs"></a>Immobile
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.Peasant" class="abs"></a>Peasant <i class="def-const">= 5</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.Titan" class="abs"></a>Titan <i class="def-const">= 7</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.NoArena" class="abs"></a>NoArena
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.Ogre" class="abs"></a>Ogre <i class="def-const">= 7</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterKind.Elemental" class="abs"></a>Elemental <i class="def-const">= 8</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.MonsterPref"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.MonsterPref</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.MonsterPref.Necro" class="abs"></a>Necro <i class="def-const">= 0x1</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Knight" class="abs"></a>Knight
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Paladin" class="abs"></a>Paladin <i class="def-const">= 0x2</i>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Archer" class="abs"></a>Archer <i class="def-const">= 0x4</i>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Druid" class="abs"></a>Druid <i class="def-const">= 0x8</i>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Cleric" class="abs"></a>Cleric
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Troll" class="abs"></a>Troll <i class="def-const">= 0x8</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Minotaur" class="abs"></a>Minotaur <i class="def-const">= 0x10</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.DarkElf" class="abs"></a>DarkElf <i class="def-const">= 0x20</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Vampire" class="abs"></a>Vampire <i class="def-const">= 0x40</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Dragon" class="abs"></a>Dragon <i class="def-const">= 0x80</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Sorcerer" class="abs"></a>Sorcerer <i class="def-const">= 0x20</i>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Ranger" class="abs"></a>Ranger <i class="def-const">= 0x40</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Thief" class="abs"></a>Thief <i class="def-const">= 0x80</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Monk" class="abs"></a>Monk <i class="def-const">= 0x100</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Male" class="abs"></a>Male
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Female" class="abs"></a>Female
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Human" class="abs"></a>Human <i class="def-const">= 0x800</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Elf" class="abs"></a>Elf <i class="def-const">= 0x1000</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Dwarf" class="abs"></a>Dwarf <i class="def-const">= 0x2000</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.MonsterPref.Goblin" class="abs"></a>Goblin <i class="def-const">= 0x4000</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.NPCProfession"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.NPCProfession</h3>
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.NPCProfession.Smith" class="abs"></a>Smith <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Armorer" class="abs"></a>Armorer <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Alchemist" class="abs"></a>Alchemist <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Scholar" class="abs"></a>Scholar <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Guide" class="abs"></a>Guide <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Tracker" class="abs"></a>Tracker <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Pathfinder" class="abs"></a>Pathfinder <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Sailor" class="abs"></a>Sailor <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Navigator" class="abs"></a>Navigator <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Healer" class="abs"></a>Healer <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.ExpertHealer" class="abs"></a>ExpertHealer <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.MasterHealer" class="abs"></a>MasterHealer <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Teacher" class="abs"></a>Teacher <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Instructor" class="abs"></a>Instructor <i class="def-const">= 14</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.ArmsMaster" class="abs"></a>ArmsMaster <i class="def-const">= 15</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.WeaponsMaster" class="abs"></a>WeaponsMaster <i class="def-const">= 16</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Apprentice" class="abs"></a>Apprentice <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Mystic" class="abs"></a>Mystic <i class="def-const">= 18</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.SpellMaster" class="abs"></a>SpellMaster <i class="def-const">= 19</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Trader" class="abs"></a>Trader <i class="def-const">= 20</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Merchant" class="abs"></a>Merchant <i class="def-const">= 21</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Scout" class="abs"></a>Scout <i class="def-const">= 22</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Herbalist" class="abs"></a>Herbalist <i class="def-const">= 23</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Apothecary" class="abs"></a>Apothecary <i class="def-const">= 24</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Counselor" class="abs"></a>Counselor <i class="def-const">= 23</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Barrister" class="abs"></a>Barrister <i class="def-const">= 24</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Tinker" class="abs"></a>Tinker <i class="def-const">= 25</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Locksmith" class="abs"></a>Locksmith <i class="def-const">= 26</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Fool" class="abs"></a>Fool <i class="def-const">= 27</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.ChimneySweep" class="abs"></a>ChimneySweep <i class="def-const">= 28</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Porter" class="abs"></a>Porter <i class="def-const">= 29</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.QuarterMaster" class="abs"></a>QuarterMaster <i class="def-const">= 30</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Factor" class="abs"></a>Factor <i class="def-const">= 31</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Banker" class="abs"></a>Banker <i class="def-const">= 32</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Cook" class="abs"></a>Cook <i class="def-const">= 33</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Chef" class="abs"></a>Chef <i class="def-const">= 34</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Horseman" class="abs"></a>Horseman <i class="def-const">= 35</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Bard" class="abs"></a>Bard <i class="def-const">= 36</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Enchanter" class="abs"></a>Enchanter <i class="def-const">= 37</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Cartographer" class="abs"></a>Cartographer <i class="def-const">= 38</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.WindMaster" class="abs"></a>WindMaster <i class="def-const">= 39</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.WaterMaster" class="abs"></a>WaterMaster <i class="def-const">= 40</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.GateMaster" class="abs"></a>GateMaster <i class="def-const">= 41</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Chaplain" class="abs"></a>Chaplain <i class="def-const">= 42</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Acolyte" class="abs"></a>Acolyte
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Piper" class="abs"></a>Piper <i class="def-const">= 43</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Explorer" class="abs"></a>Explorer <i class="def-const">= 44</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Pirate" class="abs"></a>Pirate <i class="def-const">= 45</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Squire" class="abs"></a>Squire <i class="def-const">= 46</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Psychic" class="abs"></a>Psychic <i class="def-const">= 47</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Gypsy" class="abs"></a>Gypsy <i class="def-const">= 48</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Diplomat" class="abs"></a>Diplomat <i class="def-const">= 49</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Negotiator" class="abs"></a>Negotiator <i class="def-const">= 49</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Duper" class="abs"></a>Duper <i class="def-const">= 50</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Burglar" class="abs"></a>Burglar <i class="def-const">= 51</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.FallenWizard" class="abs"></a>FallenWizard <i class="def-const">= 52</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Initiate" class="abs"></a>Initiate <i class="def-const">= 54</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Prelate" class="abs"></a>Prelate <i class="def-const">= 55</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Monk" class="abs"></a>Monk <i class="def-const">= 56</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Sage" class="abs"></a>Sage <i class="def-const">= 57</i>
</td><td class="def-right">
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Peasant" class="abs"></a>Peasant <i class="def-const">= 52</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Serf" class="abs"></a>Serf <i class="def-const">= 53</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Tailor" class="abs"></a>Tailor <i class="def-const">= 54</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Laborer" class="abs"></a>Laborer <i class="def-const">= 55</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Farmer" class="abs"></a>Farmer <i class="def-const">= 56</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Cooper" class="abs"></a>Cooper <i class="def-const">= 57</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Potter" class="abs"></a>Potter <i class="def-const">= 58</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Weaver" class="abs"></a>Weaver <i class="def-const">= 59</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Cobbler" class="abs"></a>Cobbler <i class="def-const">= 60</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.DitchDigger" class="abs"></a>DitchDigger <i class="def-const">= 61</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Miller" class="abs"></a>Miller <i class="def-const">= 62</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Carpenter" class="abs"></a>Carpenter <i class="def-const">= 63</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.StoneCutter" class="abs"></a>StoneCutter <i class="def-const">= 64</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Jester" class="abs"></a>Jester <i class="def-const">= 65</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Trapper" class="abs"></a>Trapper <i class="def-const">= 66</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Beggar" class="abs"></a>Beggar <i class="def-const">= 67</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Rustler" class="abs"></a>Rustler <i class="def-const">= 68</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Hunter" class="abs"></a>Hunter
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Scribe" class="abs"></a>Scribe <i class="def-const">= 70</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Missionary" class="abs"></a>Missionary <i class="def-const">= 71</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Clerk" class="abs"></a>Clerk <i class="def-const">= 72</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Guard" class="abs"></a>Guard <i class="def-const">= 73</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.FollowerofBaa" class="abs"></a>FollowerofBaa <i class="def-const">= 74</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Noble" class="abs"></a>Noble <i class="def-const">= 75</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Gambler" class="abs"></a>Gambler <i class="def-const">= 76</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.NPCProfession.Child" class="abs"></a>Child <i class="def-const">= 77</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.ObjectRefKind"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.ObjectRefKind</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.ObjectRefKind.Nothing" class="abs"></a>Nothing <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ObjectRefKind.Door" class="abs"></a>Door <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ObjectRefKind.Object" class="abs"></a>Object <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ObjectRefKind.Monster" class="abs"></a>Monster <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ObjectRefKind.Party" class="abs"></a>Party <i class="def-const">= 4</i>
</td><td class="def-right">
 Index is player index (1-4 or 0 for whole party ???)
</td>
</tr><tr>
<td class="def-left">
<a name="const.ObjectRefKind.Sprite" class="abs"></a>Sprite <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.ObjectRefKind.Facet" class="abs"></a>Facet <i class="def-const">= 6</i>
</td><td class="def-right">
 outdoors Index = ModelId*64 + FaceId
</td>
</tr><tr>
<td class="def-left">
<a name="const.ObjectRefKind.Light" class="abs"></a>Light <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.PartyBuff"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.PartyBuff</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.PartyBuff.AirResistance" class="abs"></a>AirResistance <i class="def-const">= 0</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.BodyResistance" class="abs"></a>BodyResistance <i class="def-const">= 1</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.DayOfGods" class="abs"></a>DayOfGods <i class="def-const">= 2</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.DetectLife" class="abs"></a>DetectLife <i class="def-const">= 3</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.EarthResistance" class="abs"></a>EarthResistance <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.FireResistance" class="abs"></a>FireResistance
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.ColdResistance" class="abs"></a>ColdResistance <i class="def-const">= 1</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.ElecResistance" class="abs"></a>ElecResistance <i class="def-const">= 2</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.MagicResistance" class="abs"></a>MagicResistance <i class="def-const">= 3</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.PoisonResistance" class="abs"></a>PoisonResistance <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.FeatherFall" class="abs"></a>FeatherFall <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.WaterWalk" class="abs"></a>WaterWalk
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.Fly" class="abs"></a>Fly <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.Haste" class="abs"></a>Haste <i class="def-const">= 8</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.Heroism" class="abs"></a>Heroism <i class="def-const">= 9</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.Immolation" class="abs"></a>Immolation <i class="def-const">= 10</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.Invisibility" class="abs"></a>Invisibility <i class="def-const">= 11</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.MindResistance" class="abs"></a>MindResistance <i class="def-const">= 12</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.ProtectionFromMagic" class="abs"></a>ProtectionFromMagic <i class="def-const">= 13</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.Shield" class="abs"></a>Shield <i class="def-const">= 14</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.Stoneskin" class="abs"></a>Stoneskin <i class="def-const">= 15</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.GuardianAngel" class="abs"></a>GuardianAngel <i class="def-const">= 8</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.WizardEye" class="abs"></a>WizardEye
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.TorchLight" class="abs"></a>TorchLight
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PartyBuff.WaterResistance" class="abs"></a>WaterResistance <i class="def-const">= 17</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.PlayerBuff"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.PlayerBuff</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.PlayerBuff.AirResistance" class="abs"></a>AirResistance <i class="def-const">= 0</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Bless" class="abs"></a>Bless
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.BodyResistance" class="abs"></a>BodyResistance <i class="def-const">= 2</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.EarthResistance" class="abs"></a>EarthResistance <i class="def-const">= 3</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Fate" class="abs"></a>Fate <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.FireResistance" class="abs"></a>FireResistance <i class="def-const">= 5</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Hammerhands" class="abs"></a>Hammerhands <i class="def-const">= 6</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Heroism" class="abs"></a>Heroism
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Haste" class="abs"></a>Haste
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.MindResistance" class="abs"></a>MindResistance <i class="def-const">= 9</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.PainReflection" class="abs"></a>PainReflection <i class="def-const">= 10</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Preservation" class="abs"></a>Preservation <i class="def-const">= 11</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Regeneration" class="abs"></a>Regeneration <i class="def-const">= 12</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Shield" class="abs"></a>Shield
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Stoneskin" class="abs"></a>Stoneskin
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.TempLuck" class="abs"></a>TempLuck
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.TempIntellect" class="abs"></a>TempIntellect
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.TempPersonality" class="abs"></a>TempPersonality
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.TempAccuracy" class="abs"></a>TempAccuracy
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.TempEndurance" class="abs"></a>TempEndurance <i class="def-const">= 16</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.TempSpeed" class="abs"></a>TempSpeed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.TempMight" class="abs"></a>TempMight
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.WaterResistance" class="abs"></a>WaterResistance <i class="def-const">= 22</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.WaterBreathing" class="abs"></a>WaterBreathing <i class="def-const">= 23</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Glamour" class="abs"></a>Glamour <i class="def-const">= 24</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Levitate" class="abs"></a>Levitate <i class="def-const">= 25</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.Misform" class="abs"></a>Misform <i class="def-const">= 26</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.PlayerBuff.TempEndurancy" class="abs"></a>TempEndurancy <i class="def-const">= 11</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.Race"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.Race</h3>
<span class="def-ver">[MM7]</span><span class="def-nbsp"> </span>  <br><br>
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Race.Human" class="abs"></a>Human <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Race.Elf" class="abs"></a>Elf <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Race.Goblin" class="abs"></a>Goblin <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Race.Dwarf" class="abs"></a>Dwarf <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.Screens"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.Screens</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Screens.Game" class="abs"></a>Game <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.Manu" class="abs"></a>Manu <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.Controls" class="abs"></a>Controls <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.Info" class="abs"></a>Info <i class="def-const">= 3</i>
</td><td class="def-right">
 quests, map, autonotes
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.NPC" class="abs"></a>NPC <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.Rest" class="abs"></a>Rest <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.Query" class="abs"></a>Query <i class="def-const">= 6</i>
</td><td class="def-right">
 like with hotkeys in Chinese debug MM6
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.Inventory" class="abs"></a>Inventory <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.SpellBook" class="abs"></a>SpellBook <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.NewGameBreefing" class="abs"></a>NewGameBreefing <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.Chest" class="abs"></a>Chest <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.SaveGame" class="abs"></a>SaveGame <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.LoadGame" class="abs"></a>LoadGame <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.House" class="abs"></a>House <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.MainManu" class="abs"></a>MainManu <i class="def-const">= 16</i>
</td><td class="def-right">
 or movie
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.WalkToMap" class="abs"></a>WalkToMap <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.MapEntrance" class="abs"></a>MapEntrance <i class="def-const">= 18</i>
</td><td class="def-right">
 or <a href="#Question">Question</a> screen
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.SimpleMessage" class="abs"></a>SimpleMessage <i class="def-const">= 19</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.CreateParty" class="abs"></a>CreateParty <i class="def-const">= 21</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.EscMessage" class="abs"></a>EscMessage <i class="def-const">= 22</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.KeyConfig" class="abs"></a>KeyConfig <i class="def-const">= 26</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.VideoOptions" class="abs"></a>VideoOptions <i class="def-const">= 28</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Screens.QuickReference" class="abs"></a>QuickReference <i class="def-const">= 104</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.Season"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.Season</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Season.Automn" class="abs"></a>Automn <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Season.Summer" class="abs"></a>Summer <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Season.Fall" class="abs"></a>Fall <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Season.Winter" class="abs"></a>Winter <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.Skills"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.Skills</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Skills.Staff" class="abs"></a>Staff <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Sword" class="abs"></a>Sword <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Dagger" class="abs"></a>Dagger <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Axe" class="abs"></a>Axe <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Spear" class="abs"></a>Spear <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Bow" class="abs"></a>Bow <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Mace" class="abs"></a>Mace <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Blaster" class="abs"></a>Blaster <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Shield" class="abs"></a>Shield <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Leather" class="abs"></a>Leather <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Chain" class="abs"></a>Chain <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Plate" class="abs"></a>Plate <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Fire" class="abs"></a>Fire <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Air" class="abs"></a>Air <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Water" class="abs"></a>Water <i class="def-const">= 14</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Earth" class="abs"></a>Earth <i class="def-const">= 15</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Spirit" class="abs"></a>Spirit <i class="def-const">= 16</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Mind" class="abs"></a>Mind <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Body" class="abs"></a>Body <i class="def-const">= 18</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Light" class="abs"></a>Light <i class="def-const">= 19</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Dark" class="abs"></a>Dark <i class="def-const">= 20</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.DarkElfAbility" class="abs"></a>DarkElfAbility <i class="def-const">= 21</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.VampireAbility" class="abs"></a>VampireAbility <i class="def-const">= 22</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.DragonAbility" class="abs"></a>DragonAbility <i class="def-const">= 23</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.IdentifyItem" class="abs"></a>IdentifyItem
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Merchant" class="abs"></a>Merchant
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Repair" class="abs"></a>Repair
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Bodybuilding" class="abs"></a>Bodybuilding
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Meditation" class="abs"></a>Meditation
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Perception" class="abs"></a>Perception
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Regeneration" class="abs"></a>Regeneration <i class="def-const">= 30</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Diplomacy" class="abs"></a>Diplomacy <i class="def-const">= 27</i>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Thievery" class="abs"></a>Thievery <i class="def-const">= 28</i>
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.DisarmTraps" class="abs"></a>DisarmTraps
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Dodging" class="abs"></a>Dodging
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Unarmed" class="abs"></a>Unarmed
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.IdentifyMonster" class="abs"></a>IdentifyMonster
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Armsmaster" class="abs"></a>Armsmaster
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Stealing" class="abs"></a>Stealing
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Alchemy" class="abs"></a>Alchemy
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Skills.Learning" class="abs"></a>Learning
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.SpriteBits"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.SpriteBits</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.SpriteBits.TriggerByTouch" class="abs"></a>TriggerByTouch <i class="def-const">= 1</i>
</td><td class="def-right">
 triggered when a player comes into <b class="def-param">TriggerRadius</b>
</td>
</tr><tr>
<td class="def-left">
<a name="const.SpriteBits.TriggerByMonster" class="abs"></a>TriggerByMonster <i class="def-const">= 2</i>
</td><td class="def-right">
 triggered when a monster comes into <b class="def-param">TriggerRadius</b>
</td>
</tr><tr>
<td class="def-left">
<a name="const.SpriteBits.TriggerByObject" class="abs"></a>TriggerByObject <i class="def-const">= 4</i>
</td><td class="def-right">
 triggered when an object gets into <b class="def-param">TriggerRadius</b>
</td>
</tr><tr>
<td class="def-left">
<a name="const.SpriteBits.ShowOnMap" class="abs"></a>ShowOnMap <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.SpriteBits.IsChest" class="abs"></a>IsChest <i class="def-const">= 16</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.SpriteBits.Invisible" class="abs"></a>Invisible <i class="def-const">= 32</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.SpriteBits.IsObeliskChest" class="abs"></a>IsObeliskChest <i class="def-const">= 64</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="const.Stats"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>const.Stats</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="const.Stats.Might" class="abs"></a>Might <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Intellect" class="abs"></a>Intellect <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Personality" class="abs"></a>Personality <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Endurance" class="abs"></a>Endurance <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Accuracy" class="abs"></a>Accuracy <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Speed" class="abs"></a>Speed <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Luck" class="abs"></a>Luck <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.HP" class="abs"></a>HP <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.HitPoints" class="abs"></a>HitPoints <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.SP" class="abs"></a>SP <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.SpellPoints" class="abs"></a>SpellPoints <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.ArmorClass" class="abs"></a>ArmorClass <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.FireResistance" class="abs"></a>FireResistance <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.AirResistance" class="abs"></a>AirResistance <i class="def-const">= 11</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.WaterResistance" class="abs"></a>WaterResistance <i class="def-const">= 12</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.EarthResistance" class="abs"></a>EarthResistance <i class="def-const">= 13</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.MindResistance" class="abs"></a>MindResistance <i class="def-const">= 14</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.BodyResistance" class="abs"></a>BodyResistance <i class="def-const">= 15</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Alchemy" class="abs"></a>Alchemy <i class="def-const">= 16</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Stealing" class="abs"></a>Stealing <i class="def-const">= 17</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.DisarmTraps" class="abs"></a>DisarmTraps <i class="def-const">= 18</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.IdentifyItem" class="abs"></a>IdentifyItem <i class="def-const">= 19</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.IdentifyMonster" class="abs"></a>IdentifyMonster <i class="def-const">= 20</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Armsmaster" class="abs"></a>Armsmaster <i class="def-const">= 21</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Dodging" class="abs"></a>Dodging <i class="def-const">= 22</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Unarmed" class="abs"></a>Unarmed <i class="def-const">= 23</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.ElecResistance" class="abs"></a>ElecResistance <i class="def-const">= 11</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.ColdResistance" class="abs"></a>ColdResistance <i class="def-const">= 12</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.PoisonResistance" class="abs"></a>PoisonResistance <i class="def-const">= 13</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Level" class="abs"></a>Level
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.MeleeAttack" class="abs"></a>MeleeAttack
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.MeleeDamageBase" class="abs"></a>MeleeDamageBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.MeleeDamageMin" class="abs"></a>MeleeDamageMin
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.MeleeDamageMax" class="abs"></a>MeleeDamageMax
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.RangedAttack" class="abs"></a>RangedAttack
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.RangedDamageBase" class="abs"></a>RangedDamageBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.RangedDamageMin" class="abs"></a>RangedDamageMin
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.RangedDamageMax" class="abs"></a>RangedDamageMax
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.SpiritResistance" class="abs"></a>SpiritResistance <i class="def-const">= 33</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.FireMagic" class="abs"></a>FireMagic <i class="def-const">= 34</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.AirMagic" class="abs"></a>AirMagic <i class="def-const">= 35</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.WaterMagic" class="abs"></a>WaterMagic <i class="def-const">= 36</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.EarthMagic" class="abs"></a>EarthMagic <i class="def-const">= 37</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.SpiritMagic" class="abs"></a>SpiritMagic <i class="def-const">= 38</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.MindMagic" class="abs"></a>MindMagic <i class="def-const">= 39</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.BodyMagic" class="abs"></a>BodyMagic <i class="def-const">= 40</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.LightMagic" class="abs"></a>LightMagic <i class="def-const">= 41</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.DarkMagic" class="abs"></a>DarkMagic <i class="def-const">= 42</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Meditation" class="abs"></a>Meditation <i class="def-const">= 43</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Bow" class="abs"></a>Bow <i class="def-const">= 44</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Shield" class="abs"></a>Shield <i class="def-const">= 45</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Learning" class="abs"></a>Learning <i class="def-const">= 46</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.DarkElf" class="abs"></a>DarkElf <i class="def-const">= 47</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Vampire" class="abs"></a>Vampire <i class="def-const">= 48</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.Dragon" class="abs"></a>Dragon <i class="def-const">= 49</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="const.Stats.MagicResistance" class="abs"></a>MagicResistance <i class="def-const">= 23</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr></tbody>
</table>
<br>

<br><a name="evt.Players"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>evt.Players</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="evt.Players.0" class="abs"></a>0 <i class="def-const">= 0</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.1" class="abs"></a>1 <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.2" class="abs"></a>2 <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.3" class="abs"></a>3 <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.4" class="abs"></a>4 <i class="def-const">= 4</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.Current" class="abs"></a>Current
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.current" class="abs"></a>current
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.All" class="abs"></a>All <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.all" class="abs"></a>all <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.Random" class="abs"></a>Random <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.Players.random" class="abs"></a>random <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

<br><a name="evt.VarNum"></a>
<table class="def-table">
<tbody>
<tr>
<td colspan="2" class="def-caption">
<h3>evt.VarNum</h3>
 
&nbsp;<i class="def-ib">Values:</i><br>
</td>
</tr>
<tr>
<td class="def-left">
<a name="evt.VarNum.SexIs" class="abs"></a>SexIs <i class="def-const">= 1</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ClassIs" class="abs"></a>ClassIs <i class="def-const">= 2</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.HP" class="abs"></a>HP <i class="def-const">= 3</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.HasFullHP" class="abs"></a>HasFullHP <i class="def-const">= 4</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.SP" class="abs"></a>SP <i class="def-const">= 5</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.HasFullSP" class="abs"></a>HasFullSP <i class="def-const">= 6</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ArmorClass" class="abs"></a>ArmorClass <i class="def-const">= 7</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ArmorClassBonus" class="abs"></a>ArmorClassBonus <i class="def-const">= 8</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BaseLevel" class="abs"></a>BaseLevel <i class="def-const">= 9</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.LevelBonus" class="abs"></a>LevelBonus <i class="def-const">= 10</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.AgeBonus" class="abs"></a>AgeBonus <i class="def-const">= 11</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Awards" class="abs"></a>Awards <i class="def-const">= 12</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Experience" class="abs"></a>Experience <i class="def-const">= 13</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.QBits" class="abs"></a>QBits <i class="def-const">= 16</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Inventory" class="abs"></a>Inventory <i class="def-const">= 17</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.HourIs" class="abs"></a>HourIs <i class="def-const">= 18</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DayOfYearIs" class="abs"></a>DayOfYearIs <i class="def-const">= 19</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DayOfWeekIs" class="abs"></a>DayOfWeekIs <i class="def-const">= 20</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Gold" class="abs"></a>Gold <i class="def-const">= 21</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.GoldAddRandom" class="abs"></a>GoldAddRandom <i class="def-const">= 22</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Food" class="abs"></a>Food <i class="def-const">= 23</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.FoodAddRandom" class="abs"></a>FoodAddRandom <i class="def-const">= 24</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MightBonus" class="abs"></a>MightBonus <i class="def-const">= 25</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IntellectBonus" class="abs"></a>IntellectBonus <i class="def-const">= 26</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PersonalityBonus" class="abs"></a>PersonalityBonus <i class="def-const">= 27</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.EnduranceBonus" class="abs"></a>EnduranceBonus <i class="def-const">= 28</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.SpeedBonus" class="abs"></a>SpeedBonus <i class="def-const">= 29</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.AccuracyBonus" class="abs"></a>AccuracyBonus <i class="def-const">= 30</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.LuckBonus" class="abs"></a>LuckBonus <i class="def-const">= 31</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BaseMight" class="abs"></a>BaseMight <i class="def-const">= 32</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BaseIntellect" class="abs"></a>BaseIntellect <i class="def-const">= 33</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BasePersonality" class="abs"></a>BasePersonality <i class="def-const">= 34</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BaseEndurance" class="abs"></a>BaseEndurance <i class="def-const">= 35</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BaseSpeed" class="abs"></a>BaseSpeed <i class="def-const">= 36</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BaseAccuracy" class="abs"></a>BaseAccuracy <i class="def-const">= 37</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BaseLuck" class="abs"></a>BaseLuck <i class="def-const">= 38</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.CurrentMight" class="abs"></a>CurrentMight <i class="def-const">= 39</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.CurrentIntellect" class="abs"></a>CurrentIntellect <i class="def-const">= 40</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.CurrentPersonality" class="abs"></a>CurrentPersonality <i class="def-const">= 41</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.CurrentEndurance" class="abs"></a>CurrentEndurance <i class="def-const">= 42</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.CurrentSpeed" class="abs"></a>CurrentSpeed <i class="def-const">= 43</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.CurrentAccuracy" class="abs"></a>CurrentAccuracy <i class="def-const">= 44</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.CurrentLuck" class="abs"></a>CurrentLuck <i class="def-const">= 45</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.FireResistance" class="abs"></a>FireResistance <i class="def-const">= 46</i>
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.AirResistance" class="abs"></a>AirResistance <i class="def-const">= 47</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.WaterResistance" class="abs"></a>WaterResistance <i class="def-const">= 48</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.EarthResistance" class="abs"></a>EarthResistance <i class="def-const">= 49</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.SpiritResistance" class="abs"></a>SpiritResistance <i class="def-const">= 50</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MindResistance" class="abs"></a>MindResistance <i class="def-const">= 51</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BodyResistance" class="abs"></a>BodyResistance <i class="def-const">= 52</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ElecResistance" class="abs"></a>ElecResistance <i class="def-const">= 47</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ColdResistance" class="abs"></a>ColdResistance <i class="def-const">= 48</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PoisonResistance" class="abs"></a>PoisonResistance <i class="def-const">= 49</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MagicResistance" class="abs"></a>MagicResistance <i class="def-const">= 50</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.FireResBonus" class="abs"></a>FireResBonus
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.AirResBonus" class="abs"></a>AirResBonus <i class="def-const">= 58</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.WaterResBonus" class="abs"></a>WaterResBonus <i class="def-const">= 59</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.EarthResBonus" class="abs"></a>EarthResBonus <i class="def-const">= 60</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.SpiritResBonus" class="abs"></a>SpiritResBonus <i class="def-const">= 61</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MindResBonus" class="abs"></a>MindResBonus <i class="def-const">= 62</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BodyResBonus" class="abs"></a>BodyResBonus <i class="def-const">= 63</i>
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ElecResBonus" class="abs"></a>ElecResBonus <i class="def-const">= 52</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ColdResBonus" class="abs"></a>ColdResBonus <i class="def-const">= 53</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PoisonResBonus" class="abs"></a>PoisonResBonus <i class="def-const">= 54</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MagicResBonus" class="abs"></a>MagicResBonus <i class="def-const">= 55</i>
</td><td class="def-right">
<span class="def-ver">[MM6]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.StaffSkill" class="abs"></a>StaffSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.SwordSkill" class="abs"></a>SwordSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DaggerSkill" class="abs"></a>DaggerSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.AxeSkill" class="abs"></a>AxeSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.SpearSkill" class="abs"></a>SpearSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BowSkill" class="abs"></a>BowSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MaceSkill" class="abs"></a>MaceSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BlasterSkill" class="abs"></a>BlasterSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ShieldSkill" class="abs"></a>ShieldSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.LeatherSkill" class="abs"></a>LeatherSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ChainSkill" class="abs"></a>ChainSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PlateSkill" class="abs"></a>PlateSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.FireSkill" class="abs"></a>FireSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.AirSkill" class="abs"></a>AirSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.WaterSkill" class="abs"></a>WaterSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.EarthSkill" class="abs"></a>EarthSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.SpiritSkill" class="abs"></a>SpiritSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MindSkill" class="abs"></a>MindSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BodySkill" class="abs"></a>BodySkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.LightSkill" class="abs"></a>LightSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DarkSkill" class="abs"></a>DarkSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DarkElfAbilitySkill" class="abs"></a>DarkElfAbilitySkill <i class="def-const">= 89</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.VampireAbilitySkill" class="abs"></a>VampireAbilitySkill <i class="def-const">= 90</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DragonAbilitySkill" class="abs"></a>DragonAbilitySkill <i class="def-const">= 91</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IdentifyItemSkill" class="abs"></a>IdentifyItemSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MerchantSkill" class="abs"></a>MerchantSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.RepairSkill" class="abs"></a>RepairSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BodybuildingSkill" class="abs"></a>BodybuildingSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MeditationSkill" class="abs"></a>MeditationSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PerceptionSkill" class="abs"></a>PerceptionSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.RegenerationSkill" class="abs"></a>RegenerationSkill <i class="def-const">= 98</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DiplomacySkill" class="abs"></a>DiplomacySkill
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ThieverySkill" class="abs"></a>ThieverySkill
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DisarmTrapsSkill" class="abs"></a>DisarmTrapsSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DodgingSkill" class="abs"></a>DodgingSkill
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.UnarmedSkill" class="abs"></a>UnarmedSkill
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IdentifyMonsterSkill" class="abs"></a>IdentifyMonsterSkill
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ArmsmasterSkill" class="abs"></a>ArmsmasterSkill
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.StealingSkill" class="abs"></a>StealingSkill
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.AlchemySkill" class="abs"></a>AlchemySkill
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.LearningSkill" class="abs"></a>LearningSkill
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Cursed" class="abs"></a>Cursed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Weak" class="abs"></a>Weak
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Asleep" class="abs"></a>Asleep
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Afraid" class="abs"></a>Afraid
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Drunk" class="abs"></a>Drunk
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Insane" class="abs"></a>Insane
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PoisonedGreen" class="abs"></a>PoisonedGreen
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DiseasedGreen" class="abs"></a>DiseasedGreen
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PoisonedYellow" class="abs"></a>PoisonedYellow
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DiseasedYellow" class="abs"></a>DiseasedYellow
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PoisonedRed" class="abs"></a>PoisonedRed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.DiseasedRed" class="abs"></a>DiseasedRed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Paralysed" class="abs"></a>Paralysed
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Unconscious" class="abs"></a>Unconscious
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Dead" class="abs"></a>Dead
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Stoned" class="abs"></a>Stoned
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Eradicated" class="abs"></a>Eradicated
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MainCondition" class="abs"></a>MainCondition
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar0" class="abs"></a>MapVar0
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar1" class="abs"></a>MapVar1
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar2" class="abs"></a>MapVar2
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar3" class="abs"></a>MapVar3
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar4" class="abs"></a>MapVar4
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar5" class="abs"></a>MapVar5
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar6" class="abs"></a>MapVar6
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar7" class="abs"></a>MapVar7
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar8" class="abs"></a>MapVar8
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar9" class="abs"></a>MapVar9
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar10" class="abs"></a>MapVar10
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar11" class="abs"></a>MapVar11
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar12" class="abs"></a>MapVar12
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar13" class="abs"></a>MapVar13
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar14" class="abs"></a>MapVar14
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar15" class="abs"></a>MapVar15
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar16" class="abs"></a>MapVar16
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar17" class="abs"></a>MapVar17
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar18" class="abs"></a>MapVar18
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar19" class="abs"></a>MapVar19
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar20" class="abs"></a>MapVar20
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar21" class="abs"></a>MapVar21
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar22" class="abs"></a>MapVar22
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar23" class="abs"></a>MapVar23
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar24" class="abs"></a>MapVar24
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar25" class="abs"></a>MapVar25
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar26" class="abs"></a>MapVar26
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar27" class="abs"></a>MapVar27
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar28" class="abs"></a>MapVar28
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar29" class="abs"></a>MapVar29
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar30" class="abs"></a>MapVar30
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar31" class="abs"></a>MapVar31
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar32" class="abs"></a>MapVar32
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar33" class="abs"></a>MapVar33
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar34" class="abs"></a>MapVar34
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar35" class="abs"></a>MapVar35
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar36" class="abs"></a>MapVar36
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar37" class="abs"></a>MapVar37
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar38" class="abs"></a>MapVar38
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar39" class="abs"></a>MapVar39
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar40" class="abs"></a>MapVar40
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar41" class="abs"></a>MapVar41
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar42" class="abs"></a>MapVar42
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar43" class="abs"></a>MapVar43
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar44" class="abs"></a>MapVar44
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar45" class="abs"></a>MapVar45
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar46" class="abs"></a>MapVar46
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar47" class="abs"></a>MapVar47
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar48" class="abs"></a>MapVar48
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar49" class="abs"></a>MapVar49
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar50" class="abs"></a>MapVar50
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar51" class="abs"></a>MapVar51
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar52" class="abs"></a>MapVar52
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar53" class="abs"></a>MapVar53
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar54" class="abs"></a>MapVar54
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar55" class="abs"></a>MapVar55
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar56" class="abs"></a>MapVar56
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar57" class="abs"></a>MapVar57
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar58" class="abs"></a>MapVar58
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar59" class="abs"></a>MapVar59
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar60" class="abs"></a>MapVar60
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar61" class="abs"></a>MapVar61
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar62" class="abs"></a>MapVar62
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar63" class="abs"></a>MapVar63
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar64" class="abs"></a>MapVar64
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar65" class="abs"></a>MapVar65
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar66" class="abs"></a>MapVar66
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar67" class="abs"></a>MapVar67
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar68" class="abs"></a>MapVar68
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar69" class="abs"></a>MapVar69
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar70" class="abs"></a>MapVar70
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar71" class="abs"></a>MapVar71
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar72" class="abs"></a>MapVar72
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar73" class="abs"></a>MapVar73
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar74" class="abs"></a>MapVar74
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar75" class="abs"></a>MapVar75
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar76" class="abs"></a>MapVar76
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar77" class="abs"></a>MapVar77
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar78" class="abs"></a>MapVar78
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar79" class="abs"></a>MapVar79
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar80" class="abs"></a>MapVar80
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar81" class="abs"></a>MapVar81
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar82" class="abs"></a>MapVar82
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar83" class="abs"></a>MapVar83
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar84" class="abs"></a>MapVar84
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar85" class="abs"></a>MapVar85
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar86" class="abs"></a>MapVar86
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar87" class="abs"></a>MapVar87
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar88" class="abs"></a>MapVar88
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar89" class="abs"></a>MapVar89
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar90" class="abs"></a>MapVar90
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar91" class="abs"></a>MapVar91
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar92" class="abs"></a>MapVar92
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar93" class="abs"></a>MapVar93
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar94" class="abs"></a>MapVar94
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar95" class="abs"></a>MapVar95
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar96" class="abs"></a>MapVar96
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar97" class="abs"></a>MapVar97
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar98" class="abs"></a>MapVar98
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVar99" class="abs"></a>MapVar99
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.AutonotesBits" class="abs"></a>AutonotesBits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IsMightMoreThanBase" class="abs"></a>IsMightMoreThanBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IsIntellectMoreThanBase" class="abs"></a>IsIntellectMoreThanBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IsPersonalityMoreThanBase" class="abs"></a>IsPersonalityMoreThanBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IsEnduranceMoreThanBase" class="abs"></a>IsEnduranceMoreThanBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IsSpeedMoreThanBase" class="abs"></a>IsSpeedMoreThanBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IsAccuracyMoreThanBase" class="abs"></a>IsAccuracyMoreThanBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IsLuckMoreThanBase" class="abs"></a>IsLuckMoreThanBase
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PlayerBits" class="abs"></a>PlayerBits
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.NPCs" class="abs"></a>NPCs
</td><td class="def-right">
<span class="def-ver">[MM6, MM7]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ReputationIs" class="abs"></a>ReputationIs
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Flying" class="abs"></a>Flying
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.HasNPCProfession" class="abs"></a>HasNPCProfession
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.TotalCircusPrize" class="abs"></a>TotalCircusPrize
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.SkillPoints" class="abs"></a>SkillPoints
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MonthIs" class="abs"></a>MonthIs
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter1" class="abs"></a>Counter1
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter2" class="abs"></a>Counter2
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter3" class="abs"></a>Counter3
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter4" class="abs"></a>Counter4
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter5" class="abs"></a>Counter5
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter6" class="abs"></a>Counter6
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter7" class="abs"></a>Counter7
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter8" class="abs"></a>Counter8
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter9" class="abs"></a>Counter9
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Counter10" class="abs"></a>Counter10
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Reputation" class="abs"></a>Reputation
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History1" class="abs"></a>History1
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History2" class="abs"></a>History2
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History3" class="abs"></a>History3
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History4" class="abs"></a>History4
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History5" class="abs"></a>History5
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History6" class="abs"></a>History6
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History7" class="abs"></a>History7
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History8" class="abs"></a>History8
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History9" class="abs"></a>History9
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History10" class="abs"></a>History10
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History11" class="abs"></a>History11
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History12" class="abs"></a>History12
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History13" class="abs"></a>History13
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History14" class="abs"></a>History14
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History15" class="abs"></a>History15
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History16" class="abs"></a>History16
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History17" class="abs"></a>History17
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History18" class="abs"></a>History18
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History19" class="abs"></a>History19
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History20" class="abs"></a>History20
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History21" class="abs"></a>History21
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History22" class="abs"></a>History22
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History23" class="abs"></a>History23
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History24" class="abs"></a>History24
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History25" class="abs"></a>History25
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History26" class="abs"></a>History26
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History27" class="abs"></a>History27
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History28" class="abs"></a>History28
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History29" class="abs"></a>History29
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapAlert" class="abs"></a>MapAlert
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BankGold" class="abs"></a>BankGold
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Deaths" class="abs"></a>Deaths
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MontersHunted" class="abs"></a>MontersHunted
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.PrisonTerms" class="abs"></a>PrisonTerms
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ArenaWinsPage" class="abs"></a>ArenaWinsPage
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ArenaWinsSquire" class="abs"></a>ArenaWinsSquire
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ArenaWinsKnight" class="abs"></a>ArenaWinsKnight
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.ArenaWinsLord" class="abs"></a>ArenaWinsLord
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Invisible" class="abs"></a>Invisible
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.IsWearingItem" class="abs"></a>IsWearingItem
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Players" class="abs"></a>Players <i class="def-const">= 318</i>
</td><td class="def-right">
<span class="def-ver">[MM8]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.BaseStats" class="abs"></a>BaseStats[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.CurrentStats" class="abs"></a>CurrentStats[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.History" class="abs"></a>History[]
</td><td class="def-right">
<span class="def-ver">[MM7+]</span><span class="def-nbsp"> </span>  
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.MapVars" class="abs"></a>MapVars[]
</td><td class="def-right">
 
</td>
</tr><tr>
<td class="def-left">
<a name="evt.VarNum.Skills" class="abs"></a>Skills[]
</td><td class="def-right">
 
</td>
</tr></tbody>
</table>
<br>

	</div>
</body>
</html>